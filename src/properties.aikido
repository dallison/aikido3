/*
 * properties.aikido
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc.
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.13
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */

// The properties class is like the Java version.  It maintains
// a map of property name vs set of values.  It has the ability
// to read from and write to streams
//
// David Allison
// 1.13 07/29/03
//

//
// if the value of 'append' is true, then insertion of a property
// that already exists will append the value onto that property,
// otherwise the value will be replaced
//

class Properties (append = false) {
    import map

    var value = new Map()		// the map

public:
    //
    // add a property to the map
    //
    function put (prop, val) {
        if (value.isPresent (prop)) {
            if (append) {
                var v = value.find (prop)
                if (typeof (v) == "vector") {
                    val -> v
                } else {
                    var newval = [v, val]
                    value.erase (prop)
                    value.insert (prop, newval)
                }
            }
        } else {
            value.insert (prop, val)
        }
    }

    function remove (prop) {
        value.erase (prop)
    }


    function clear() {
        value.clear()
    }

    function replace (prop, value) {
        remove (prop)
        put (prop, value)
    }

    operator [] (i, j = -1) {
        if (j != -1) {
            throw "unimplemented: no range allowed"
        } else {
            return value.find (i)
        }
    }


    //
    // input and output of a properties object
    //

    operator -> (stream, read) {
        if (read) {
            var lines = []
            stream -> lines
            foreach line lines {
                if (sizeof (line["^ *#"]) == 0) {		
                    var namex = line[" *([a-zA-Z0-9_\\.]+) *= *"]			// extract name
                    if (sizeof (namex) == 2) {
                        var name = line[namex[1].start:namex[1].end]
                        var valstring = line[namex[0].end + 1:sizeof (line) - 2]
                        var values = System.split (valstring, ',')
                        if (sizeof (values) == 1) {
                            put (name, values[0])
                        } else {
                            put (name, values)
                        }
                    }
                }
            }
        } else {
            foreach prop value {
                [prop.first, " = "] -> stream
                if (typeof (prop.second) == "vector") {
                    var n = sizeof (prop.second)
                    foreach val prop.second {
                        val -> stream
                        if (n > 1) {
                            ',' -> stream
                        }
                        --n
                    }
                } else {
                    prop.second -> stream
                }
                "\n" -> stream
            }
        }
    }

   operator foreach() {
       return value.operator foreach()
   }

}
