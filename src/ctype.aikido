/*
 * ctype.aikido
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc.
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.14
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */

//
// C ctype.h like package
//
// Author: David Allison
// Version: 1.14 07/29/03
//

public package ctype {
public:
    function isalpha (c) {
        return (c >= 'A' && c<= 'Z') || (c >= 'a' && c <= 'z') ;
    }

    function isdigit (c) {
        return c >= '0' && c <= '9'
    }

    function isxdigit (c) {
        return isdigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')
    }

    function isspace (c) {
        return c == ' ' || c == '\t' 
    }

    function isalnum (c) {
        return isalpha (c) || isdigit (c)
    }

    function iscntrl (c) {
        return (c >= 0 && c <= 32) || c == 127
    }
   
    function islower (c) {
        return c >= 'a' && c <= 'z' ;
    }

    function isupper (c) {
        return c >= 'A' && c <= 'Z' ;
    }

    function ispunct (c) {
        switch (c) {
        case '.':
        case ',':
        case ':':
        case ';':
        case '!':
        case '?':
            return true
        }
        return false
    }

    function isprint (c) {
        return c >= 32 && c < 127 
    }

    function toupper (c) {
        if (isalpha(c) && c >= 'a') {
            c -= 'a' - 'A' ;
        }
        return cast<char>(c) ;
    }

    function tolower (c) {
        if (isalpha(c) && c <= 'Z') {
            c += 'a' - 'A' ;
        }
        return cast<char>(c) ;
    }
}
