/*
 * gdk.aikido
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc. 2003
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.2
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */


package GDK {
public:
    import libX11
    import libXext
    import libgdk
    import libddk

    private native gdk_init(argc, argv)
    private native gdk_init_check(argc, argv)
    private native gdk_exit(error_code)
    private native gdk_set_locale()
    private native gdk_error_trap_push()
    private native gdk_error_trap_pop()
    private native gdk_events_pending()
    private native gdk_event_get()
    private native gdk_event_peek()
    private native gdk_event_get_graphics_expose(window)
    private native gdk_event_put(event)
    private native gdk_event_copy(event)
    private native gdk_event_free(event)
    private native gdk_event_get_time(event)
    private native gdk_event_handler_set(func, data, notify)
    private native gdk_set_show_events(show_events)
    private native gdk_set_use_xshm(use_xshm)
    private native gdk_get_show_events()
    private native gdk_get_use_xshm()
    private native gdk_get_display()
    private native gdk_time_get()
    private native gdk_timer_get()
    private native gdk_timer_set(milliseconds)
    private native gdk_timer_enable()
    private native gdk_timer_disable()
    private native gdk_input_add_full(source, condition, func, data, destroy)
    private native gdk_input_add(source, condition, func, data)
    private native gdk_input_remove(tag)
    private native gdk_pointer_grab(window, owner_events, event_mask, confine_to, cursor, time)
    private native gdk_pointer_ungrab(time)
    private native gdk_keyboard_grab(window, owner_events, time)
    private native gdk_keyboard_ungrab(time)
    private native gdk_pointer_is_grabbed()
    private native gdk_screen_width()
    private native gdk_screen_height()
    private native gdk_screen_width_mm()
    private native gdk_screen_height_mm()
    private native gdk_flush()
    private native gdk_beep()
    private native gdk_key_repeat_disable()
    private native gdk_key_repeat_restore()
    private native gdk_visual_get_best_depth()
    private native gdk_visual_get_best_type()
    private native gdk_visual_get_system()
    private native gdk_visual_get_best()
    private native gdk_visual_get_best_with_depth(depth)
    private native gdk_visual_get_best_with_type(visual_type)
    private native gdk_visual_get_best_with_both(depth, visual_type)
    private native gdk_visual_ref(visual)
    private native gdk_visual_unref(visual)
    private native gdk_query_depths(depths, count)
    private native gdk_query_visual_types(visual_types, count)
    private native gdk_list_visuals()
    private native gdk_window_new(parent, attributes, attributes_mask)
    private native gdk_window_destroy(window)
    private native gdk_window_ref(window)
    private native gdk_window_unref(window)
    private native gdk_window_at_pointer(win_x, win_y)
    private native gdk_window_show(window)
    private native gdk_window_hide(window)
    private native gdk_window_withdraw(window)
    private native gdk_window_move(window, x, y)
    private native gdk_window_resize(window, width, height)
    private native gdk_window_move_resize(window, x, y, width, height)
    private native gdk_window_reparent(window, new_parent, x, y)
    private native gdk_window_clear(window)
    private native gdk_window_clear_area(window, x, y, width, height)
    private native gdk_window_clear_area_e(window, x, y, width, height)
    private native gdk_window_copy_area(window, gc, x, y, source_window, source_x, source_y, width, height)
    private native gdk_window_raise(window)
    private native gdk_window_lower(window)
    private native gdk_window_set_user_data(window, user_data)
    private native gdk_window_set_override_redirect(window, override_redirect)
    private native gdk_window_add_filter(window, func, data)
    private native gdk_window_remove_filter(window, func, data)
    private native gdk_window_shape_combine_mask(window, shape_mask, offset_x, offset_y)
    private native gdk_window_set_child_shapes(window)
    private native gdk_window_merge_child_shapes(window)
    private native gdk_window_is_visible(window)
    private native gdk_window_is_viewable(window)
    private native gdk_window_set_static_gravities(window, use_static)
    private native gdk_add_client_message_filter(message_type, func, data)
    private native gdk_drag_context_new()
    private native gdk_drag_context_ref(context)
    private native gdk_drag_context_unref(context)
    private native gdk_drag_status(context, action, time)
    private native gdk_drop_reply(context, ok, time)
    private native gdk_drop_finish(context, success, time)
    private native gdk_drag_get_selection(context)
    private native gdk_drag_begin(window, targets)
    private native gdk_drag_get_protocol(xid, protocol)
    private native gdk_drag_find_window(context, drag_window, x_root, y_root, dest_window, protocol)
    private native gdk_drag_motion(context, dest_window, protocol, x_root, y_root, suggested_action, possible_actions, time)
    private native gdk_drag_drop(context, time)
    private native gdk_drag_abort(context, time)
    private native gdk_window_set_hints(window, x, y, min_width, min_height, max_width, max_height, flags)
    private native gdk_window_set_geometry_hints(window, geometry, flags)
    private native gdk_set_sm_client_id(sm_client_id)
    private native gdk_window_set_title(window, title)
    private native gdk_window_set_role(window, role)
    private native gdk_window_set_transient_for(window, leader)
    private native gdk_window_set_background(window, color)
    private native gdk_window_set_back_pixmap(window, pixmap, parent_relative)
    private native gdk_window_set_cursor(window, cursor)
    private native gdk_window_set_colormap(window, colormap)
    private native gdk_window_get_user_data(window, data)
    private native gdk_window_get_geometry(window, x, y, width, height, depth)
    private native gdk_window_get_position(window, x, y)
    private native gdk_window_get_size(window, width, height)
    private native gdk_window_get_visual(window)
    private native gdk_window_get_colormap(window)
    private native gdk_window_get_type(window)
    private native gdk_window_get_origin(window, x, y)
    private native gdk_window_get_deskrelative_origin(window, x, y)
    private native gdk_window_get_root_origin(window, x, y)
    private native gdk_window_get_pointer(window, var x, var y, var mask)
    private native gdk_window_get_parent(window)
    private native gdk_window_get_toplevel(window)
    private native gdk_window_get_children(window)
    private native gdk_window_get_events(window)
    private native gdk_window_set_events(window, event_mask)
    private native gdk_window_set_icon(window, icon_window, pixmap, mask)
    private native gdk_window_set_icon_name(window, name)
    private native gdk_window_set_group(window, leader)
    private native gdk_window_set_decorations(window, decorations)
    private native gdk_window_set_functions(window, functions)
    private native gdk_window_get_toplevels()
    private native gdk_window_register_dnd(window)
    private native gdk_drawable_set_data(drawable, key, data, destroy_func)
    private native gdk_cursor_new(cursor_type)
    private native gdk_cursor_new_from_pixmap(source, mask, fg, bg, x, y)
    private native gdk_cursor_destroy(cursor)
    private native gdk_gc_new(window)
    private native gdk_gc_new_with_values(window, values, values_mask)
    private native gdk_gc_ref(gc)
    private native gdk_gc_unref(gc)
    private native gdk_gc_destroy(gc)
    private native gdk_gc_get_values(gc, values)
    private native gdk_gc_set_foreground(gc, color)
    private native gdk_gc_set_background(gc, color)
    private native gdk_gc_set_font(gc, font)
    private native gdk_gc_set_function(gc, func)
    private native gdk_gc_set_fill(gc, fill)
    private native gdk_gc_set_tile(gc, tile)
    private native gdk_gc_set_stipple(gc, stipple)
    private native gdk_gc_set_ts_origin(gc, x, y)
    private native gdk_gc_set_clip_origin(gc, x, y)
    private native gdk_gc_set_clip_mask(gc, mask)
    private native gdk_gc_set_clip_rectangle(gc, rectangle)
    private native gdk_gc_set_clip_region(gc, region)
    private native gdk_gc_set_subwindow(gc, mode)
    private native gdk_gc_set_exposures(gc, exposures)
    private native gdk_gc_set_line_attributes(gc, line_width, line_style, cap_style, join_style)
    private native gdk_gc_set_dashes(gc, dash_offset, dash_list, n)
    private native gdk_gc_copy(dst_gc, src_gc)
    private native gdk_pixmap_new(window, width, height, depth)
    private native gdk_bitmap_create_from_data(window, data, width, height)
    private native gdk_pixmap_create_from_data(window, data, width, height, depth, fg, bg)
    private native gdk_pixmap_create_from_xpm(window, var mask, transparent_color, filename)
    private native gdk_pixmap_colormap_create_from_xpm(window, colormap, var mask, transparent_color, filename)
    private native gdk_pixmap_create_from_xpm_d(window, var mask, transparent_color, data)
    private native gdk_pixmap_colormap_create_from_xpm_d(window, colormap, var mask, transparent_color, data)
    private native gdk_pixmap_ref(pixmap)
    private native gdk_pixmap_unref(pixmap)
    private native gdk_bitmap_ref(pixmap)
    private native gdk_bitmap_unref(pixmap)
    private native gdk_image_new_bitmap(visual, data, width, height)
    private native gdk_image_new(type, visual, width, height)
    private native gdk_image_get(window, x, y, width, height)
    private native gdk_image_put_pixel(image, x, y, pixel)
    private native gdk_image_get_pixel(image, x, y)
    private native gdk_image_destroy(image)
    private native gdk_colormap_new(visual, allocate)
    private native gdk_colormap_ref(cmap)
    private native gdk_colormap_unref(cmap)
    private native gdk_colormap_get_system()
    private native gdk_colormap_get_system_size()
    private native gdk_colormap_change(colormap, ncolors)
    private native gdk_colormap_sync(colormap, force)
    private native gdk_colormap_alloc_colors(colormap, colors, ncolors, writeable, best_match, success)
    private native gdk_colormap_alloc_color(colormap, color, writeable, best_match)
    private native gdk_colormap_free_colors(colormap, colors, ncolors)
    private native gdk_colormap_get_visual(colormap)
    private native gdk_color_copy(color)
    private native gdk_color_free(color)
    private native gdk_color_parse(spec, color)
    private native gdk_color_hash(colora, colorb)
    private native gdk_color_equal(colora, colorb)
    private native gdk_colors_store(colormap, colors, ncolors)
    private native gdk_colors_alloc(colormap, contiguous, planes, nplanes, pixels, npixels)
    private native gdk_colors_free(colormap, pixels, npixels, planes)
    private native gdk_color_white(colormap, color)
    private native gdk_color_black(colormap, color)
    private native gdk_color_alloc(colormap, color)
    private native gdk_color_change(colormap, color)
    private native gdk_font_load(font_name)
    private native gdk_fontset_load(fontset_name)
    private native gdk_font_ref(font)
    private native gdk_font_unref(font)
    private native gdk_font_id(font)
    private native gdk_font_equal(fonta, fontb)
    private native gdk_string_width(font, string)
    private native gdk_text_width(font, text, text_length)
    private native gdk_text_width_wc(font, text, text_length)
    private native gdk_char_width(font, character)
    private native gdk_char_width_wc(font, character)
    private native gdk_string_measure(font, string)
    private native gdk_text_measure(font, text, text_length)
    private native gdk_char_measure(font, character)
    private native gdk_string_height(font, string)
    private native gdk_text_height(font, text, text_length)
    private native gdk_char_height(font, character)
    private native gdk_text_extents(font, text, text_length, lbearing, rbearing, width, ascent, descent)
    private native gdk_text_extents_wc(font, text, text_length, lbearing, rbearing, width, ascent, descent)
    private native gdk_string_extents(font, string, lbearing, rbearing, width, ascent, descent)
    private native gdk_draw_point(drawable, gc, x, y)
    private native gdk_draw_line(drawable, gc, x1, y1, x2, y2)
    private native gdk_draw_rectangle(drawable, gc, filled, x, y, width, height)
    private native gdk_draw_arc(drawable, gc, filled, x, y, width, height, angle1, angle2)
    private native gdk_draw_polygon(drawable, gc, filled, points, npoints)
    private native gdk_draw_string(drawable, font, gc, x, y, string)
    private native gdk_draw_text(drawable, font, gc, x, y, text, text_length)
    private native gdk_draw_text_wc(drawable, font, gc, x, y, text, text_length)
    private native gdk_draw_pixmap(drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height)
    private native gdk_draw_image(drawable, gc, image, xsrc, ysrc, xdest, ydest, width, height)
    private native gdk_draw_points(drawable, gc, points, npoints)
    private native gdk_draw_segments(drawable, gc, segs, nsegs)
    private native gdk_draw_lines(drawable, gc, points, npoints)
    private native gdk_selection_owner_set(owner, selection, time, send_event)
    private native gdk_selection_owner_get(selection)
    private native gdk_selection_convert(requestor, selection, target, time)
    private native gdk_selection_property_get(requestor, data, prop_type, prop_format)
    private native gdk_selection_send_notify(requestor, selection, target, property, time)
    private native gdk_text_property_to_text_list(encoding, format, text, length, list)
    private native gdk_free_text_list(list)
    private native gdk_string_to_compound_text(str, encoding, format, ctext, length)
    private native gdk_free_compound_text(ctext)
    private native gdk_atom_intern(atom_name, only_if_exists)
    private native gdk_atom_name(atom)
    private native gdk_property_get(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data)
    private native gdk_property_change(window, property, type, format, mode, data, nelements)
    private native gdk_property_delete(window, property)
    private native gdk_rectangle_intersect(src1, src2, dest)
    private native gdk_rectangle_union(src1, src2, dest)
    private native gdk_input_init()
    private native gdk_input_exit()
    private native gdk_input_list_devices()
    private native gdk_input_set_extension_events(window, mask, mode)
    private native gdk_input_set_source(deviceid, source)
    private native gdk_input_set_mode(deviceid, mode)
    private native gdk_input_set_axes(deviceid, axes)
    private native gdk_input_set_key(deviceid, index, keyval, modifiers)
    private native gdk_input_window_get_pointer(window, deviceid, x, y, pressure, xtilt, ytilt, mask)
    private native gdk_input_motion_events(window, deviceid, start, stop, nevents_return)
    private native gdk_im_ready()
    private native gdk_im_begin(ic, window)
    private native gdk_im_end()
    private native gdk_im_decide_style(supported_style)
    private native gdk_im_set_best_style(best_allowed_style)
    private native gdk_ic_new(attr, mask)
    private native gdk_ic_destroy(ic)
    private native gdk_ic_get_style(ic)
    private native gdk_ic_get_events(ic)
    private native gdk_ic_attr_new()
    private native gdk_ic_attr_destroy(attr)
    private native gdk_ic_set_attr(ic, attr, mask)
    private native gdk_ic_get_attr(ic, attr, mask)
    private native gdk_wcstombs(src)
    private native gdk_mbstowcs(dest, src, dest_max)
    private native gdk_color_context_new(visual, colormap)
    private native gdk_color_context_new_mono(visual, colormap)
    private native gdk_color_context_free(cc)
    private native gdk_color_context_get_pixel(cc, red, green, blue, failed)
    private native gdk_color_context_get_pixels(cc, reds, greens, blues, ncolors, colors, nallocated)
    private native gdk_color_context_get_pixels_incremental(cc, reds, greens, blues, ncolors, used, colors, nallocated)
    private native gdk_color_context_query_color(cc, color)
    private native gdk_color_context_query_colors(cc, colors, num_colors)
    private native gdk_color_context_add_palette(cc, palette, num_palette)
    private native gdk_color_context_init_dither(cc)
    private native gdk_color_context_free_dither(cc)
    private native gdk_color_context_get_pixel_from_palette(cc, red, green, blue, failed)
    private native gdk_color_context_get_index_from_palette(cc, red, green, blue, failed)
    private native gdk_region_new()
    private native gdk_region_destroy(region)
    private native gdk_region_get_clipbox(region, rectangle)
    private native gdk_region_empty(region)
    private native gdk_region_equal(region1, region2)
    private native gdk_region_point_in(region, x, y)
    private native gdk_region_rect_in(region, rect)
    private native gdk_region_polygon(points, npoints, fill_rule)
    private native gdk_region_offset(region, dx, dy)
    private native gdk_region_shrink(region, dx, dy)
    private native gdk_region_union_with_rect(region, rect)
    private native gdk_regions_intersect(source1, source2)
    private native gdk_regions_union(source1, source2)
    private native gdk_regions_subtract(source1, source2)
    private native gdk_regions_xor(source1, source2)
    private native gdk_event_send_clientmessage_toall(event)
    private native gdk_event_send_client_message(event, xid)
    private native gdk_keyval_name(keyval)
    private native gdk_keyval_from_name(keyval_name)
    private native gdk_keyval_to_upper(keyval)
    private native gdk_keyval_to_lower(keyval)
    private native gdk_keyval_is_upper(keyval)
    private native gdk_keyval_is_lower(keyval)
    private native gdk_threads_enter()
    private native gdk_threads_leave()
    public function init(argc, argv) {
        return gdk_init(argc, argv)
    }

    public function init_check(argc, argv) {
        return gdk_init_check(argc, argv)
    }

    public function exit(error_code) {
        return gdk_exit(error_code)
    }

    public function set_locale() {
        return gdk_set_locale()
    }

    public function error_trap_push() {
        return gdk_error_trap_push()
    }

    public function error_trap_pop() {
        return gdk_error_trap_pop()
    }

    public function events_pending() {
        return gdk_events_pending()
    }

    public function event_get() {
        return gdk_event_get()
    }

    public function event_peek() {
        return gdk_event_peek()
    }

    public function event_get_graphics_expose(window) {
        return gdk_event_get_graphics_expose(window)
    }

    public function event_put(event) {
        return gdk_event_put(event)
    }

    public function event_copy(event) {
        return gdk_event_copy(event)
    }

    public function event_free(event) {
        return gdk_event_free(event)
    }

    public function event_get_time(event) {
        return gdk_event_get_time(event)
    }

    public function event_handler_set(func, data, notify) {
        return gdk_event_handler_set(func, data, notify)
    }

    public function set_show_events(show_events) {
        return gdk_set_show_events(show_events)
    }

    public function set_use_xshm(use_xshm) {
        return gdk_set_use_xshm(use_xshm)
    }

    public function get_show_events() {
        return gdk_get_show_events()
    }

    public function get_use_xshm() {
        return gdk_get_use_xshm()
    }

    public function get_display() {
        return gdk_get_display()
    }

    public function time_get() {
        return gdk_time_get()
    }

    public function timer_get() {
        return gdk_timer_get()
    }

    public function timer_set(milliseconds) {
        return gdk_timer_set(milliseconds)
    }

    public function timer_enable() {
        return gdk_timer_enable()
    }

    public function timer_disable() {
        return gdk_timer_disable()
    }

    public function input_add_full(source, condition, func, data, destroy) {
        return gdk_input_add_full(source, condition, func, data, destroy)
    }

    public function input_add(source, condition, func, data) {
        return gdk_input_add(source, condition, func, data)
    }

    public function input_remove(tag) {
        return gdk_input_remove(tag)
    }

    public function pointer_grab(window, owner_events, event_mask, confine_to, cursor, time) {
        return gdk_pointer_grab(window, owner_events, event_mask, confine_to, cursor, time)
    }

    public function pointer_ungrab(time) {
        return gdk_pointer_ungrab(time)
    }

    public function keyboard_grab(window, owner_events, time) {
        return gdk_keyboard_grab(window, owner_events, time)
    }

    public function keyboard_ungrab(time) {
        return gdk_keyboard_ungrab(time)
    }

    public function pointer_is_grabbed() {
        return gdk_pointer_is_grabbed()
    }

    public function screen_width() {
        return gdk_screen_width()
    }

    public function screen_height() {
        return gdk_screen_height()
    }

    public function screen_width_mm() {
        return gdk_screen_width_mm()
    }

    public function screen_height_mm() {
        return gdk_screen_height_mm()
    }

    public function flush() {
        return gdk_flush()
    }

    public function beep() {
        return gdk_beep()
    }

    public function key_repeat_disable() {
        return gdk_key_repeat_disable()
    }

    public function key_repeat_restore() {
        return gdk_key_repeat_restore()
    }

    public function visual_get_best_depth() {
        return gdk_visual_get_best_depth()
    }

    public function visual_get_best_type() {
        return gdk_visual_get_best_type()
    }

    public function visual_get_system() {
        return gdk_visual_get_system()
    }

    public function visual_get_best() {
        return gdk_visual_get_best()
    }

    public function visual_get_best_with_depth(depth) {
        return gdk_visual_get_best_with_depth(depth)
    }

    public function visual_get_best_with_type(visual_type) {
        return gdk_visual_get_best_with_type(visual_type)
    }

    public function visual_get_best_with_both(depth, visual_type) {
        return gdk_visual_get_best_with_both(depth, visual_type)
    }

    public function visual_ref(visual) {
        return gdk_visual_ref(visual)
    }

    public function visual_unref(visual) {
        return gdk_visual_unref(visual)
    }

    public function query_depths(depths, count) {
        return gdk_query_depths(depths, count)
    }

    public function query_visual_types(visual_types, count) {
        return gdk_query_visual_types(visual_types, count)
    }

    public function list_visuals() {
        return gdk_list_visuals()
    }

    public function window_new(parent, attributes, attributes_mask) {
        return gdk_window_new(parent, attributes, attributes_mask)
    }

    public function window_destroy(window) {
        return gdk_window_destroy(window)
    }

    public function window_ref(window) {
        return gdk_window_ref(window)
    }

    public function window_unref(window) {
        return gdk_window_unref(window)
    }

    public function window_at_pointer(win_x, win_y) {
        return gdk_window_at_pointer(win_x, win_y)
    }

    public function window_show(window) {
        return gdk_window_show(window)
    }

    public function window_hide(window) {
        return gdk_window_hide(window)
    }

    public function window_withdraw(window) {
        return gdk_window_withdraw(window)
    }

    public function window_move(window, x, y) {
        return gdk_window_move(window, x, y)
    }

    public function window_resize(window, width, height) {
        return gdk_window_resize(window, width, height)
    }

    public function window_move_resize(window, x, y, width, height) {
        return gdk_window_move_resize(window, x, y, width, height)
    }

    public function window_reparent(window, new_parent, x, y) {
        return gdk_window_reparent(window, new_parent, x, y)
    }

    public function window_clear(window) {
        return gdk_window_clear(window)
    }

    public function window_clear_area(window, x, y, width, height) {
        return gdk_window_clear_area(window, x, y, width, height)
    }

    public function window_clear_area_e(window, x, y, width, height) {
        return gdk_window_clear_area_e(window, x, y, width, height)
    }

    public function window_copy_area(window, gc, x, y, source_window, source_x, source_y, width, height) {
        return gdk_window_copy_area(window, gc, x, y, source_window, source_x, source_y, width, height)
    }

    public function window_raise(window) {
        return gdk_window_raise(window)
    }

    public function window_lower(window) {
        return gdk_window_lower(window)
    }

    public function window_set_user_data(window, user_data) {
        return gdk_window_set_user_data(window, user_data)
    }

    public function window_set_override_redirect(window, override_redirect) {
        return gdk_window_set_override_redirect(window, override_redirect)
    }

    public function window_add_filter(window, func, data) {
        return gdk_window_add_filter(window, func, data)
    }

    public function window_remove_filter(window, func, data) {
        return gdk_window_remove_filter(window, func, data)
    }

    public function window_shape_combine_mask(window, shape_mask, offset_x, offset_y) {
        return gdk_window_shape_combine_mask(window, shape_mask, offset_x, offset_y)
    }

    public function window_set_child_shapes(window) {
        return gdk_window_set_child_shapes(window)
    }

    public function window_merge_child_shapes(window) {
        return gdk_window_merge_child_shapes(window)
    }

    public function window_is_visible(window) {
        return gdk_window_is_visible(window)
    }

    public function window_is_viewable(window) {
        return gdk_window_is_viewable(window)
    }

    public function window_set_static_gravities(window, use_static) {
        return gdk_window_set_static_gravities(window, use_static)
    }

    public function add_client_message_filter(message_type, func, data) {
        return gdk_add_client_message_filter(message_type, func, data)
    }

    public function drag_context_new() {
        return gdk_drag_context_new()
    }

    public function drag_context_ref(context) {
        return gdk_drag_context_ref(context)
    }

    public function drag_context_unref(context) {
        return gdk_drag_context_unref(context)
    }

    public function drag_status(context, action, time) {
        return gdk_drag_status(context, action, time)
    }

    public function drop_reply(context, ok, time) {
        return gdk_drop_reply(context, ok, time)
    }

    public function drop_finish(context, success, time) {
        return gdk_drop_finish(context, success, time)
    }

    public function drag_get_selection(context) {
        return gdk_drag_get_selection(context)
    }

    public function drag_begin(window, targets) {
        return gdk_drag_begin(window, targets)
    }

    public function drag_get_protocol(xid, protocol) {
        return gdk_drag_get_protocol(xid, protocol)
    }

    public function drag_find_window(context, drag_window, x_root, y_root, dest_window, protocol) {
        return gdk_drag_find_window(context, drag_window, x_root, y_root, dest_window, protocol)
    }

    public function drag_motion(context, dest_window, protocol, x_root, y_root, suggested_action, possible_actions, time) {
        return gdk_drag_motion(context, dest_window, protocol, x_root, y_root, suggested_action, possible_actions, time)
    }

    public function drag_drop(context, time) {
        return gdk_drag_drop(context, time)
    }

    public function drag_abort(context, time) {
        return gdk_drag_abort(context, time)
    }

    public function window_set_hints(window, x, y, min_width, min_height, max_width, max_height, flags) {
        return gdk_window_set_hints(window, x, y, min_width, min_height, max_width, max_height, flags)
    }

    public function window_set_geometry_hints(window, geometry, flags) {
        return gdk_window_set_geometry_hints(window, geometry, flags)
    }

    public function set_sm_client_id(sm_client_id) {
        return gdk_set_sm_client_id(sm_client_id)
    }

    public function window_set_title(window, title) {
        return gdk_window_set_title(window, title)
    }

    public function window_set_role(window, role) {
        return gdk_window_set_role(window, role)
    }

    public function window_set_transient_for(window, leader) {
        return gdk_window_set_transient_for(window, leader)
    }

    public function window_set_background(window, color) {
        return gdk_window_set_background(window, color)
    }

    public function window_set_back_pixmap(window, pixmap, parent_relative) {
        return gdk_window_set_back_pixmap(window, pixmap, parent_relative)
    }

    public function window_set_cursor(window, cursor) {
        return gdk_window_set_cursor(window, cursor)
    }

    public function window_set_colormap(window, colormap) {
        return gdk_window_set_colormap(window, colormap)
    }

    public function window_get_user_data(window, data) {
        return gdk_window_get_user_data(window, data)
    }

    public function window_get_geometry(window, x, y, width, height, depth) {
        return gdk_window_get_geometry(window, x, y, width, height, depth)
    }

    public function window_get_position(window, x, y) {
        return gdk_window_get_position(window, x, y)
    }

    public function window_get_size(window, width, height) {
        return gdk_window_get_size(window, width, height)
    }

    public function window_get_visual(window) {
        return gdk_window_get_visual(window)
    }

    public function window_get_colormap(window) {
        return gdk_window_get_colormap(window)
    }

    public function window_get_type(window) {
        return gdk_window_get_type(window)
    }

    public function window_get_origin(window, x, y) {
        return gdk_window_get_origin(window, x, y)
    }

    public function window_get_deskrelative_origin(window, x, y) {
        return gdk_window_get_deskrelative_origin(window, x, y)
    }

    public function window_get_root_origin(window, x, y) {
        return gdk_window_get_root_origin(window, x, y)
    }

    public function window_get_pointer(window, var x, var y, var mask) {
        return gdk_window_get_pointer(window, x, y, mask)
    }

    public function window_get_parent(window) {
        return gdk_window_get_parent(window)
    }

    public function window_get_toplevel(window) {
        return gdk_window_get_toplevel(window)
    }

    public function window_get_children(window) {
        return gdk_window_get_children(window)
    }

    public function window_get_events(window) {
        return gdk_window_get_events(window)
    }

    public function window_set_events(window, event_mask) {
        return gdk_window_set_events(window, event_mask)
    }

    public function window_set_icon(window, icon_window, pixmap, mask) {
        return gdk_window_set_icon(window, icon_window, pixmap, mask)
    }

    public function window_set_icon_name(window, name) {
        return gdk_window_set_icon_name(window, name)
    }

    public function window_set_group(window, leader) {
        return gdk_window_set_group(window, leader)
    }

    public function window_set_decorations(window, decorations) {
        return gdk_window_set_decorations(window, decorations)
    }

    public function window_set_functions(window, functions) {
        return gdk_window_set_functions(window, functions)
    }

    public function window_get_toplevels() {
        return gdk_window_get_toplevels()
    }

    public function window_register_dnd(window) {
        return gdk_window_register_dnd(window)
    }

    public function drawable_set_data(drawable, key, data, destroy_func) {
        return gdk_drawable_set_data(drawable, key, data, destroy_func)
    }

    public function cursor_new(cursor_type) {
        return gdk_cursor_new(cursor_type)
    }

    public function cursor_new_from_pixmap(source, mask, fg, bg, x, y) {
        return gdk_cursor_new_from_pixmap(source, mask, fg, bg, x, y)
    }

    public function cursor_destroy(cursor) {
        return gdk_cursor_destroy(cursor)
    }

    public function gc_new(window) {
        return gdk_gc_new(window)
    }

    public function gc_new_with_values(window, values, values_mask) {
        return gdk_gc_new_with_values(window, values, values_mask)
    }

    public function gc_ref(gc) {
        return gdk_gc_ref(gc)
    }

    public function gc_unref(gc) {
        return gdk_gc_unref(gc)
    }

    public function gc_destroy(gc) {
        return gdk_gc_destroy(gc)
    }

    public function gc_get_values(gc, values) {
        return gdk_gc_get_values(gc, values)
    }

    public function gc_set_foreground(gc, color) {
        return gdk_gc_set_foreground(gc, color)
    }

    public function gc_set_background(gc, color) {
        return gdk_gc_set_background(gc, color)
    }

    public function gc_set_font(gc, font) {
        return gdk_gc_set_font(gc, font)
    }

    public function gc_set_function(gc, func) {
        return gdk_gc_set_function(gc, func)
    }

    public function gc_set_fill(gc, fill) {
        return gdk_gc_set_fill(gc, fill)
    }

    public function gc_set_tile(gc, tile) {
        return gdk_gc_set_tile(gc, tile)
    }

    public function gc_set_stipple(gc, stipple) {
        return gdk_gc_set_stipple(gc, stipple)
    }

    public function gc_set_ts_origin(gc, x, y) {
        return gdk_gc_set_ts_origin(gc, x, y)
    }

    public function gc_set_clip_origin(gc, x, y) {
        return gdk_gc_set_clip_origin(gc, x, y)
    }

    public function gc_set_clip_mask(gc, mask) {
        return gdk_gc_set_clip_mask(gc, mask)
    }

    public function gc_set_clip_rectangle(gc, rectangle) {
        return gdk_gc_set_clip_rectangle(gc, rectangle)
    }

    public function gc_set_clip_region(gc, region) {
        return gdk_gc_set_clip_region(gc, region)
    }

    public function gc_set_subwindow(gc, mode) {
        return gdk_gc_set_subwindow(gc, mode)
    }

    public function gc_set_exposures(gc, exposures) {
        return gdk_gc_set_exposures(gc, exposures)
    }

    public function gc_set_line_attributes(gc, line_width, line_style, cap_style, join_style) {
        return gdk_gc_set_line_attributes(gc, line_width, line_style, cap_style, join_style)
    }

    public function gc_set_dashes(gc, dash_offset, dash_list, n) {
        return gdk_gc_set_dashes(gc, dash_offset, dash_list, n)
    }

    public function gc_copy(dst_gc, src_gc) {
        return gdk_gc_copy(dst_gc, src_gc)
    }

    public function pixmap_new(window, width, height, depth) {
        return gdk_pixmap_new(window, width, height, depth)
    }

    public function bitmap_create_from_data(window, data, width, height) {
        return gdk_bitmap_create_from_data(window, data, width, height)
    }

    public function pixmap_create_from_data(window, data, width, height, depth, fg, bg) {
        return gdk_pixmap_create_from_data(window, data, width, height, depth, fg, bg)
    }

    public function pixmap_create_from_xpm(window, var mask, transparent_color, filename) {
        return gdk_pixmap_create_from_xpm(window, mask, transparent_color, filename)
    }

    public function pixmap_colormap_create_from_xpm(window, colormap, var mask, transparent_color, filename) {
        return gdk_pixmap_colormap_create_from_xpm(window, colormap, mask, transparent_color, filename)
    }

    public function pixmap_create_from_xpm_d(window, var mask, transparent_color, data) {
        return gdk_pixmap_create_from_xpm_d(window, mask, transparent_color, data)
    }

    public function pixmap_colormap_create_from_xpm_d(window, colormap, var mask, transparent_color, data) {
        return gdk_pixmap_colormap_create_from_xpm_d(window, colormap, mask, transparent_color, data)
    }

    public function pixmap_ref(pixmap) {
        return gdk_pixmap_ref(pixmap)
    }

    public function pixmap_unref(pixmap) {
        return gdk_pixmap_unref(pixmap)
    }

    public function bitmap_ref(pixmap) {
        return gdk_bitmap_ref(pixmap)
    }

    public function bitmap_unref(pixmap) {
        return gdk_bitmap_unref(pixmap)
    }

    public function image_new_bitmap(visual, data, width, height) {
        return gdk_image_new_bitmap(visual, data, width, height)
    }

    public function image_new(type, visual, width, height) {
        return gdk_image_new(type, visual, width, height)
    }

    public function image_get(window, x, y, width, height) {
        return gdk_image_get(window, x, y, width, height)
    }

    public function image_put_pixel(image, x, y, pixel) {
        return gdk_image_put_pixel(image, x, y, pixel)
    }

    public function image_get_pixel(image, x, y) {
        return gdk_image_get_pixel(image, x, y)
    }

    public function image_destroy(image) {
        return gdk_image_destroy(image)
    }

    public function colormap_new(visual, allocate) {
        return gdk_colormap_new(visual, allocate)
    }

    public function colormap_ref(cmap) {
        return gdk_colormap_ref(cmap)
    }

    public function colormap_unref(cmap) {
        return gdk_colormap_unref(cmap)
    }

    public function colormap_get_system() {
        return gdk_colormap_get_system()
    }

    public function colormap_get_system_size() {
        return gdk_colormap_get_system_size()
    }

    public function colormap_change(colormap, ncolors) {
        return gdk_colormap_change(colormap, ncolors)
    }

    public function colormap_sync(colormap, force) {
        return gdk_colormap_sync(colormap, force)
    }

    public function colormap_alloc_colors(colormap, colors, ncolors, writeable, best_match, success) {
        return gdk_colormap_alloc_colors(colormap, colors, ncolors, writeable, best_match, success)
    }

    public function colormap_alloc_color(colormap, color, writeable, best_match) {
        return gdk_colormap_alloc_color(colormap, color, writeable, best_match)
    }

    public function colormap_free_colors(colormap, colors, ncolors) {
        return gdk_colormap_free_colors(colormap, colors, ncolors)
    }

    public function colormap_get_visual(colormap) {
        return gdk_colormap_get_visual(colormap)
    }

    public function color_copy(color) {
        return gdk_color_copy(color)
    }

    public function color_free(color) {
        return gdk_color_free(color)
    }

    public function color_parse(spec, color) {
        return gdk_color_parse(spec, color)
    }

    public function color_hash(colora, colorb) {
        return gdk_color_hash(colora, colorb)
    }

    public function color_equal(colora, colorb) {
        return gdk_color_equal(colora, colorb)
    }

    public function colors_store(colormap, colors, ncolors) {
        return gdk_colors_store(colormap, colors, ncolors)
    }

    public function colors_alloc(colormap, contiguous, planes, nplanes, pixels, npixels) {
        return gdk_colors_alloc(colormap, contiguous, planes, nplanes, pixels, npixels)
    }

    public function colors_free(colormap, pixels, npixels, planes) {
        return gdk_colors_free(colormap, pixels, npixels, planes)
    }

    public function color_white(colormap, color) {
        return gdk_color_white(colormap, color)
    }

    public function color_black(colormap, color) {
        return gdk_color_black(colormap, color)
    }

    public function color_alloc(colormap, color) {
        return gdk_color_alloc(colormap, color)
    }

    public function color_change(colormap, color) {
        return gdk_color_change(colormap, color)
    }

    public function font_load(font_name) {
        return gdk_font_load(font_name)
    }

    public function fontset_load(fontset_name) {
        return gdk_fontset_load(fontset_name)
    }

    public function font_ref(font) {
        return gdk_font_ref(font)
    }

    public function font_unref(font) {
        return gdk_font_unref(font)
    }

    public function font_id(font) {
        return gdk_font_id(font)
    }

    public function font_equal(fonta, fontb) {
        return gdk_font_equal(fonta, fontb)
    }

    public function string_width(font, string) {
        return gdk_string_width(font, string)
    }

    public function text_width(font, text, text_length) {
        return gdk_text_width(font, text, text_length)
    }

    public function text_width_wc(font, text, text_length) {
        return gdk_text_width_wc(font, text, text_length)
    }

    public function char_width(font, character) {
        return gdk_char_width(font, character)
    }

    public function char_width_wc(font, character) {
        return gdk_char_width_wc(font, character)
    }

    public function string_measure(font, string) {
        return gdk_string_measure(font, string)
    }

    public function text_measure(font, text, text_length) {
        return gdk_text_measure(font, text, text_length)
    }

    public function char_measure(font, character) {
        return gdk_char_measure(font, character)
    }

    public function string_height(font, string) {
        return gdk_string_height(font, string)
    }

    public function text_height(font, text, text_length) {
        return gdk_text_height(font, text, text_length)
    }

    public function char_height(font, character) {
        return gdk_char_height(font, character)
    }

    public function text_extents(font, text, text_length, lbearing, rbearing, width, ascent, descent) {
        return gdk_text_extents(font, text, text_length, lbearing, rbearing, width, ascent, descent)
    }

    public function text_extents_wc(font, text, text_length, lbearing, rbearing, width, ascent, descent) {
        return gdk_text_extents_wc(font, text, text_length, lbearing, rbearing, width, ascent, descent)
    }

    public function string_extents(font, string, lbearing, rbearing, width, ascent, descent) {
        return gdk_string_extents(font, string, lbearing, rbearing, width, ascent, descent)
    }

    public function draw_point(drawable, gc, x, y) {
        return gdk_draw_point(drawable, gc, x, y)
    }

    public function draw_line(drawable, gc, x1, y1, x2, y2) {
        return gdk_draw_line(drawable, gc, x1, y1, x2, y2)
    }

    public function draw_rectangle(drawable, gc, filled, x, y, width, height) {
        return gdk_draw_rectangle(drawable, gc, filled, x, y, width, height)
    }

    public function draw_arc(drawable, gc, filled, x, y, width, height, angle1, angle2) {
        return gdk_draw_arc(drawable, gc, filled, x, y, width, height, angle1, angle2)
    }

    public function draw_polygon(drawable, gc, filled, points, npoints) {
        return gdk_draw_polygon(drawable, gc, filled, points, npoints)
    }

    public function draw_string(drawable, font, gc, x, y, string) {
        return gdk_draw_string(drawable, font, gc, x, y, string)
    }

    public function draw_text(drawable, font, gc, x, y, text, text_length) {
        return gdk_draw_text(drawable, font, gc, x, y, text, text_length)
    }

    public function draw_text_wc(drawable, font, gc, x, y, text, text_length) {
        return gdk_draw_text_wc(drawable, font, gc, x, y, text, text_length)
    }

    public function draw_pixmap(drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height) {
        return gdk_draw_pixmap(drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height)
    }

    public function draw_image(drawable, gc, image, xsrc, ysrc, xdest, ydest, width, height) {
        return gdk_draw_image(drawable, gc, image, xsrc, ysrc, xdest, ydest, width, height)
    }

    public function draw_points(drawable, gc, points, npoints) {
        return gdk_draw_points(drawable, gc, points, npoints)
    }

    public function draw_segments(drawable, gc, segs, nsegs) {
        return gdk_draw_segments(drawable, gc, segs, nsegs)
    }

    public function draw_lines(drawable, gc, points, npoints) {
        return gdk_draw_lines(drawable, gc, points, npoints)
    }

    public function selection_owner_set(owner, selection, time, send_event) {
        return gdk_selection_owner_set(owner, selection, time, send_event)
    }

    public function selection_owner_get(selection) {
        return gdk_selection_owner_get(selection)
    }

    public function selection_convert(requestor, selection, target, time) {
        return gdk_selection_convert(requestor, selection, target, time)
    }

    public function selection_property_get(requestor, data, prop_type, prop_format) {
        return gdk_selection_property_get(requestor, data, prop_type, prop_format)
    }

    public function selection_send_notify(requestor, selection, target, property, time) {
        return gdk_selection_send_notify(requestor, selection, target, property, time)
    }

    public function text_property_to_text_list(encoding, format, text, length, list) {
        return gdk_text_property_to_text_list(encoding, format, text, length, list)
    }

    public function free_text_list(list) {
        return gdk_free_text_list(list)
    }

    public function string_to_compound_text(str, encoding, format, ctext, length) {
        return gdk_string_to_compound_text(str, encoding, format, ctext, length)
    }

    public function free_compound_text(ctext) {
        return gdk_free_compound_text(ctext)
    }

    public function atom_intern(atom_name, only_if_exists) {
        return gdk_atom_intern(atom_name, only_if_exists)
    }

    public function atom_name(atom) {
        return gdk_atom_name(atom)
    }

    public function property_get(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data) {
        return gdk_property_get(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data)
    }

    public function property_change(window, property, type, format, mode, data, nelements) {
        return gdk_property_change(window, property, type, format, mode, data, nelements)
    }

    public function property_delete(window, property) {
        return gdk_property_delete(window, property)
    }

    public function rectangle_intersect(src1, src2, dest) {
        return gdk_rectangle_intersect(src1, src2, dest)
    }

    public function rectangle_union(src1, src2, dest) {
        return gdk_rectangle_union(src1, src2, dest)
    }

    public function input_init() {
        return gdk_input_init()
    }

    public function input_exit() {
        return gdk_input_exit()
    }

    public function input_list_devices() {
        return gdk_input_list_devices()
    }

    public function input_set_extension_events(window, mask, mode) {
        return gdk_input_set_extension_events(window, mask, mode)
    }

    public function input_set_source(deviceid, source) {
        return gdk_input_set_source(deviceid, source)
    }

    public function input_set_mode(deviceid, mode) {
        return gdk_input_set_mode(deviceid, mode)
    }

    public function input_set_axes(deviceid, axes) {
        return gdk_input_set_axes(deviceid, axes)
    }

    public function input_set_key(deviceid, index, keyval, modifiers) {
        return gdk_input_set_key(deviceid, index, keyval, modifiers)
    }

    public function input_window_get_pointer(window, deviceid, x, y, pressure, xtilt, ytilt, mask) {
        return gdk_input_window_get_pointer(window, deviceid, x, y, pressure, xtilt, ytilt, mask)
    }

    public function input_motion_events(window, deviceid, start, stop, nevents_return) {
        return gdk_input_motion_events(window, deviceid, start, stop, nevents_return)
    }

    public function im_ready() {
        return gdk_im_ready()
    }

    public function im_begin(ic, window) {
        return gdk_im_begin(ic, window)
    }

    public function im_end() {
        return gdk_im_end()
    }

    public function im_decide_style(supported_style) {
        return gdk_im_decide_style(supported_style)
    }

    public function im_set_best_style(best_allowed_style) {
        return gdk_im_set_best_style(best_allowed_style)
    }

    public function ic_new(attr, mask) {
        return gdk_ic_new(attr, mask)
    }

    public function ic_destroy(ic) {
        return gdk_ic_destroy(ic)
    }

    public function ic_get_style(ic) {
        return gdk_ic_get_style(ic)
    }

    public function ic_get_events(ic) {
        return gdk_ic_get_events(ic)
    }

    public function ic_attr_new() {
        return gdk_ic_attr_new()
    }

    public function ic_attr_destroy(attr) {
        return gdk_ic_attr_destroy(attr)
    }

    public function ic_set_attr(ic, attr, mask) {
        return gdk_ic_set_attr(ic, attr, mask)
    }

    public function ic_get_attr(ic, attr, mask) {
        return gdk_ic_get_attr(ic, attr, mask)
    }

    public function wcstombs(src) {
        return gdk_wcstombs(src)
    }

    public function mbstowcs(dest, src, dest_max) {
        return gdk_mbstowcs(dest, src, dest_max)
    }

    public function color_context_new(visual, colormap) {
        return gdk_color_context_new(visual, colormap)
    }

    public function color_context_new_mono(visual, colormap) {
        return gdk_color_context_new_mono(visual, colormap)
    }

    public function color_context_free(cc) {
        return gdk_color_context_free(cc)
    }

    public function color_context_get_pixel(cc, red, green, blue, failed) {
        return gdk_color_context_get_pixel(cc, red, green, blue, failed)
    }

    public function color_context_get_pixels(cc, reds, greens, blues, ncolors, colors, nallocated) {
        return gdk_color_context_get_pixels(cc, reds, greens, blues, ncolors, colors, nallocated)
    }

    public function color_context_get_pixels_incremental(cc, reds, greens, blues, ncolors, used, colors, nallocated) {
        return gdk_color_context_get_pixels_incremental(cc, reds, greens, blues, ncolors, used, colors, nallocated)
    }

    public function color_context_query_color(cc, color) {
        return gdk_color_context_query_color(cc, color)
    }

    public function color_context_query_colors(cc, colors, num_colors) {
        return gdk_color_context_query_colors(cc, colors, num_colors)
    }

    public function color_context_add_palette(cc, palette, num_palette) {
        return gdk_color_context_add_palette(cc, palette, num_palette)
    }

    public function color_context_init_dither(cc) {
        return gdk_color_context_init_dither(cc)
    }

    public function color_context_free_dither(cc) {
        return gdk_color_context_free_dither(cc)
    }

    public function color_context_get_pixel_from_palette(cc, red, green, blue, failed) {
        return gdk_color_context_get_pixel_from_palette(cc, red, green, blue, failed)
    }

    public function color_context_get_index_from_palette(cc, red, green, blue, failed) {
        return gdk_color_context_get_index_from_palette(cc, red, green, blue, failed)
    }

    public function region_new() {
        return gdk_region_new()
    }

    public function region_destroy(region) {
        return gdk_region_destroy(region)
    }

    public function region_get_clipbox(region, rectangle) {
        return gdk_region_get_clipbox(region, rectangle)
    }

    public function region_empty(region) {
        return gdk_region_empty(region)
    }

    public function region_equal(region1, region2) {
        return gdk_region_equal(region1, region2)
    }

    public function region_point_in(region, x, y) {
        return gdk_region_point_in(region, x, y)
    }

    public function region_rect_in(region, rect) {
        return gdk_region_rect_in(region, rect)
    }

    public function region_polygon(points, npoints, fill_rule) {
        return gdk_region_polygon(points, npoints, fill_rule)
    }

    public function region_offset(region, dx, dy) {
        return gdk_region_offset(region, dx, dy)
    }

    public function region_shrink(region, dx, dy) {
        return gdk_region_shrink(region, dx, dy)
    }

    public function region_union_with_rect(region, rect) {
        return gdk_region_union_with_rect(region, rect)
    }

    public function regions_intersect(source1, source2) {
        return gdk_regions_intersect(source1, source2)
    }

    public function regions_union(source1, source2) {
        return gdk_regions_union(source1, source2)
    }

    public function regions_subtract(source1, source2) {
        return gdk_regions_subtract(source1, source2)
    }

    public function regions_xor(source1, source2) {
        return gdk_regions_xor(source1, source2)
    }

    public function event_send_clientmessage_toall(event) {
        return gdk_event_send_clientmessage_toall(event)
    }

    public function event_send_client_message(event, xid) {
        return gdk_event_send_client_message(event, xid)
    }

    public function keyval_name(keyval) {
        return gdk_keyval_name(keyval)
    }

    public function keyval_from_name(keyval_name) {
        return gdk_keyval_from_name(keyval_name)
    }

    public function keyval_to_upper(keyval) {
        return gdk_keyval_to_upper(keyval)
    }

    public function keyval_to_lower(keyval) {
        return gdk_keyval_to_lower(keyval)
    }

    public function keyval_is_upper(keyval) {
        return gdk_keyval_is_upper(keyval)
    }

    public function keyval_is_lower(keyval) {
        return gdk_keyval_is_lower(keyval)
    }

    public function threads_enter() {
        return gdk_threads_enter()
    }

    public function threads_leave() {
        return gdk_threads_leave()
    }


    enum ColorInfoFlags {
        COLOR_WRITEABLE = 1 << 0
    }

    enum DebugFlag {
        DEBUG_MISC          = 1 << 0,
        DEBUG_EVENTS        = 1 << 1,
        DEBUG_DND           = 1 << 2,
        DEBUG_COLOR_CONTEXT = 1 << 3,
        DEBUG_XIM           = 1 << 4
    }

    enum RgbDither {
        RGB_DITHER_NONE,
        RGB_DITHER_NORMAL,
        RGB_DITHER_MAX
    }

    enum WindowType {
        WINDOW_ROOT,
        WINDOW_TOPLEVEL,
        WINDOW_CHILD,
        WINDOW_DIALOG,
        WINDOW_TEMP,
        WINDOW_PIXMAP,
        WINDOW_FOREIGN
    }

    enum WindowClass {
        INPUT_OUTPUT,
        INPUT_ONLY
    }

    enum ImageType {
        IMAGE_NORMAL,
        IMAGE_SHARED,
        IMAGE_FASTEST
    }

    enum VisualType {
        VISUAL_STATIC_GRAY,
        VISUAL_GRAYSCALE,
        VISUAL_STATIC_COLOR,
        VISUAL_PSEUDO_COLOR,
        VISUAL_TRUE_COLOR,
        VISUAL_DIRECT_COLOR
    }

    enum FontType {
        FONT_FONT,
        FONT_FONTSET
    }

    enum WindowAttributesType {
        WA_TITLE	  = 1 << 1,
        WA_X	  = 1 << 2,
        WA_Y	  = 1 << 3,
        WA_CURSOR	  = 1 << 4,
        WA_COLORMAP = 1 << 5,
        WA_VISUAL	  = 1 << 6,
        WA_WMCLASS  = 1 << 7,
        WA_NOREDIR  = 1 << 8
    }

    enum WindowHints {
        HINT_POS	      = 1 << 0,
        HINT_MIN_SIZE   = 1 << 1,
        HINT_MAX_SIZE   = 1 << 2,
        HINT_BASE_SIZE  = 1 << 3,
        HINT_ASPECT     = 1 << 4,
        HINT_RESIZE_INC = 1 << 5
    }

    enum Function {
        COPY,
        INVERT,
        XOR,
        CLEAR,
        AND,
        AND_REVERSE,
        AND_INVERT,
        NOOP,
        OR,
        EQUIV,
        OR_REVERSE,
        COPY_INVERT,
        OR_INVERT,
        NAND,
        SET
    }

    enum Fill {
        SOLID,
        TILED,
        STIPPLED,
        OPAQUE_STIPPLED
    }

    enum FillRule {
        EVEN_ODD_RULE,
        WINDING_RULE
    }

    enum LineStyle {
        LINE_SOLID,
        LINE_ON_OFF_DASH,
        LINE_DOUBLE_DASH
    }

    enum CapStyle {
        CAP_NOT_LAST,
        CAP_BUTT,
        CAP_ROUND,
        CAP_PROJECTING
    }

    enum JoinStyle {
        JOIN_MITER,
        JOIN_ROUND,
        JOIN_BEVEL
    }

    enum CursorType {
        NUM_GLYPHS = 154,
        X_CURSOR = 0,
        ARROW = 2,
        BASED_ARROW_DOWN = 4,
        BASED_ARROW_UP = 6,
        BOAT = 8,
        BOGOSITY = 10,
        BOTTOM_LEFT_CORNER = 12,
        BOTTOM_RIGHT_CORNER = 14,
        BOTTOM_SIDE = 16,
        BOTTOM_TEE = 18,
        BOX_SPIRAL = 20,
        CENTER_PTR = 22,
        CIRCLE = 24,
        CLOCK = 26,
        COFFEE_MUG = 28,
        CROSS = 30,
        CROSS_REVERSE = 32,
        CROSSHAIR = 34,
        DIAMOND_CROSS = 36,
        DOT = 38,
        DOTBOX = 40,
        DOUBLE_ARROW = 42,
        DRAFT_LARGE = 44,
        DRAFT_SMALL = 46,
        DRAPED_BOX = 48,
        EXCHANGE = 50,
        FLEUR = 52,
        GOBBLER = 54,
        GUMBY = 56,
        HAND1 = 58,
        HAND2 = 60,
        HEART = 62,
        ICON = 64,
        IRON_CROSS = 66,
        LEFT_PTR = 68,
        LEFT_SIDE = 70,
        LEFT_TEE = 72,
        LEFTBUTTON = 74,
        LL_ANGLE = 76,
        LR_ANGLE = 78,
        MAN = 80,
        MIDDLEBUTTON = 82,
        MOUSE = 84,
        PENCIL = 86,
        PIRATE = 88,
        PLUS = 90,
        QUESTION_ARROW = 92,
        RIGHT_PTR = 94,
        RIGHT_SIDE = 96,
        RIGHT_TEE = 98,
        RIGHTBUTTON = 100,
        RTL_LOGO = 102,
        SAILBOAT = 104,
        SB_DOWN_ARROW = 106,
        SB_H_DOUBLE_ARROW = 108,
        SB_LEFT_ARROW = 110,
        SB_RIGHT_ARROW = 112,
        SB_UP_ARROW = 114,
        SB_V_DOUBLE_ARROW = 116,
        SHUTTLE = 118,
        SIZING = 120,
        SPIDER = 122,
        SPRAYCAN = 124,
        STAR = 126,
        TARGET = 128,
        TCROSS = 130,
        TOP_LEFT_ARROW = 132,
        TOP_LEFT_CORNER = 134,
        TOP_RIGHT_CORNER = 136,
        TOP_SIDE = 138,
        TOP_TEE = 140,
        TREK = 142,
        UL_ANGLE = 144,
        UMBRELLA = 146,
        UR_ANGLE = 148,
        WATCH = 150,
        XTERM = 152,
        LAST_CURSOR,
        CURSOR_IS_PIXMAP = -1
    }

    enum FilterReturn {
        FILTER_CONTINUE,	  /* Event not handled, continue processesing */
        FILTER_TRANSLATE,	  /* Translated event stored */
        FILTER_REMOVE	  /* Terminate processing, removing event */
    }

    enum VisibilityState {
        VISIBILITY_UNOBSCURED,
        VISIBILITY_PARTIAL,
        VISIBILITY_FULLY_OBSCURED
    }

    enum EventType {
        NOTHING		= -1,
        DELETE		= 0,
        DESTROY		= 1,
        EXPOSE		= 2,
        MOTION_NOTIFY	= 3,
        BUTTON_PRESS	= 4,
        TWOBUTTON_PRESS	= 5,
        THREEBUTTON_PRESS	= 6,
        BUTTON_RELEASE	= 7,
        KEY_PRESS		= 8,
        KEY_RELEASE	= 9,
        ENTER_NOTIFY	= 10,
        LEAVE_NOTIFY	= 11,
        FOCUS_CHANGE	= 12,
        CONFIGURE		= 13,
        MAP		= 14,
        UNMAP		= 15,
        PROPERTY_NOTIFY	= 16,
        SELECTION_CLEAR	= 17,
        SELECTION_REQUEST = 18,
        SELECTION_NOTIFY	= 19,
        PROXIMITY_IN	= 20,
        PROXIMITY_OUT	= 21,
        DRAG_ENTER        = 22,
        DRAG_LEAVE        = 23,
        DRAG_MOTION       = 24,
        DRAG_STATUS       = 25,
        DROP_START        = 26,
        DROP_FINISHED     = 27,
        CLIENT_EVENT	= 28,
        VISIBILITY_NOTIFY = 29,
        NO_EXPOSE		= 30
    }

    enum EventMask {
        EXPOSURE_MASK		= 1 << 1,
        POINTER_MOTION_MASK	= 1 << 2,
        POINTER_MOTION_HINT_MASK	= 1 << 3,
        BUTTON_MOTION_MASK	= 1 << 4,
        BUTTON1_MOTION_MASK	= 1 << 5,
        BUTTON2_MOTION_MASK	= 1 << 6,
        BUTTON3_MOTION_MASK	= 1 << 7,
        BUTTON_PRESS_MASK		= 1 << 8,
        BUTTON_RELEASE_MASK	= 1 << 9,
        KEY_PRESS_MASK		= 1 << 10,
        KEY_RELEASE_MASK		= 1 << 11,
        ENTER_NOTIFY_MASK		= 1 << 12,
        LEAVE_NOTIFY_MASK		= 1 << 13,
        FOCUS_CHANGE_MASK		= 1 << 14,
        STRUCTURE_MASK		= 1 << 15,
        PROPERTY_CHANGE_MASK	= 1 << 16,
        VISIBILITY_NOTIFY_MASK	= 1 << 17,
        PROXIMITY_IN_MASK		= 1 << 18,
        PROXIMITY_OUT_MASK	= 1 << 19,
        SUBSTRUCTURE_MASK		= 1 << 20,
        ALL_EVENTS_MASK		= 0x0FFFFF
    }

    enum NotifyType {
        NOTIFY_ANCESTOR		= 0,
        NOTIFY_VIRTUAL		= 1,
        NOTIFY_INFERIOR		= 2,
        NOTIFY_NONLINEAR		= 3,
        NOTIFY_NONLINEAR_VIRTUAL	= 4,
        NOTIFY_UNKNOWN		= 5
    }

    enum CrossingMode {
        CROSSING_NORMAL,
        CROSSING_GRAB,
        CROSSING_UNGRAB
    }

    enum ModifierType {
        SHIFT_MASK    = 1 << 0,
        LOCK_MASK	    = 1 << 1,
        CONTROL_MASK  = 1 << 2,
        MOD1_MASK	    = 1 << 3,
        MOD2_MASK	    = 1 << 4,
        MOD3_MASK	    = 1 << 5,
        MOD4_MASK	    = 1 << 6,
        MOD5_MASK	    = 1 << 7,
        BUTTON1_MASK  = 1 << 8,
        BUTTON2_MASK  = 1 << 9,
        BUTTON3_MASK  = 1 << 10,
        BUTTON4_MASK  = 1 << 11,
        BUTTON5_MASK  = 1 << 12,
        RELEASE_MASK  = 1 << 13,
        MODIFIER_MASK = 0x3fff
    }

    enum SubwindowMode {
        CLIP_BY_CHILDREN	= 0,
        INCLUDE_INFERIORS = 1
    }

    enum InputCondition {
        INPUT_READ       = 1 << 0,
        INPUT_WRITE      = 1 << 1,
        INPUT_EXCEPTION  = 1 << 2
    }

    enum Status {
        OK	  = 0,
        ERROR	  = -1,
        ERROR_PARAM = -2,
        ERROR_FILE  = -3,
        ERROR_MEM	  = -4
    }

    enum ByteOrder {
        LSB_FIRST,
        MSB_FIRST
    }

    enum GCValuesMask {
        GC_FOREGROUND    = 1 << 0,
        GC_BACKGROUND    = 1 << 1,
        GC_FONT	       = 1 << 2,
        GC_FUNCTION      = 1 << 3,
        GC_FILL	       = 1 << 4,
        GC_TILE	       = 1 << 5,
        GC_STIPPLE       = 1 << 6,
        GC_CLIP_MASK     = 1 << 7,
        GC_SUBWINDOW     = 1 << 8,
        GC_TS_X_ORIGIN   = 1 << 9,
        GC_TS_Y_ORIGIN   = 1 << 10,
        GC_CLIP_X_ORIGIN = 1 << 11,
        GC_CLIP_Y_ORIGIN = 1 << 12,
        GC_EXPOSURES     = 1 << 13,
        GC_LINE_WIDTH    = 1 << 14,
        GC_LINE_STYLE    = 1 << 15,
        GC_CAP_STYLE     = 1 << 16,
        GC_JOIN_STYLE    = 1 << 17
    }

    enum Selection {
        SELECTION_PRIMARY = 1,
        SELECTION_SECONDARY = 2
    }

    enum PropertyState {
        PROPERTY_NEW_VALUE,
        PROPERTY_DELETE
    }

    enum PropMode {
        PROP_MODE_REPLACE,
        PROP_MODE_PREPEND,
        PROP_MODE_APPEND
    }

    enum InputSource {
        SOURCE_MOUSE,
        SOURCE_PEN,
        SOURCE_ERASER,
        SOURCE_CURSOR
    }

    enum InputMode {
        MODE_DISABLED,
        MODE_SCREEN,
        MODE_WINDOW
    }

    enum AxisUse {
        AXIS_IGNORE,
        AXIS_X,
        AXIS_Y,
        AXIS_PRESSURE,
        AXIS_XTILT,
        AXIS_YTILT,
        AXIS_LAST
    }

    enum Target {
        TARGET_BITMAP = 5,
        TARGET_COLORMAP = 7,
        TARGET_DRAWABLE = 17,
        TARGET_PIXMAP = 20,
        TARGET_STRING = 31
    }

    enum SelectionType {
        SELECTION_TYPE_ATOM = 4,
        SELECTION_TYPE_BITMAP = 5,
        SELECTION_TYPE_COLORMAP = 7,
        SELECTION_TYPE_DRAWABLE = 17,
        SELECTION_TYPE_INTEGER = 19,
        SELECTION_TYPE_PIXMAP = 20,
        SELECTION_TYPE_WINDOW = 33,
        SELECTION_TYPE_STRING = 31
    }

    enum ExtensionMode {
        EXTENSION_EVENTS_NONE,
        EXTENSION_EVENTS_ALL,
        EXTENSION_EVENTS_CURSOR
    }

    enum IMStyle {
        IM_PREEDIT_AREA	   = 0x0001,
        IM_PREEDIT_CALLBACKS = 0x0002,
        IM_PREEDIT_POSITION  = 0x0004,
        IM_PREEDIT_NOTHING   = 0x0008,
        IM_PREEDIT_NONE	   = 0x0010,
        IM_PREEDIT_MASK      = 0x001f,
        IM_STATUS_AREA	   = 0x0100,
        IM_STATUS_CALLBACKS  = 0x0200,
        IM_STATUS_NOTHING	   = 0x0400,
        IM_STATUS_NONE	   = 0x0800,
        IM_STATUS_MASK	   = 0x0f00
    }

    enum ICAttributesType {
        IC_STYLE			= 1 << 0,
        IC_CLIENT_WINDOW		= 1 << 1,
        IC_FOCUS_WINDOW		= 1 << 2,
        IC_FILTER_EVENTS		= 1 << 3,
        IC_SPOT_LOCATION		= 1 << 4,
        IC_LINE_SPACING		= 1 << 5,
        IC_CURSOR			= 1 << 6,
        IC_PREEDIT_FONTSET	= 1 << 10,
        IC_PREEDIT_AREA		= 1 << 11,
        IC_PREEDIT_AREA_NEEDED	= 1 << 12,
        IC_PREEDIT_FOREGROUND	= 1 << 13,
        IC_PREEDIT_BACKGROUND	= 1 << 14,
        IC_PREEDIT_PIXMAP		= 1 << 15,
        IC_PREEDIT_COLORMAP	= 1 << 16,
        IC_STATUS_FONTSET		= 1 << 21,
        IC_STATUS_AREA		= 1 << 22,
        IC_STATUS_AREA_NEEDED	= 1 << 23,
        IC_STATUS_FOREGROUND	= 1 << 24,
        IC_STATUS_BACKGROUND	= 1 << 25,
        IC_STATUS_PIXMAP		= 1 << 26,
        IC_STATUS_COLORMAP	= 1 << 27,
        IC_ALL_REQ		= IC_STYLE |
        IC_CLIENT_WINDOW,
        IC_PREEDIT_AREA_REQ	= IC_PREEDIT_AREA |
        IC_PREEDIT_FONTSET,
        IC_PREEDIT_POSITION_REQ	= IC_PREEDIT_AREA | IC_SPOT_LOCATION |
        IC_PREEDIT_FONTSET,
        IC_STATUS_AREA_REQ	= IC_STATUS_AREA |
        IC_STATUS_FONTSET
    }

    enum WMDecoration {
        DECOR_ALL		= 1 << 0,
        DECOR_BORDER	= 1 << 1,
        DECOR_RESIZEH	= 1 << 2,
        DECOR_TITLE	= 1 << 3,
        DECOR_MENU	= 1 << 4,
        DECOR_MINIMIZE	= 1 << 5,
        DECOR_MAXIMIZE	= 1 << 6
    }

    enum WMFunction {
        FUNC_ALL		= 1 << 0,
        FUNC_RESIZE	= 1 << 1,
        FUNC_MOVE		= 1 << 2,
        FUNC_MINIMIZE	= 1 << 3,
        FUNC_MAXIMIZE	= 1 << 4,
        FUNC_CLOSE	= 1 << 5
    }

    enum ColorContextMode {
        CC_MODE_UNDEFINED,
        CC_MODE_BW,
        CC_MODE_STD_CMAP,
        CC_MODE_TRUE,
        CC_MODE_MY_GRAY,
        CC_MODE_PALETTE
    }

    enum OverlapType {
        OVERLAP_RECTANGLE_IN,
        OVERLAP_RECTANGLE_OUT,
        OVERLAP_RECTANGLE_PART
    }

    enum DragAction {
        ACTION_DEFAULT = 1 << 0,
        ACTION_COPY    = 1 << 1,
        ACTION_MOVE    = 1 << 2,
        ACTION_LINK    = 1 << 3,
        ACTION_PRIVATE = 1 << 4,
        ACTION_ASK     = 1 << 5
    }

    enum DragProtocol {
        DRAG_PROTO_MOTIF,
        DRAG_PROTO_XDND,
        DRAG_PROTO_ROOTWIN,	/* A root window with nobody claiming
        * drags */
        DRAG_PROTO_NONE,		/* Not a valid drag window */
        DRAG_PROTO_WIN32_DROPFILES,
        DRAG_PROTO_OLE2,
        DRAG_PROTO_LOCAL
    }

    public class Color (public red = 0, public green = 0, public blue = 0) {
        public var pixel = 0

        public function fill (addr) {
            pixel = peek (addr, 4)
            red = peek (addr + 4, 2)
            green = peek (addr + 6, 2)
            blue = peek (addr + 8, 2)
        }

        var memory = malloc (12)

        public function toNative {
            poke (memory, pixel, 4)
            poke (memory + 4, red, 2)
            poke (memory + 6, green, 2)
            poke (memory + 8, blue, 2)
            return memory
        }

        function setNative (addr) {
            fill (addr)
        }

        public operator sizeof {
            return 12                   // 16 bytes of data in each native color
        }
    }

    public class Font {
    public:
        var type = FONT_FONT
        var ascent = 0
        var descent = 0

        function fill (addr) {
            var t = peek (addr,4)
            try {
                type = cast<FontType>(t)
            } catch (e) {
            }
            ascent = peek (addr+4, 4)
            descent = peek (addr+8, 4)
        }

        function setNative (addr) {
            fill (addr)
        }

        var memory = malloc (16)

        function toNative {
            poke (memory, type, 4)
            poke (memory + 4, ascent, 4)
            poke (memory + 8, descent, 4)
            return memory
        }

        operator sizeof {
            return 16
        }
    }

   public class Rectangle (public x = 0, public y = 0, public width = 0, public height = 0) {
   public:
       function setNative (addr) {
           x = peek (addr, 2)
           y = peek (addr + 2, 2)
           width = peek (addr + 4, 2)
           height = peek (addr + 6, 2)
       }

       var memory = malloc (8)

       function toNative {
           poke (memory, x, 2)
           poke (memory + 2, y, 2)
           poke (memory + 4, width, 2)
           poke (memory + 6, height, 2)
           return memory
       }
   }

    

//
// event classes
//

public class Event {
public:
  var type = NOTHING
  var window = null
  var send_event = 0
}

public class EventAny extends Event 
{
}

public class EventExpose extends Event 
{
public:
  var x = 0
  var y = 0
  var width = 0
  var height = 0
  var count = 0 /* If non-zero, how many more events follow. */
}

public class EventNoExpose extends Event 
{
  /* XXX: does anyone need the X major_code or minor_code fields? */
}

public class EventVisibility extends Event 
{
public:
  var state = VISIBILITY_UNOBSCURED 
}

public class EventMotion extends Event 
{
public:
  var time = 0
  var x= 0.0
  var y= 0.0
  var pressure = 0.0
  var xtilt = 0.0
  var ytilt = 0.0
  var state = 0
  var is_hint = 0
  var source = SOURCE_MOUSE
  var deviceid = 0
  var x_root = 0.0, y_root = 0.0
}

public class EventButton extends Event
{
public:
  var time = 0
  var x= 0.0
  var y= 0.0
  var pressure = 0.0
  var xtilt = 0.0
  var ytilt = 0.0
  var state = 0
  var button = 0
  var source = SOURCE_MOUSE
  var deviceid = 0
  var x_root = 0.0, y_root = 0.0
}

public class EventKey extends Event 
{
public:
  var time = 0
  var state = 0
  var keyval = 0
  var length = 0
  var string = ""
}

public class EventCrossing extends Event 
{
public:
  var subwindow = null
  var time = 0
  var x = 0.0
  var y = 0.0
  var x_root = 0.0
  var y_root = 0.0
  var mode = CROSSING_NORMAL
  var detail = NOTIFY_ANCESTOR
  var focus = false
  var state = 0
}

public class EventFocus extends Event 
{
public:
  var in = 0
}
public class EventConfigure extends Event 
{
public:
  var x = 0, y = 0
  var width = 0
  var height = 0
}

public class EventProperty extends Event 
{
public:
  var atom = 0
  var time = 0
  var state = 0
}

public class EventSelection extends Event 
{
public:
  var selection = 0
  var target = 0
  var property = 0
  var requestor = 0
  var time = 0
}

/* This event type will be used pretty rarely. It only is important
   for XInput aware programs that are drawing their own cursor */

public class EventProximity extends Event 
{
public:
  var time = 0
  var source = SOURCE_MOUSE
  var deviceid = 0
}

public class EventClient extends Event 
{
public:
  var message_type = 0
  var data_format = 0
  var data = []
}

/* Event types for DND */

public class EventDND extends Event {
public:
  var context = null

  var time = 0
  var x_root = 0, y_root = 0
}




}
