/*
 * dtkfields.cc
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc. 2003
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.3
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */


//
// generated by makefields.aikido
//


AIKIDO_NATIVE (dtk_GtkAccelLabel_get_queue_id) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    return (INTEGER)p->queue_id ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_set_queue_id) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    p->queue_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_get_accel_padding) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    return (INTEGER)p->accel_padding ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_set_accel_padding) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    p->accel_padding = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_get_accel_widget) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    return (INTEGER)p->accel_widget ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_set_accel_widget) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    p->accel_widget = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_get_accel_string) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    return p->accel_string ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_set_accel_string) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    p->accel_string = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_get_accel_string_width) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    return (INTEGER)p->accel_string_width ;
}

AIKIDO_NATIVE (dtk_GtkAccelLabel_set_accel_string_width) {
    GtkAccelLabel *p = (GtkAccelLabel*)paras[1].integer ;
    p->accel_string_width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_lower) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->lower ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_lower) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->lower = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_upper) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->upper ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_upper) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->upper = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_value) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->value ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_value) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->value = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_step_increment) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->step_increment ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_step_increment) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->step_increment = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_page_increment) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->page_increment ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_page_increment) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->page_increment = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_get_page_size) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    return (double)p->page_size ;
}

AIKIDO_NATIVE (dtk_GtkAdjustment_set_page_size) {
    GtkAdjustment *p = (GtkAdjustment*)paras[1].integer ;
    p->page_size = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_get_xalign) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    return (double)p->xalign ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_set_xalign) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    p->xalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_get_yalign) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    return (double)p->yalign ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_set_yalign) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    p->yalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_get_xscale) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    return (double)p->xscale ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_set_xscale) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    p->xscale = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_get_yscale) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    return (double)p->yscale ;
}

AIKIDO_NATIVE (dtk_GtkAlignment_set_yscale) {
    GtkAlignment *p = (GtkAlignment*)paras[1].integer ;
    p->yscale = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkArrow_get_arrow_type) {
    GtkArrow *p = (GtkArrow*)paras[1].integer ;
    return (INTEGER)p->arrow_type ;
}

AIKIDO_NATIVE (dtk_GtkArrow_set_arrow_type) {
    GtkArrow *p = (GtkArrow*)paras[1].integer ;
    p->arrow_type = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkArrow_get_shadow_type) {
    GtkArrow *p = (GtkArrow*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkArrow_set_shadow_type) {
    GtkArrow *p = (GtkArrow*)paras[1].integer ;
    p->shadow_type = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_get_xalign) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    return (double)p->xalign ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_set_xalign) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    p->xalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_get_yalign) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    return (double)p->yalign ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_set_yalign) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    p->yalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_get_ratio) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    return (double)p->ratio ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_set_ratio) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    p->ratio = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_get_obey_child) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    return (INTEGER)p->obey_child ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_set_obey_child) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    p->obey_child = (gboolean)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_get_center_allocation) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    return (INTEGER)&p->center_allocation ;
}

AIKIDO_NATIVE (dtk_GtkAspectFrame_set_center_allocation) {
    GtkAspectFrame *p = (GtkAspectFrame*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_spacing) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->spacing ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_spacing) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->spacing = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_child_min_width) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->child_min_width ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_child_min_width) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->child_min_width = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_child_min_height) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->child_min_height ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_child_min_height) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->child_min_height = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_child_ipad_x) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->child_ipad_x ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_child_ipad_x) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->child_ipad_x = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_child_ipad_y) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->child_ipad_y ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_child_ipad_y) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->child_ipad_y = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_get_layout_style) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    return (INTEGER)p->layout_style ;
}

AIKIDO_NATIVE (dtk_GtkButtonBox_set_layout_style) {
    GtkButtonBox *p = (GtkButtonBox*)paras[1].integer ;
    p->layout_style = (GtkButtonBoxStyle)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkBin_get_child) {
    GtkBin *p = (GtkBin*)paras[1].integer ;
    return (INTEGER)p->child ;
}

AIKIDO_NATIVE (dtk_GtkBin_set_child) {
    GtkBin *p = (GtkBin*)paras[1].integer ;
    p->child = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkBox_get_children) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkBox_set_children) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkBox_get_spacing) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    return (INTEGER)p->spacing ;
}

AIKIDO_NATIVE (dtk_GtkBox_set_spacing) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    p->spacing = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkBox_get_homogeneous) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    return (INTEGER)p->homogeneous ;
}

AIKIDO_NATIVE (dtk_GtkBox_set_homogeneous) {
    GtkBox *p = (GtkBox*)paras[1].integer ;
    p->homogeneous = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButton_get_in_button) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    return (INTEGER)p->in_button ;
}

AIKIDO_NATIVE (dtk_GtkButton_set_in_button) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    p->in_button = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButton_get_button_down) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    return (INTEGER)p->button_down ;
}

AIKIDO_NATIVE (dtk_GtkButton_set_button_down) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    p->button_down = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkButton_get_relief) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    return (INTEGER)p->relief ;
}

AIKIDO_NATIVE (dtk_GtkButton_set_relief) {
    GtkButton *p = (GtkButton*)paras[1].integer ;
    p->relief = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_header_style) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->header_style ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_header_style) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->header_style = (GtkStyle*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_label_style) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->label_style ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_label_style) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->label_style = (GtkStyle*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_month) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->month ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_month) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->month = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_year) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->year ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_year) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->year = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_selected_day) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->selected_day ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_selected_day) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->selected_day = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_num_marked_dates) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->num_marked_dates ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_num_marked_dates) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->num_marked_dates = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_display_flags) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->display_flags ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_display_flags) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->display_flags = (GtkCalendarDisplayOptions)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_gc) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->gc ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_gc) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_xor_gc) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->xor_gc ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_xor_gc) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->xor_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_focus_row) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->focus_row ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_focus_row) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->focus_row = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_focus_col) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->focus_col ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_focus_col) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->focus_col = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_highlight_row) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->highlight_row ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_highlight_row) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->highlight_row = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_highlight_col) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->highlight_col ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_highlight_col) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->highlight_col = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_get_private_data) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    return (INTEGER)p->private_data ;
}

AIKIDO_NATIVE (dtk_GtkCalendar_set_private_data) {
    GtkCalendar *p = (GtkCalendar*)paras[1].integer ;
    p->private_data = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCheckMenuItem_get_active) {
    GtkCheckMenuItem *p = (GtkCheckMenuItem*)paras[1].integer ;
    return (INTEGER)p->active ;
}

AIKIDO_NATIVE (dtk_GtkCheckMenuItem_set_active) {
    GtkCheckMenuItem *p = (GtkCheckMenuItem*)paras[1].integer ;
    p->active = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCheckMenuItem_get_always_show_toggle) {
    GtkCheckMenuItem *p = (GtkCheckMenuItem*)paras[1].integer ;
    return (INTEGER)p->always_show_toggle ;
}

AIKIDO_NATIVE (dtk_GtkCheckMenuItem_set_always_show_toggle) {
    GtkCheckMenuItem *p = (GtkCheckMenuItem*)paras[1].integer ;
    p->always_show_toggle = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCListCellInfo_get_column) {
    GtkCListCellInfo *p = (GtkCListCellInfo*)paras[1].integer ;
    return (INTEGER)p->column ;
}

AIKIDO_NATIVE (dtk_GtkCListCellInfo_set_column) {
    GtkCListCellInfo *p = (GtkCListCellInfo*)paras[1].integer ;
    p->column = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_flags) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->flags ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_flags) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->flags = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_row_mem_chunk) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->row_mem_chunk ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_row_mem_chunk) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->row_mem_chunk = (GMemChunk*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_cell_mem_chunk) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->cell_mem_chunk ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_cell_mem_chunk) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->cell_mem_chunk = (GMemChunk*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_freeze_count) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->freeze_count ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_freeze_count) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->freeze_count = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_internal_allocation) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)&p->internal_allocation ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_internal_allocation) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_rows) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->rows ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_rows) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->rows = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_row_center_offset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->row_center_offset ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_row_center_offset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->row_center_offset = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_row_height) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->row_height ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_row_height) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->row_height = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_row_list) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->row_list ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_row_list) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->row_list = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_row_list_end) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->row_list_end ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_row_list_end) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->row_list_end = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_columns) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->columns ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_columns) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->columns = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_column_title_area) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)&p->column_title_area ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_column_title_area) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_title_window) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->title_window ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_title_window) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->title_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_column) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->column ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_column) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->column = (GtkCListColumn*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_clist_window) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->clist_window ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_clist_window) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->clist_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_clist_window_width) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->clist_window_width ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_clist_window_width) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->clist_window_width = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_clist_window_height) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->clist_window_height ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_clist_window_height) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->clist_window_height = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_hoffset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->hoffset ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_hoffset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->hoffset = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_voffset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->voffset ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_voffset) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->voffset = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_shadow_type) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_shadow_type) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->shadow_type = (GtkShadowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_selection_mode) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->selection_mode ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_selection_mode) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->selection_mode = (GtkSelectionMode)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_selection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->selection ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_selection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->selection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_selection_end) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->selection_end ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_selection_end) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->selection_end = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_undo_selection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->undo_selection ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_undo_selection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->undo_selection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_undo_unselection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->undo_unselection ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_undo_unselection) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->undo_unselection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_undo_anchor) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->undo_anchor ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_undo_anchor) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->undo_anchor = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_drag_button) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->drag_button ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_drag_button) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->drag_button = (guint8)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_click_cell) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)&p->click_cell ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_click_cell) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_hadjustment) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->hadjustment ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_hadjustment) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->hadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_vadjustment) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->vadjustment ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_vadjustment) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->vadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_xor_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->xor_gc ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_xor_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->xor_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_fg_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->fg_gc ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_fg_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->fg_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_bg_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->bg_gc ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_bg_gc) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->bg_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_cursor_drag) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->cursor_drag ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_cursor_drag) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->cursor_drag = (GdkCursor*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_x_drag) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->x_drag ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_x_drag) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->x_drag = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_focus_row) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->focus_row ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_focus_row) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->focus_row = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_anchor) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->anchor ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_anchor) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->anchor = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_anchor_state) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->anchor_state ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_anchor_state) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->anchor_state = (GtkStateType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_drag_pos) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->drag_pos ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_drag_pos) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->drag_pos = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_htimer) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->htimer ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_htimer) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->htimer = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_vtimer) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->vtimer ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_vtimer) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->vtimer = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_sort_type) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->sort_type ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_sort_type) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->sort_type = (GtkSortType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_compare) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->compare ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_compare) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->compare = (GtkCListCompareFunc)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCList_get_sort_column) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    return (INTEGER)p->sort_column ;
}

AIKIDO_NATIVE (dtk_GtkCList_set_sort_column) {
    GtkCList *p = (GtkCList*)paras[1].integer ;
    p->sort_column = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_wheel_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->wheel_area ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_wheel_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->wheel_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_value_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->value_area ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_value_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->value_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_sample_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->sample_area ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_sample_area) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->sample_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_sample_area_eb) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->sample_area_eb ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_sample_area_eb) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->sample_area_eb = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_opacity_label) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->opacity_label ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_opacity_label) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->opacity_label = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_wheel_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->wheel_gc ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_wheel_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->wheel_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_value_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->value_gc ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_value_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->value_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_sample_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->sample_gc ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_sample_gc) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->sample_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_policy) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->policy ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_policy) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->policy = (GtkUpdateType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_use_opacity) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->use_opacity ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_use_opacity) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->use_opacity = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_timer_active) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->timer_active ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_timer_active) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->timer_active = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_timer_tag) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->timer_tag ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_timer_tag) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->timer_tag = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_wheel_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->wheel_buf ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_wheel_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->wheel_buf = (guchar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_value_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->value_buf ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_value_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->value_buf = (guchar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_get_sample_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    return (INTEGER)p->sample_buf ;
}

AIKIDO_NATIVE (dtk_GtkColorSelection_set_sample_buf) {
    GtkColorSelection *p = (GtkColorSelection*)paras[1].integer ;
    p->sample_buf = (guchar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_colorsel) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->colorsel ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_colorsel) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->colorsel = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_main_vbox) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->main_vbox ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_main_vbox) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->main_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_ok_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->ok_button ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_ok_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->ok_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_reset_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->reset_button ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_reset_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->reset_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_cancel_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->cancel_button ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_cancel_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->cancel_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_get_help_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->help_button ;
}

AIKIDO_NATIVE (dtk_GtkColorSelectionDialog_set_help_button) {
    GtkColorSelectionDialog *p = (GtkColorSelectionDialog*)paras[1].integer ;
    p->help_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_entry) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->entry ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_entry) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_button) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_button) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_popup) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->popup ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_popup) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->popup = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_popwin) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->popwin ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_popwin) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->popwin = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_list) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->list ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_list) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->list = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_entry_change_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->entry_change_id ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_entry_change_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->entry_change_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_list_change_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->list_change_id ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_list_change_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->list_change_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_value_in_list) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->value_in_list ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_value_in_list) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->value_in_list = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_ok_if_empty) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->ok_if_empty ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_ok_if_empty) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->ok_if_empty = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_case_sensitive) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->case_sensitive ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_case_sensitive) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->case_sensitive = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_use_arrows) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->use_arrows ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_use_arrows) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->use_arrows = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_use_arrows_always) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->use_arrows_always ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_use_arrows_always) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->use_arrows_always = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_current_button) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->current_button ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_current_button) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->current_button = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCombo_get_activate_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    return (INTEGER)p->activate_id ;
}

AIKIDO_NATIVE (dtk_GtkCombo_set_activate_id) {
    GtkCombo *p = (GtkCombo*)paras[1].integer ;
    p->activate_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_focus_child) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->focus_child ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_focus_child) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->focus_child = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_border_width) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->border_width ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_border_width) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->border_width = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_need_resize) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->need_resize ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_need_resize) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->need_resize = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_resize_mode) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->resize_mode ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_resize_mode) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->resize_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_reallocate_redraws) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->reallocate_redraws ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_reallocate_redraws) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->reallocate_redraws = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkContainer_get_resize_widgets) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    return (INTEGER)p->resize_widgets ;
}

AIKIDO_NATIVE (dtk_GtkContainer_set_resize_widgets) {
    GtkContainer *p = (GtkContainer*)paras[1].integer ;
    p->resize_widgets = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_lines_gc) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->lines_gc ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_lines_gc) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->lines_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_tree_indent) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->tree_indent ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_tree_indent) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->tree_indent = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_tree_spacing) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->tree_spacing ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_tree_spacing) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->tree_spacing = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_tree_column) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->tree_column ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_tree_column) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->tree_column = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_line_style) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->line_style ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_line_style) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->line_style = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_expander_style) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->expander_style ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_expander_style) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->expander_style = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_show_stub) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->show_stub ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_show_stub) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->show_stub = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCTree_get_drag_compare) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    return (INTEGER)p->drag_compare ;
}

AIKIDO_NATIVE (dtk_GtkCTree_set_drag_compare) {
    GtkCTree *p = (GtkCTree*)paras[1].integer ;
    p->drag_compare = (GtkCTreeCompareDragFunc)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_cursor_type) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->cursor_type ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_cursor_type) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->cursor_type = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_min_x) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (double)p->min_x ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_min_x) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->min_x = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_max_x) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (double)p->max_x ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_max_x) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->max_x = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_min_y) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (double)p->min_y ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_min_y) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->min_y = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_max_y) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (double)p->max_y ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_max_y) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->max_y = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_pixmap) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->pixmap ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_pixmap) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->pixmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_curve_type) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->curve_type ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_curve_type) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->curve_type = (GtkCurveType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_last) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->last ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_last) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->last = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_num_points) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->num_points ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_num_points) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->num_points = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkCurve_get_point) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    return (INTEGER)p->point ;
}

AIKIDO_NATIVE (dtk_GtkCurve_set_point) {
    GtkCurve *p = (GtkCurve*)paras[1].integer ;
    p->point = (GdkPoint*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkDialog_get_vbox) {
    GtkDialog *p = (GtkDialog*)paras[1].integer ;
    return (INTEGER)p->vbox ;
}

AIKIDO_NATIVE (dtk_GtkDialog_set_vbox) {
    GtkDialog *p = (GtkDialog*)paras[1].integer ;
    p->vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkDialog_get_action_area) {
    GtkDialog *p = (GtkDialog*)paras[1].integer ;
    return (INTEGER)p->action_area ;
}

AIKIDO_NATIVE (dtk_GtkDialog_set_action_area) {
    GtkDialog *p = (GtkDialog*)paras[1].integer ;
    p->action_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkDrawingArea_get_draw_data) {
    GtkDrawingArea *p = (GtkDrawingArea*)paras[1].integer ;
    return (INTEGER)p->draw_data ;
}

AIKIDO_NATIVE (dtk_GtkDrawingArea_set_draw_data) {
    GtkDrawingArea *p = (GtkDrawingArea*)paras[1].integer ;
    p->draw_data = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_current_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->current_pos ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_current_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->current_pos = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_selection_start_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->selection_start_pos ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_selection_start_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->selection_start_pos = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_selection_end_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->selection_end_pos ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_selection_end_pos) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->selection_end_pos = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_has_selection) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->has_selection ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_has_selection) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->has_selection = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_editable) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->editable ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_editable) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->editable = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_visible) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->visible ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_visible) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->visible = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_ic) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->ic ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_ic) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->ic = (GdkIC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_ic_attr) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return (INTEGER)p->ic_attr ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_ic_attr) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->ic_attr = (GdkICAttr*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEditable_get_clipboard_text) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    return p->clipboard_text ;
}

AIKIDO_NATIVE (dtk_GtkEditable_set_clipboard_text) {
    GtkEditable *p = (GtkEditable*)paras[1].integer ;
    p->clipboard_text = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_text_area) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->text_area ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_text_area) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->text_area = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_backing_pixmap) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->backing_pixmap ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_backing_pixmap) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->backing_pixmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_cursor) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->cursor ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_cursor) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->cursor = (GdkCursor*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_text) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->text ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_text) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->text = (GdkWChar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_text_max_length) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->text_max_length ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_text_max_length) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->text_max_length = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_scroll_offset) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->scroll_offset ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_scroll_offset) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->scroll_offset = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_timer) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_timer) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->timer = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_button) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_button) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->button = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_char_offset) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->char_offset ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_char_offset) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->char_offset = (gint*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_text_mb) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return p->text_mb ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_text_mb) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->text_mb = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_text_mb_dirty) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->text_mb_dirty ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_text_mb_dirty) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->text_mb_dirty = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkEntry_get_use_wchar) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    return (INTEGER)p->use_wchar ;
}

AIKIDO_NATIVE (dtk_GtkEntry_set_use_wchar) {
    GtkEntry *p = (GtkEntry*)paras[1].integer ;
    p->use_wchar = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_dir_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->dir_list ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_dir_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->dir_list = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_file_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->file_list ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_file_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->file_list = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_selection_entry) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->selection_entry ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_selection_entry) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->selection_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_selection_text) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->selection_text ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_selection_text) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->selection_text = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_main_vbox) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->main_vbox ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_main_vbox) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->main_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_ok_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->ok_button ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_ok_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->ok_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_cancel_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->cancel_button ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_cancel_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->cancel_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_help_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->help_button ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_help_button) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->help_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_history_pulldown) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->history_pulldown ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_history_pulldown) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->history_pulldown = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_history_menu) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->history_menu ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_history_menu) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->history_menu = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_history_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->history_list ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_history_list) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->history_list = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_dialog) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->fileop_dialog ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_dialog) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_dialog = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_entry) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->fileop_entry ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_entry) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return p->fileop_file ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_file = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_cmpl_state) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->cmpl_state ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_cmpl_state) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->cmpl_state = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_c_dir) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->fileop_c_dir ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_c_dir) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_c_dir = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_del_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->fileop_del_file ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_del_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_del_file = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_fileop_ren_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->fileop_ren_file ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_fileop_ren_file) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->fileop_ren_file = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_button_area) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->button_area ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_button_area) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->button_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_get_action_area) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    return (INTEGER)p->action_area ;
}

AIKIDO_NATIVE (dtk_GtkFileSelection_set_action_area) {
    GtkFileSelection *p = (GtkFileSelection*)paras[1].integer ;
    p->action_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFixed_get_children) {
    GtkFixed *p = (GtkFixed*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkFixed_set_children) {
    GtkFixed *p = (GtkFixed*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_main_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->main_vbox ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_main_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->main_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_label) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_label ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_label) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_label = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_entry ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_clist ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_clist = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_style_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_style_entry ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_style_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_style_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_style_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_style_clist ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_style_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_style_clist = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_size_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->size_entry ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_size_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->size_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_size_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->size_clist ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_size_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->size_clist = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_pixels_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->pixels_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_pixels_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->pixels_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_points_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->points_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_points_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->points_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_filter_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->filter_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_filter_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->filter_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_preview_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->preview_entry ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_preview_entry) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->preview_entry = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_message_label) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->message_label ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_message_label) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->message_label = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_info_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->info_vbox ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_info_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->info_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_info_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->info_clist ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_info_clist) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->info_clist = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_requested_font_name) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->requested_font_name ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_requested_font_name) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->requested_font_name = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_actual_font_name) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->actual_font_name ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_actual_font_name) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->actual_font_name = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_filter_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->filter_vbox ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_filter_vbox) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->filter_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_type_bitmaps_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->type_bitmaps_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_type_bitmaps_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->type_bitmaps_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_type_scalable_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->type_scalable_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_type_scalable_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->type_scalable_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_type_scaled_bitmaps_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->type_scaled_bitmaps_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_type_scaled_bitmaps_button) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->type_scaled_bitmaps_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font = (GdkFont*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_font_index) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->font_index ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_font_index) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->font_index = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_style) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->style ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_style) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->style = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_metric) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->metric ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_metric) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->metric = (GtkFontMetricType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_size) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->size ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_size) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->size = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_get_selected_size) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    return (INTEGER)p->selected_size ;
}

AIKIDO_NATIVE (dtk_GtkFontSelection_set_selected_size) {
    GtkFontSelection *p = (GtkFontSelection*)paras[1].integer ;
    p->selected_size = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_fontsel) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->fontsel ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_fontsel) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->fontsel = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_main_vbox) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->main_vbox ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_main_vbox) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->main_vbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_action_area) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->action_area ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_action_area) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->action_area = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_ok_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->ok_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_ok_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->ok_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_apply_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->apply_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_apply_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->apply_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_cancel_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->cancel_button ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_cancel_button) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->cancel_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_dialog_width) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->dialog_width ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_dialog_width) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->dialog_width = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_get_auto_resize) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    return (INTEGER)p->auto_resize ;
}

AIKIDO_NATIVE (dtk_GtkFontSelectionDialog_set_auto_resize) {
    GtkFontSelectionDialog *p = (GtkFontSelectionDialog*)paras[1].integer ;
    p->auto_resize = (gboolean)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_get_table) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    return (INTEGER)p->table ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_set_table) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    p->table = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_get_curve) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    return (INTEGER)p->curve ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_set_curve) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    p->curve = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_get_gamma) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    return (double)p->gamma ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_set_gamma) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    p->gamma = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_get_gamma_dialog) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    return (INTEGER)p->gamma_dialog ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_set_gamma_dialog) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    p->gamma_dialog = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_get_gamma_text) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    return (INTEGER)p->gamma_text ;
}

AIKIDO_NATIVE (dtk_GtkGammaCurve_set_gamma_text) {
    GtkGammaCurve *p = (GtkGammaCurve*)paras[1].integer ;
    p->gamma_text = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_float_window) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->float_window ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_float_window) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->float_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_shadow_type) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_shadow_type) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->shadow_type = (GtkShadowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_handle_position) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->handle_position ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_handle_position) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->handle_position = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_float_window_mapped) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->float_window_mapped ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_float_window_mapped) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->float_window_mapped = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_child_detached) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->child_detached ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_child_detached) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->child_detached = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_in_drag) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->in_drag ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_in_drag) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->in_drag = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_shrink_on_detach) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)p->shrink_on_detach ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_shrink_on_detach) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    p->shrink_on_detach = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_attach_allocation) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)&p->attach_allocation ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_attach_allocation) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_get_float_allocation) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    return (INTEGER)&p->float_allocation ;
}

AIKIDO_NATIVE (dtk_GtkHandleBox_set_float_allocation) {
    GtkHandleBox *p = (GtkHandleBox*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkImage_get_image) {
    GtkImage *p = (GtkImage*)paras[1].integer ;
    return (INTEGER)p->image ;
}

AIKIDO_NATIVE (dtk_GtkImage_set_image) {
    GtkImage *p = (GtkImage*)paras[1].integer ;
    p->image = (GdkImage*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkImage_get_mask) {
    GtkImage *p = (GtkImage*)paras[1].integer ;
    return (INTEGER)p->mask ;
}

AIKIDO_NATIVE (dtk_GtkImage_set_mask) {
    GtkImage *p = (GtkImage*)paras[1].integer ;
    p->mask = (GdkBitmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_axis_list) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->axis_list ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_axis_list) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->axis_list = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_axis_listbox) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->axis_listbox ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_axis_listbox) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->axis_listbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_mode_optionmenu) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->mode_optionmenu ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_mode_optionmenu) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->mode_optionmenu = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_close_button) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->close_button ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_close_button) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->close_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_save_button) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->save_button ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_save_button) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->save_button = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_current_device) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->current_device ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_current_device) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->current_device = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_keys_list) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->keys_list ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_keys_list) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->keys_list = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_get_keys_listbox) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    return (INTEGER)p->keys_listbox ;
}

AIKIDO_NATIVE (dtk_GtkInputDialog_set_keys_listbox) {
    GtkInputDialog *p = (GtkInputDialog*)paras[1].integer ;
    p->keys_listbox = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_path) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return p->path ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_path) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->path = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_accel_group) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->accel_group ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_accel_group) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->accel_group = (GtkAccelGroup*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_widget) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->widget ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_widget) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->widget = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_items) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->items ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_items) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->items = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_translate_func) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->translate_func ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_translate_func) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->translate_func = (GtkTranslateFunc)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_translate_data) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->translate_data ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_translate_data) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->translate_data = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_get_translate_notify) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    return (INTEGER)p->translate_notify ;
}

AIKIDO_NATIVE (dtk_GtkItemFactory_set_translate_notify) {
    GtkItemFactory *p = (GtkItemFactory*)paras[1].integer ;
    p->translate_notify = (GtkDestroyNotify)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_label) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return p->label ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_label) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->label = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_label_wc) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return (INTEGER)p->label_wc ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_label_wc) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->label_wc = (GdkWChar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_pattern) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return p->pattern ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_pattern) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->pattern = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_words) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return (INTEGER)p->words ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_words) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->words = (GtkLabelWord*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_max_width) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return (INTEGER)p->max_width ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_max_width) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->max_width = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_jtype) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return (INTEGER)p->jtype ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_jtype) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->jtype = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLabel_get_wrap) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    return (INTEGER)p->wrap ;
}

AIKIDO_NATIVE (dtk_GtkLabel_set_wrap) {
    GtkLabel *p = (GtkLabel*)paras[1].integer ;
    p->wrap = (gboolean)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_children) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_children) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_width) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->width ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_width) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->width = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_height) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->height ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_height) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->height = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_xoffset) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->xoffset ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_xoffset) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->xoffset = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_yoffset) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->yoffset ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_yoffset) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->yoffset = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_hadjustment) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->hadjustment ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_hadjustment) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->hadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_vadjustment) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->vadjustment ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_vadjustment) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->vadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_bin_window) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->bin_window ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_bin_window) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->bin_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_visibility) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->visibility ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_visibility) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->visibility = (GdkVisibilityState)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_configure_serial) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->configure_serial ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_configure_serial) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->configure_serial = (gulong)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_scroll_x) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->scroll_x ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_scroll_x) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->scroll_x = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_scroll_y) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->scroll_y ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_scroll_y) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->scroll_y = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkLayout_get_freeze_count) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    return (INTEGER)p->freeze_count ;
}

AIKIDO_NATIVE (dtk_GtkLayout_set_freeze_count) {
    GtkLayout *p = (GtkLayout*)paras[1].integer ;
    p->freeze_count = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_children) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkList_set_children) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->selection ;
}

AIKIDO_NATIVE (dtk_GtkList_set_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->selection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_undo_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->undo_selection ;
}

AIKIDO_NATIVE (dtk_GtkList_set_undo_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->undo_selection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_undo_unselection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->undo_unselection ;
}

AIKIDO_NATIVE (dtk_GtkList_set_undo_unselection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->undo_unselection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_last_focus_child) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->last_focus_child ;
}

AIKIDO_NATIVE (dtk_GtkList_set_last_focus_child) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->last_focus_child = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_undo_focus_child) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->undo_focus_child ;
}

AIKIDO_NATIVE (dtk_GtkList_set_undo_focus_child) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->undo_focus_child = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_htimer) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->htimer ;
}

AIKIDO_NATIVE (dtk_GtkList_set_htimer) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->htimer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_vtimer) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->vtimer ;
}

AIKIDO_NATIVE (dtk_GtkList_set_vtimer) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->vtimer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_anchor) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->anchor ;
}

AIKIDO_NATIVE (dtk_GtkList_set_anchor) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->anchor = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_drag_pos) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->drag_pos ;
}

AIKIDO_NATIVE (dtk_GtkList_set_drag_pos) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->drag_pos = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_anchor_state) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->anchor_state ;
}

AIKIDO_NATIVE (dtk_GtkList_set_anchor_state) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->anchor_state = (GtkStateType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_selection_mode) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->selection_mode ;
}

AIKIDO_NATIVE (dtk_GtkList_set_selection_mode) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->selection_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_drag_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->drag_selection ;
}

AIKIDO_NATIVE (dtk_GtkList_set_drag_selection) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->drag_selection = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkList_get_add_mode) {
    GtkList *p = (GtkList*)paras[1].integer ;
    return (INTEGER)p->add_mode ;
}

AIKIDO_NATIVE (dtk_GtkList_set_add_mode) {
    GtkList *p = (GtkList*)paras[1].integer ;
    p->add_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_parent_menu_item) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->parent_menu_item ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_parent_menu_item) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->parent_menu_item = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_old_active_menu_item) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->old_active_menu_item ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_old_active_menu_item) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->old_active_menu_item = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_accel_group) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->accel_group ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_accel_group) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->accel_group = (GtkAccelGroup*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_position_func) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->position_func ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_position_func) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->position_func = (GtkMenuPositionFunc)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_position_func_data) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->position_func_data ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_position_func_data) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->position_func_data = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_toplevel) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->toplevel ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_toplevel) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->toplevel = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_tearoff_window) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->tearoff_window ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_tearoff_window) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->tearoff_window = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenu_get_torn_off) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    return (INTEGER)p->torn_off ;
}

AIKIDO_NATIVE (dtk_GtkMenu_set_torn_off) {
    GtkMenu *p = (GtkMenu*)paras[1].integer ;
    p->torn_off = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuBar_get_shadow_type) {
    GtkMenuBar *p = (GtkMenuBar*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkMenuBar_set_shadow_type) {
    GtkMenuBar *p = (GtkMenuBar*)paras[1].integer ;
    p->shadow_type = (GtkShadowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_submenu) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->submenu ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_submenu) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->submenu = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_accelerator_signal) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->accelerator_signal ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_accelerator_signal) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->accelerator_signal = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_toggle_size) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->toggle_size ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_toggle_size) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->toggle_size = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_accelerator_width) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->accelerator_width ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_accelerator_width) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->accelerator_width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_show_toggle_indicator) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->show_toggle_indicator ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_show_toggle_indicator) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->show_toggle_indicator = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_show_submenu_indicator) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->show_submenu_indicator ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_show_submenu_indicator) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->show_submenu_indicator = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_submenu_placement) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->submenu_placement ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_submenu_placement) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->submenu_placement = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_submenu_direction) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->submenu_direction ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_submenu_direction) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->submenu_direction = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_right_justify) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->right_justify ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_right_justify) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->right_justify = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_get_timer) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkMenuItem_set_timer) {
    GtkMenuItem *p = (GtkMenuItem*)paras[1].integer ;
    p->timer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_children) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_children) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_active_menu_item) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->active_menu_item ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_active_menu_item) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->active_menu_item = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_parent_menu_shell) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->parent_menu_shell ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_parent_menu_shell) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->parent_menu_shell = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_active) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->active ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_active) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->active = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_have_grab) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->have_grab ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_have_grab) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->have_grab = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_have_xgrab) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->have_xgrab ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_have_xgrab) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->have_xgrab = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_button) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_button) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->button = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_ignore_leave) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->ignore_leave ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_ignore_leave) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->ignore_leave = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_menu_flag) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->menu_flag ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_menu_flag) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->menu_flag = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_ignore_enter) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->ignore_enter ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_ignore_enter) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->ignore_enter = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_get_activate_time) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    return (INTEGER)p->activate_time ;
}

AIKIDO_NATIVE (dtk_GtkMenuShell_set_activate_time) {
    GtkMenuShell *p = (GtkMenuShell*)paras[1].integer ;
    p->activate_time = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMisc_get_xalign) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    return (double)p->xalign ;
}

AIKIDO_NATIVE (dtk_GtkMisc_set_xalign) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    p->xalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMisc_get_yalign) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    return (double)p->yalign ;
}

AIKIDO_NATIVE (dtk_GtkMisc_set_yalign) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    p->yalign = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMisc_get_xpad) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    return (INTEGER)p->xpad ;
}

AIKIDO_NATIVE (dtk_GtkMisc_set_xpad) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    p->xpad = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkMisc_get_ypad) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    return (INTEGER)p->ypad ;
}

AIKIDO_NATIVE (dtk_GtkMisc_set_ypad) {
    GtkMisc *p = (GtkMisc*)paras[1].integer ;
    p->ypad = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_cur_page) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->cur_page ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_cur_page) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->cur_page = (GtkNotebookPage*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_children) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_children) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_first_tab) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->first_tab ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_first_tab) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->first_tab = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_focus_tab) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->focus_tab ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_focus_tab) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->focus_tab = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_menu) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->menu ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_menu) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->menu = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_panel) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->panel ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_panel) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->panel = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_timer) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_timer) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->timer = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_tab_hborder) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->tab_hborder ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_tab_hborder) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->tab_hborder = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_tab_vborder) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->tab_vborder ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_tab_vborder) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->tab_vborder = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_show_tabs) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->show_tabs ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_show_tabs) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->show_tabs = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_homogeneous) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->homogeneous ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_homogeneous) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->homogeneous = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_show_border) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->show_border ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_show_border) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->show_border = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_tab_pos) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->tab_pos ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_tab_pos) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->tab_pos = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_scrollable) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->scrollable ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_scrollable) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->scrollable = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_in_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->in_child ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_in_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->in_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_click_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->click_child ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_click_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->click_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_button) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_button) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->button = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_need_timer) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->need_timer ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_need_timer) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->need_timer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_child_has_focus) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->child_has_focus ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_child_has_focus) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->child_has_focus = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_get_have_visible_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    return (INTEGER)p->have_visible_child ;
}

AIKIDO_NATIVE (dtk_GtkNotebook_set_have_visible_child) {
    GtkNotebook *p = (GtkNotebook*)paras[1].integer ;
    p->have_visible_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkObject_get_flags) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    return (INTEGER)p->flags ;
}

AIKIDO_NATIVE (dtk_GtkObject_set_flags) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    p->flags = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkObject_get_ref_count) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    return (INTEGER)p->ref_count ;
}

AIKIDO_NATIVE (dtk_GtkObject_set_ref_count) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    p->ref_count = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkObject_get_object_data) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    return (INTEGER)p->object_data ;
}

AIKIDO_NATIVE (dtk_GtkObject_set_object_data) {
    GtkObject *p = (GtkObject*)paras[1].integer ;
    p->object_data = (GData*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_get_menu) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    return (INTEGER)p->menu ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_set_menu) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    p->menu = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_get_menu_item) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    return (INTEGER)p->menu_item ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_set_menu_item) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    p->menu_item = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_get_width) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    return (INTEGER)p->width ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_set_width) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    p->width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_get_height) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    return (INTEGER)p->height ;
}

AIKIDO_NATIVE (dtk_GtkOptionMenu_set_height) {
    GtkOptionMenu *p = (GtkOptionMenu*)paras[1].integer ;
    p->height = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_children) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_children) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_spacing) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->spacing ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_spacing) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->spacing = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_default_border_width) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->default_border_width ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_default_border_width) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->default_border_width = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_default_pad_x) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->default_pad_x ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_default_pad_x) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->default_pad_x = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_default_pad_y) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->default_pad_y ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_default_pad_y) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->default_pad_y = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_default_i_pad_x) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->default_i_pad_x ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_default_i_pad_x) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->default_i_pad_x = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPacker_get_default_i_pad_y) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    return (INTEGER)p->default_i_pad_y ;
}

AIKIDO_NATIVE (dtk_GtkPacker_set_default_i_pad_y) {
    GtkPacker *p = (GtkPacker*)paras[1].integer ;
    p->default_i_pad_y = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child1) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child1 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child1) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child1 = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child2) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child2 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child2) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child2 = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_handle) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->handle ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_handle) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->handle = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_groove_rectangle) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)&p->groove_rectangle ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_groove_rectangle) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_xor_gc) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->xor_gc ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_xor_gc) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->xor_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_handle_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->handle_size ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_handle_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->handle_size = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_gutter_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->gutter_size ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_gutter_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->gutter_size = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child1_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child1_size ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child1_size) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child1_size = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_last_allocation) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->last_allocation ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_last_allocation) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->last_allocation = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_min_position) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->min_position ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_min_position) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->min_position = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_max_position) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->max_position ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_max_position) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->max_position = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_position_set) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->position_set ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_position_set) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->position_set = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_in_drag) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->in_drag ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_in_drag) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->in_drag = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child1_shrink) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child1_shrink ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child1_shrink) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child1_shrink = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child1_resize) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child1_resize ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child1_resize) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child1_resize = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child2_shrink) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child2_shrink ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child2_shrink) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child2_shrink = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_child2_resize) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->child2_resize ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_child2_resize) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->child2_resize = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_handle_xpos) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->handle_xpos ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_handle_xpos) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->handle_xpos = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPaned_get_handle_ypos) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    return (INTEGER)p->handle_ypos ;
}

AIKIDO_NATIVE (dtk_GtkPaned_set_handle_ypos) {
    GtkPaned *p = (GtkPaned*)paras[1].integer ;
    p->handle_ypos = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_get_pixmap) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    return (INTEGER)p->pixmap ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_set_pixmap) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    p->pixmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_get_mask) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    return (INTEGER)p->mask ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_set_mask) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    p->mask = (GdkBitmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_get_pixmap_insensitive) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    return (INTEGER)p->pixmap_insensitive ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_set_pixmap_insensitive) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    p->pixmap_insensitive = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_get_build_insensitive) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    return (INTEGER)p->build_insensitive ;
}

AIKIDO_NATIVE (dtk_GtkPixmap_set_build_insensitive) {
    GtkPixmap *p = (GtkPixmap*)paras[1].integer ;
    p->build_insensitive = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPlug_get_socket_window) {
    GtkPlug *p = (GtkPlug*)paras[1].integer ;
    return (INTEGER)p->socket_window ;
}

AIKIDO_NATIVE (dtk_GtkPlug_set_socket_window) {
    GtkPlug *p = (GtkPlug*)paras[1].integer ;
    p->socket_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPlug_get_same_app) {
    GtkPlug *p = (GtkPlug*)paras[1].integer ;
    return (INTEGER)p->same_app ;
}

AIKIDO_NATIVE (dtk_GtkPlug_set_same_app) {
    GtkPlug *p = (GtkPlug*)paras[1].integer ;
    p->same_app = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_buffer) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->buffer ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_buffer) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->buffer = (guchar*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_buffer_width) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->buffer_width ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_buffer_width) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->buffer_width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_buffer_height) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->buffer_height ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_buffer_height) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->buffer_height = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_bpp) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->bpp ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_bpp) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->bpp = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_rowstride) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->rowstride ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_rowstride) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->rowstride = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_dither) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->dither ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_dither) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->dither = (GdkRgbDither)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_type) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->type ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_type) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->type = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPreview_get_expand) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    return (INTEGER)p->expand ;
}

AIKIDO_NATIVE (dtk_GtkPreview_set_expand) {
    GtkPreview *p = (GtkPreview*)paras[1].integer ;
    p->expand = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_adjustment) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (INTEGER)p->adjustment ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_adjustment) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->adjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_offscreen_pixmap) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (INTEGER)p->offscreen_pixmap ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_offscreen_pixmap) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->offscreen_pixmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_format) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return p->format ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_format) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->format = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_x_align) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (double)p->x_align ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_x_align) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->x_align = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_y_align) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (double)p->y_align ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_y_align) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->y_align = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_show_text) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (INTEGER)p->show_text ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_show_text) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->show_text = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgress_get_activity_mode) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    return (INTEGER)p->activity_mode ;
}

AIKIDO_NATIVE (dtk_GtkProgress_set_activity_mode) {
    GtkProgress *p = (GtkProgress*)paras[1].integer ;
    p->activity_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_bar_style) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->bar_style ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_bar_style) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->bar_style = (GtkProgressBarStyle)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_orientation) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->orientation ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_orientation) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->orientation = (GtkProgressBarOrientation)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_blocks) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->blocks ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_blocks) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->blocks = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_in_block) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->in_block ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_in_block) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->in_block = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_activity_pos) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->activity_pos ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_activity_pos) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->activity_pos = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_activity_step) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->activity_step ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_activity_step) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->activity_step = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_activity_blocks) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->activity_blocks ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_activity_blocks) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->activity_blocks = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_get_activity_dir) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    return (INTEGER)p->activity_dir ;
}

AIKIDO_NATIVE (dtk_GtkProgressBar_set_activity_dir) {
    GtkProgressBar *p = (GtkProgressBar*)paras[1].integer ;
    p->activity_dir = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRadioButton_get_group) {
    GtkRadioButton *p = (GtkRadioButton*)paras[1].integer ;
    return (INTEGER)p->group ;
}

AIKIDO_NATIVE (dtk_GtkRadioButton_set_group) {
    GtkRadioButton *p = (GtkRadioButton*)paras[1].integer ;
    p->group = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRadioMenuItem_get_group) {
    GtkRadioMenuItem *p = (GtkRadioMenuItem*)paras[1].integer ;
    return (INTEGER)p->group ;
}

AIKIDO_NATIVE (dtk_GtkRadioMenuItem_set_group) {
    GtkRadioMenuItem *p = (GtkRadioMenuItem*)paras[1].integer ;
    p->group = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_trough) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->trough ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_trough) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->trough = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_slider) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->slider ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_slider) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->slider = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_step_forw) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->step_forw ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_step_forw) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->step_forw = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_step_back) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->step_back ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_step_back) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->step_back = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_x_click_point) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->x_click_point ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_x_click_point) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->x_click_point = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_y_click_point) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->y_click_point ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_y_click_point) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->y_click_point = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_button) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_button) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->button = (guint8)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_digits) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->digits ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_digits) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->digits = (gint8)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_policy) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->policy ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_policy) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->policy = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_scroll_type) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->scroll_type ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_scroll_type) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->scroll_type = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_in_child) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->in_child ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_in_child) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->in_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_click_child) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->click_child ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_click_child) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->click_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_need_timer) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->need_timer ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_need_timer) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->need_timer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_timer) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_timer) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->timer = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_old_value) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (double)p->old_value ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_old_value) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->old_value = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_old_lower) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (double)p->old_lower ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_old_lower) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->old_lower = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_old_upper) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (double)p->old_upper ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_old_upper) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->old_upper = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_old_page_size) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (double)p->old_page_size ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_old_page_size) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->old_page_size = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRange_get_adjustment) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    return (INTEGER)p->adjustment ;
}

AIKIDO_NATIVE (dtk_GtkRange_set_adjustment) {
    GtkRange *p = (GtkRange*)paras[1].integer ;
    p->adjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_backing_store) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (INTEGER)p->backing_store ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_backing_store) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->backing_store = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_non_gr_exp_gc) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (INTEGER)p->non_gr_exp_gc ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_non_gr_exp_gc) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->non_gr_exp_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_metric) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (INTEGER)p->metric ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_metric) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->metric = (GtkRulerMetric*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_xsrc) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (INTEGER)p->xsrc ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_xsrc) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->xsrc = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_slider_size) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (INTEGER)p->slider_size ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_slider_size) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->slider_size = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_lower) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (double)p->lower ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_lower) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->lower = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_upper) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (double)p->upper ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_upper) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->upper = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_position) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (double)p->position ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_position) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->position = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRuler_get_max_size) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    return (double)p->max_size ;
}

AIKIDO_NATIVE (dtk_GtkRuler_set_max_size) {
    GtkRuler *p = (GtkRuler*)paras[1].integer ;
    p->max_size = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScale_get_draw_value) {
    GtkScale *p = (GtkScale*)paras[1].integer ;
    return (INTEGER)p->draw_value ;
}

AIKIDO_NATIVE (dtk_GtkScale_set_draw_value) {
    GtkScale *p = (GtkScale*)paras[1].integer ;
    p->draw_value = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScale_get_value_pos) {
    GtkScale *p = (GtkScale*)paras[1].integer ;
    return (INTEGER)p->value_pos ;
}

AIKIDO_NATIVE (dtk_GtkScale_set_value_pos) {
    GtkScale *p = (GtkScale*)paras[1].integer ;
    p->value_pos = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_hscrollbar) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->hscrollbar ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_hscrollbar) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->hscrollbar = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_vscrollbar) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->vscrollbar ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_vscrollbar) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->vscrollbar = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_hscrollbar_policy) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->hscrollbar_policy ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_hscrollbar_policy) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->hscrollbar_policy = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_vscrollbar_policy) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->vscrollbar_policy ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_vscrollbar_policy) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->vscrollbar_policy = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_hscrollbar_visible) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->hscrollbar_visible ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_hscrollbar_visible) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->hscrollbar_visible = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_vscrollbar_visible) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->vscrollbar_visible ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_vscrollbar_visible) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->vscrollbar_visible = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_get_window_placement) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    return (INTEGER)p->window_placement ;
}

AIKIDO_NATIVE (dtk_GtkScrolledWindow_set_window_placement) {
    GtkScrolledWindow *p = (GtkScrolledWindow*)paras[1].integer ;
    p->window_placement = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_request_width) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->request_width ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_request_width) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->request_width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_request_height) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->request_height ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_request_height) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->request_height = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_current_width) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->current_width ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_current_width) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->current_width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_current_height) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->current_height ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_current_height) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->current_height = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_plug_window) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->plug_window ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_plug_window) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->plug_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_same_app) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->same_app ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_same_app) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->same_app = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_focus_in) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->focus_in ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_focus_in) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->focus_in = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_have_size) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->have_size ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_have_size) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->have_size = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSocket_get_need_map) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    return (INTEGER)p->need_map ;
}

AIKIDO_NATIVE (dtk_GtkSocket_set_need_map) {
    GtkSocket *p = (GtkSocket*)paras[1].integer ;
    p->need_map = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_adjustment) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->adjustment ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_adjustment) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->adjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_panel) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->panel ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_panel) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->panel = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_shadow_type) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_shadow_type) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->shadow_type = (GtkShadowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_timer) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_timer) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->timer = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_ev_time) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->ev_time ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_ev_time) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->ev_time = (guint32)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_climb_rate) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (double)p->climb_rate ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_climb_rate) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->climb_rate = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_timer_step) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (double)p->timer_step ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_timer_step) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->timer_step = (gfloat)paras[2].real ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_update_policy) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->update_policy ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_update_policy) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->update_policy = (GtkSpinButtonUpdatePolicy)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_in_child) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->in_child ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_in_child) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->in_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_click_child) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->click_child ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_click_child) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->click_child = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_button) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->button ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_button) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->button = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_need_timer) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->need_timer ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_need_timer) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->need_timer = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_timer_calls) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->timer_calls ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_timer_calls) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->timer_calls = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_digits) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->digits ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_digits) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->digits = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_numeric) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->numeric ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_numeric) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->numeric = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_wrap) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->wrap ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_wrap) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->wrap = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_get_snap_to_ticks) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    return (INTEGER)p->snap_to_ticks ;
}

AIKIDO_NATIVE (dtk_GtkSpinButton_set_snap_to_ticks) {
    GtkSpinButton *p = (GtkSpinButton*)paras[1].integer ;
    p->snap_to_ticks = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_frame) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->frame ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_frame) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->frame = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_label) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->label ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_label) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->label = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_messages) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->messages ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_messages) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->messages = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_keys) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->keys ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_keys) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->keys = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_seq_context_id) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->seq_context_id ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_seq_context_id) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->seq_context_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_get_seq_message_id) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    return (INTEGER)p->seq_message_id ;
}

AIKIDO_NATIVE (dtk_GtkStatusbar_set_seq_message_id) {
    GtkStatusbar *p = (GtkStatusbar*)paras[1].integer ;
    p->seq_message_id = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_black) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)&p->black ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_black) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_white) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)&p->white ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_white) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_font) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->font ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_font) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->font = (GdkFont*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_black_gc) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->black_gc ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_black_gc) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->black_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_white_gc) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->white_gc ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_white_gc) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->white_gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_ref_count) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->ref_count ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_ref_count) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->ref_count = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_attach_count) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->attach_count ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_attach_count) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->attach_count = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_depth) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->depth ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_depth) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->depth = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_colormap) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->colormap ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_colormap) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->colormap = (GdkColormap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_engine) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->engine ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_engine) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->engine = (GtkThemeEngine*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_engine_data) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->engine_data ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_engine_data) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->engine_data = (gpointer)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkStyle_get_styles) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    return (INTEGER)p->styles ;
}

AIKIDO_NATIVE (dtk_GtkStyle_set_styles) {
    GtkStyle *p = (GtkStyle*)paras[1].integer ;
    p->styles = (GSList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_children) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_children) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_rows) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->rows ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_rows) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->rows = (GtkTableRowCol*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_cols) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->cols ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_cols) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->cols = (GtkTableRowCol*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_nrows) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->nrows ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_nrows) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->nrows = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_ncols) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->ncols ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_ncols) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->ncols = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_column_spacing) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->column_spacing ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_column_spacing) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->column_spacing = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_row_spacing) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->row_spacing ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_row_spacing) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->row_spacing = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTable_get_homogeneous) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    return (INTEGER)p->homogeneous ;
}

AIKIDO_NATIVE (dtk_GtkTable_set_homogeneous) {
    GtkTable *p = (GtkTable*)paras[1].integer ;
    p->homogeneous = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTearoffMenuItem_get_torn_off) {
    GtkTearoffMenuItem *p = (GtkTearoffMenuItem*)paras[1].integer ;
    return (INTEGER)p->torn_off ;
}

AIKIDO_NATIVE (dtk_GtkTearoffMenuItem_set_torn_off) {
    GtkTearoffMenuItem *p = (GtkTearoffMenuItem*)paras[1].integer ;
    p->torn_off = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPropertyMark_get_offset) {
    GtkPropertyMark *p = (GtkPropertyMark*)paras[1].integer ;
    return (INTEGER)p->offset ;
}

AIKIDO_NATIVE (dtk_GtkPropertyMark_set_offset) {
    GtkPropertyMark *p = (GtkPropertyMark*)paras[1].integer ;
    p->offset = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkPropertyMark_get_index) {
    GtkPropertyMark *p = (GtkPropertyMark*)paras[1].integer ;
    return (INTEGER)p->index ;
}

AIKIDO_NATIVE (dtk_GtkPropertyMark_set_index) {
    GtkPropertyMark *p = (GtkPropertyMark*)paras[1].integer ;
    p->index = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_text_area) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->text_area ;
}

AIKIDO_NATIVE (dtk_GtkText_set_text_area) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->text_area = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_hadj) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->hadj ;
}

AIKIDO_NATIVE (dtk_GtkText_set_hadj) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->hadj = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_vadj) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->vadj ;
}

AIKIDO_NATIVE (dtk_GtkText_set_vadj) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->vadj = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_gc) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->gc ;
}

AIKIDO_NATIVE (dtk_GtkText_set_gc) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_line_wrap_bitmap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->line_wrap_bitmap ;
}

AIKIDO_NATIVE (dtk_GtkText_set_line_wrap_bitmap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->line_wrap_bitmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_line_arrow_bitmap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->line_arrow_bitmap ;
}

AIKIDO_NATIVE (dtk_GtkText_set_line_arrow_bitmap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->line_arrow_bitmap = (GdkPixmap*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_text_len) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->text_len ;
}

AIKIDO_NATIVE (dtk_GtkText_set_text_len) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->text_len = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_gap_position) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->gap_position ;
}

AIKIDO_NATIVE (dtk_GtkText_set_gap_position) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->gap_position = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_gap_size) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->gap_size ;
}

AIKIDO_NATIVE (dtk_GtkText_set_gap_size) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->gap_size = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_text_end) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->text_end ;
}

AIKIDO_NATIVE (dtk_GtkText_set_text_end) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->text_end = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_line_start_cache) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->line_start_cache ;
}

AIKIDO_NATIVE (dtk_GtkText_set_line_start_cache) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->line_start_cache = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_first_line_start_index) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->first_line_start_index ;
}

AIKIDO_NATIVE (dtk_GtkText_set_first_line_start_index) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->first_line_start_index = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_first_cut_pixels) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->first_cut_pixels ;
}

AIKIDO_NATIVE (dtk_GtkText_set_first_cut_pixels) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->first_cut_pixels = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_first_onscreen_hor_pixel) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->first_onscreen_hor_pixel ;
}

AIKIDO_NATIVE (dtk_GtkText_set_first_onscreen_hor_pixel) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->first_onscreen_hor_pixel = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_first_onscreen_ver_pixel) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->first_onscreen_ver_pixel ;
}

AIKIDO_NATIVE (dtk_GtkText_set_first_onscreen_ver_pixel) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->first_onscreen_ver_pixel = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_line_wrap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->line_wrap ;
}

AIKIDO_NATIVE (dtk_GtkText_set_line_wrap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->line_wrap = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_word_wrap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->word_wrap ;
}

AIKIDO_NATIVE (dtk_GtkText_set_word_wrap) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->word_wrap = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_use_wchar) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->use_wchar ;
}

AIKIDO_NATIVE (dtk_GtkText_set_use_wchar) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->use_wchar = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_freeze_count) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->freeze_count ;
}

AIKIDO_NATIVE (dtk_GtkText_set_freeze_count) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->freeze_count = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_text_properties) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->text_properties ;
}

AIKIDO_NATIVE (dtk_GtkText_set_text_properties) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->text_properties = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_text_properties_end) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->text_properties_end ;
}

AIKIDO_NATIVE (dtk_GtkText_set_text_properties_end) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->text_properties_end = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_point) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)&p->point ;
}

AIKIDO_NATIVE (dtk_GtkText_set_point) {
    GtkText *p = (GtkText*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_scratch_buffer_len) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->scratch_buffer_len ;
}

AIKIDO_NATIVE (dtk_GtkText_set_scratch_buffer_len) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->scratch_buffer_len = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_last_ver_value) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->last_ver_value ;
}

AIKIDO_NATIVE (dtk_GtkText_set_last_ver_value) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->last_ver_value = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_current_line) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->current_line ;
}

AIKIDO_NATIVE (dtk_GtkText_set_current_line) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->current_line = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_tab_stops) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->tab_stops ;
}

AIKIDO_NATIVE (dtk_GtkText_set_tab_stops) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->tab_stops = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_default_tab_width) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->default_tab_width ;
}

AIKIDO_NATIVE (dtk_GtkText_set_default_tab_width) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->default_tab_width = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkText_get_timer) {
    GtkText *p = (GtkText*)paras[1].integer ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_GtkText_set_timer) {
    GtkText *p = (GtkText*)paras[1].integer ;
    p->timer = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_get_active) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    return (INTEGER)p->active ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_set_active) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    p->active = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_get_draw_indicator) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    return (INTEGER)p->draw_indicator ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_set_draw_indicator) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    p->draw_indicator = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_get_event_window) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    return (INTEGER)p->event_window ;
}

AIKIDO_NATIVE (dtk_GtkToggleButton_set_event_window) {
    GtkToggleButton *p = (GtkToggleButton*)paras[1].integer ;
    p->event_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_num_children) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->num_children ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_num_children) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->num_children = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_children) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_children) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_orientation) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->orientation ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_orientation) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->orientation = (GtkOrientation)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_style) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->style ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_style) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->style = (GtkToolbarStyle)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_space_style) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->space_style ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_space_style) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->space_style = (GtkToolbarSpaceStyle)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_tooltips) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->tooltips ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_tooltips) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->tooltips = (GtkTooltips*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_button_maxw) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->button_maxw ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_button_maxw) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->button_maxw = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_button_maxh) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->button_maxh ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_button_maxh) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->button_maxh = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_get_relief) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    return (INTEGER)p->relief ;
}

AIKIDO_NATIVE (dtk_GtkToolbar_set_relief) {
    GtkToolbar *p = (GtkToolbar*)paras[1].integer ;
    p->relief = (GtkReliefStyle)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_tip_window) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->tip_window ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_tip_window) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->tip_window = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_active_tips_data) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->active_tips_data ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_active_tips_data) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->active_tips_data = (GtkTooltipsData*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_tips_data_list) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->tips_data_list ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_tips_data_list) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->tips_data_list = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_gc) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->gc ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_gc) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->gc = (GdkGC*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_foreground) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->foreground ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_foreground) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->foreground = (GdkColor*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_background) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->background ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_background) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->background = (GdkColor*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_delay) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->delay ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_delay) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->delay = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_enabled) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->enabled ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_enabled) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->enabled = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_get_timer_tag) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    return (INTEGER)p->timer_tag ;
}

AIKIDO_NATIVE (dtk_GtkTooltips_set_timer_tag) {
    GtkTooltips *p = (GtkTooltips*)paras[1].integer ;
    p->timer_tag = (gint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_children) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->children ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_children) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->children = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_tree_owner) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->tree_owner ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_tree_owner) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->tree_owner = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_selection) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->selection ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_selection) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->selection = (GList*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_level) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->level ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_level) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->level = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_indent_value) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->indent_value ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_indent_value) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->indent_value = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_current_indent) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->current_indent ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_current_indent) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->current_indent = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_selection_mode) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->selection_mode ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_selection_mode) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->selection_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_view_mode) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->view_mode ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_view_mode) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->view_mode = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTree_get_view_line) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    return (INTEGER)p->view_line ;
}

AIKIDO_NATIVE (dtk_GtkTree_set_view_line) {
    GtkTree *p = (GtkTree*)paras[1].integer ;
    p->view_line = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_get_subtree) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    return (INTEGER)p->subtree ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_set_subtree) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    p->subtree = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_get_pixmaps_box) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    return (INTEGER)p->pixmaps_box ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_set_pixmaps_box) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    p->pixmaps_box = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_get_plus_pix_widget) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    return (INTEGER)p->plus_pix_widget ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_set_plus_pix_widget) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    p->plus_pix_widget = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_get_expanded) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    return (INTEGER)p->expanded ;
}

AIKIDO_NATIVE (dtk_GtkTreeItem_set_expanded) {
    GtkTreeItem *p = (GtkTreeItem*)paras[1].integer ;
    p->expanded = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkViewport_get_shadow_type) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    return (INTEGER)p->shadow_type ;
}

AIKIDO_NATIVE (dtk_GtkViewport_set_shadow_type) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    p->shadow_type = (GtkShadowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkViewport_get_view_window) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    return (INTEGER)p->view_window ;
}

AIKIDO_NATIVE (dtk_GtkViewport_set_view_window) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    p->view_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkViewport_get_bin_window) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    return (INTEGER)p->bin_window ;
}

AIKIDO_NATIVE (dtk_GtkViewport_set_bin_window) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    p->bin_window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkViewport_get_hadjustment) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    return (INTEGER)p->hadjustment ;
}

AIKIDO_NATIVE (dtk_GtkViewport_set_hadjustment) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    p->hadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkViewport_get_vadjustment) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    return (INTEGER)p->vadjustment ;
}

AIKIDO_NATIVE (dtk_GtkViewport_set_vadjustment) {
    GtkViewport *p = (GtkViewport*)paras[1].integer ;
    p->vadjustment = (GtkAdjustment*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkRequisition_get_height) {
    GtkRequisition *p = (GtkRequisition*)paras[1].integer ;
    return (INTEGER)p->height ;
}

AIKIDO_NATIVE (dtk_GtkRequisition_set_height) {
    GtkRequisition *p = (GtkRequisition*)paras[1].integer ;
    p->height = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_get_y) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    return (INTEGER)p->y ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_set_y) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    p->y = (gint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_get_width) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    return (INTEGER)p->width ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_set_width) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    p->width = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_get_height) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    return (INTEGER)p->height ;
}

AIKIDO_NATIVE (dtk_GtkAllocation_set_height) {
    GtkAllocation *p = (GtkAllocation*)paras[1].integer ;
    p->height = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_private_flags) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->private_flags ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_private_flags) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->private_flags = (guint16)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_state) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->state ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_state) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->state = (guint8)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_saved_state) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->saved_state ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_saved_state) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->saved_state = (guint8)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_name) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return p->name ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_name) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->name = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_style) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->style ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_style) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->style = (GtkStyle*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_requisition) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)&p->requisition ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_requisition) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_allocation) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)&p->allocation ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_allocation) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    throw newException (vm, stack, "Cannot set this field") ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_window) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->window ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_window) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->window = (GdkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWidget_get_parent) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    return (INTEGER)p->parent ;
}

AIKIDO_NATIVE (dtk_GtkWidget_set_parent) {
    GtkWidget *p = (GtkWidget*)paras[1].integer ;
    p->parent = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_title) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return p->title ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_title) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->title = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_wmclass_name) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return p->wmclass_name ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_wmclass_name) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->wmclass_name = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_wmclass_class) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return p->wmclass_class ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_wmclass_class) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->wmclass_class = g_strdup (paras[2].str->c_str());
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_type) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->type ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_type) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->type = (GtkWindowType)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_focus_widget) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->focus_widget ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_focus_widget) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->focus_widget = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_default_widget) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->default_widget ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_default_widget) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->default_widget = (GtkWidget*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_transient_parent) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->transient_parent ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_transient_parent) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->transient_parent = (GtkWindow*)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_resize_count) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->resize_count ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_resize_count) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->resize_count = (gushort)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_allow_shrink) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->allow_shrink ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_allow_shrink) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->allow_shrink = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_allow_grow) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->allow_grow ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_allow_grow) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->allow_grow = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_auto_shrink) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->auto_shrink ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_auto_shrink) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->auto_shrink = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_handling_resize) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->handling_resize ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_handling_resize) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->handling_resize = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_position) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->position ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_position) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->position = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_use_uposition) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->use_uposition ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_use_uposition) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->use_uposition = (guint)paras[2].integer ;
    return 0 ;
}

AIKIDO_NATIVE (dtk_GtkWindow_get_modal) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    return (INTEGER)p->modal ;
}

AIKIDO_NATIVE (dtk_GtkWindow_set_modal) {
    GtkWindow *p = (GtkWindow*)paras[1].integer ;
    p->modal = (guint)paras[2].integer ;
    return 0 ;
}

