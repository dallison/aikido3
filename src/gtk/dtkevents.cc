/*
 * dtkevents.cc
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc. 2003
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.3
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */


//
// generated by makeevents.aikido
//


AIKIDO_NATIVE (dtk_get_GtkAdjustmentClass_changed) {
    GtkAdjustmentClass *p = (GtkAdjustmentClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->changed ;
}

AIKIDO_NATIVE (dtk_get_GtkAdjustmentClass_value_changed) {
    GtkAdjustmentClass *p = (GtkAdjustmentClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->value_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkButtonClass_pressed) {
    GtkButtonClass *p = (GtkButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->pressed ;
}

AIKIDO_NATIVE (dtk_get_GtkButtonClass_released) {
    GtkButtonClass *p = (GtkButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->released ;
}

AIKIDO_NATIVE (dtk_get_GtkButtonClass_clicked) {
    GtkButtonClass *p = (GtkButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->clicked ;
}

AIKIDO_NATIVE (dtk_get_GtkButtonClass_enter) {
    GtkButtonClass *p = (GtkButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->enter ;
}

AIKIDO_NATIVE (dtk_get_GtkButtonClass_leave) {
    GtkButtonClass *p = (GtkButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->leave ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_month_changed) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->month_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_day_selected) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->day_selected ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_day_selected_double_click) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->day_selected_double_click ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_prev_month) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->prev_month ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_next_month) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->next_month ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_prev_year) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->prev_year ;
}

AIKIDO_NATIVE (dtk_get_GtkCalendarClass_next_year) {
    GtkCalendarClass *p = (GtkCalendarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->next_year ;
}

AIKIDO_NATIVE (dtk_get_GtkCheckButtonClass_draw_indicator) {
    GtkCheckButtonClass *p = (GtkCheckButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_indicator ;
}

AIKIDO_NATIVE (dtk_get_GtkCheckMenuItemClass_toggled) {
    GtkCheckMenuItemClass *p = (GtkCheckMenuItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggled ;
}

AIKIDO_NATIVE (dtk_get_GtkCheckMenuItemClass_draw_indicator) {
    GtkCheckMenuItemClass *p = (GtkCheckMenuItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_indicator ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_set_scroll_adjustments) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_scroll_adjustments ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_refresh) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->refresh ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_select_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_unselect_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unselect_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_row_move) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->row_move ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_click_column) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->click_column ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_resize_column) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->resize_column ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_toggle_focus_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggle_focus_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_select_all) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select_all ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_unselect_all) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unselect_all ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_undo_selection) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->undo_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_start_selection) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->start_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_end_selection) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->end_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_extend_selection) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->extend_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_scroll_horizontal) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->scroll_horizontal ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_scroll_vertical) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->scroll_vertical ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_toggle_add_mode) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggle_add_mode ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_abort_column_resize) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->abort_column_resize ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_resync_selection) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->resync_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_selection_find) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_find ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_draw_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_draw_drag_highlight) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_drag_highlight ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_clear) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->clear ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_fake_unselect_all) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->fake_unselect_all ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_sort_list) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->sort_list ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_insert_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->insert_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_remove_row) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->remove_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_set_cell_contents) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_cell_contents ;
}

AIKIDO_NATIVE (dtk_get_GtkCListClass_cell_size_request) {
    GtkCListClass *p = (GtkCListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->cell_size_request ;
}

AIKIDO_NATIVE (dtk_get_GtkColorSelectionClass_color_changed) {
    GtkColorSelectionClass *p = (GtkColorSelectionClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->color_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_add) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->add ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_remove) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->remove ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_check_resize) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->check_resize ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_forall) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->forall ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_focus) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->focus ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_set_focus_child) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_focus_child ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_child_type) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->child_type ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_set_child_arg) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_child_arg ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_get_child_arg) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->get_child_arg ;
}

AIKIDO_NATIVE (dtk_get_GtkContainerClass_composite_name) {
    GtkContainerClass *p = (GtkContainerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->composite_name ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_tree_select_row) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->tree_select_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_tree_unselect_row) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->tree_unselect_row ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_tree_expand) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->tree_expand ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_tree_collapse) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->tree_collapse ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_tree_move) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->tree_move ;
}

AIKIDO_NATIVE (dtk_get_GtkCTreeClass_change_focus_row_expansion) {
    GtkCTreeClass *p = (GtkCTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->change_focus_row_expansion ;
}

AIKIDO_NATIVE (dtk_get_GtkCurveClass_curve_type_changed) {
    GtkCurveClass *p = (GtkCurveClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->curve_type_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkDataClass_disconnect) {
    GtkDataClass *p = (GtkDataClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->disconnect ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_changed) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->changed ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_insert_text) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->insert_text ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_delete_text) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->delete_text ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_activate) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->activate ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_set_editable) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_editable ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_move_cursor) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_cursor ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_move_word) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_word ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_move_page) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_page ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_move_to_row) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_to_row ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_move_to_column) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_to_column ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_kill_char) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->kill_char ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_kill_word) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->kill_word ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_kill_line) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->kill_line ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_cut_clipboard) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->cut_clipboard ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_copy_clipboard) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->copy_clipboard ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_paste_clipboard) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->paste_clipboard ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_update_text) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->update_text ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_get_chars) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->get_chars ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_set_selection) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkEditableClass_set_position) {
    GtkEditableClass *p = (GtkEditableClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_position ;
}

AIKIDO_NATIVE (dtk_get_GtkHandleBoxClass_child_attached) {
    GtkHandleBoxClass *p = (GtkHandleBoxClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->child_attached ;
}

AIKIDO_NATIVE (dtk_get_GtkHandleBoxClass_child_detached) {
    GtkHandleBoxClass *p = (GtkHandleBoxClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->child_detached ;
}

AIKIDO_NATIVE (dtk_get_GtkInputDialogClass_enable_device) {
    GtkInputDialogClass *p = (GtkInputDialogClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->enable_device ;
}

AIKIDO_NATIVE (dtk_get_GtkInputDialogClass_disable_device) {
    GtkInputDialogClass *p = (GtkInputDialogClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->disable_device ;
}

AIKIDO_NATIVE (dtk_get_GtkItemClass_select) {
    GtkItemClass *p = (GtkItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select ;
}

AIKIDO_NATIVE (dtk_get_GtkItemClass_deselect) {
    GtkItemClass *p = (GtkItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->deselect ;
}

AIKIDO_NATIVE (dtk_get_GtkItemClass_toggle) {
    GtkItemClass *p = (GtkItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggle ;
}

AIKIDO_NATIVE (dtk_get_GtkLayoutClass_set_scroll_adjustments) {
    GtkLayoutClass *p = (GtkLayoutClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_scroll_adjustments ;
}

AIKIDO_NATIVE (dtk_get_GtkListClass_selection_changed) {
    GtkListClass *p = (GtkListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkListClass_select_child) {
    GtkListClass *p = (GtkListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select_child ;
}

AIKIDO_NATIVE (dtk_get_GtkListClass_unselect_child) {
    GtkListClass *p = (GtkListClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unselect_child ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_toggle_focus_row) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggle_focus_row ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_select_all) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select_all ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_unselect_all) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unselect_all ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_undo_selection) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->undo_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_start_selection) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->start_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_end_selection) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->end_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_extend_selection) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->extend_selection ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_scroll_horizontal) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->scroll_horizontal ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_scroll_vertical) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->scroll_vertical ;
}

AIKIDO_NATIVE (dtk_get_GtkListItemClass_toggle_add_mode) {
    GtkListItemClass *p = (GtkListItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggle_add_mode ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuItemClass_activate) {
    GtkMenuItemClass *p = (GtkMenuItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->activate ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuItemClass_activate_item) {
    GtkMenuItemClass *p = (GtkMenuItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->activate_item ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuShellClass_deactivate) {
    GtkMenuShellClass *p = (GtkMenuShellClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->deactivate ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuShellClass_selection_done) {
    GtkMenuShellClass *p = (GtkMenuShellClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_done ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuShellClass_move_current) {
    GtkMenuShellClass *p = (GtkMenuShellClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->move_current ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuShellClass_activate_current) {
    GtkMenuShellClass *p = (GtkMenuShellClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->activate_current ;
}

AIKIDO_NATIVE (dtk_get_GtkMenuShellClass_cancel) {
    GtkMenuShellClass *p = (GtkMenuShellClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->cancel ;
}

AIKIDO_NATIVE (dtk_get_GtkNotebookClass_switch_page) {
    GtkNotebookClass *p = (GtkNotebookClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->switch_page ;
}

AIKIDO_NATIVE (dtk_get_GtkObjectClass_set_arg) {
    GtkObjectClass *p = (GtkObjectClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_arg ;
}

AIKIDO_NATIVE (dtk_get_GtkObjectClass_get_arg) {
    GtkObjectClass *p = (GtkObjectClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->get_arg ;
}

AIKIDO_NATIVE (dtk_get_GtkObjectClass_shutdown) {
    GtkObjectClass *p = (GtkObjectClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->shutdown ;
}

AIKIDO_NATIVE (dtk_get_GtkObjectClass_destroy) {
    GtkObjectClass *p = (GtkObjectClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->destroy ;
}

AIKIDO_NATIVE (dtk_get_GtkObjectClass_finalize) {
    GtkObjectClass *p = (GtkObjectClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->finalize ;
}

AIKIDO_NATIVE (dtk_get_GtkProgressClass_paint) {
    GtkProgressClass *p = (GtkProgressClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->paint ;
}

AIKIDO_NATIVE (dtk_get_GtkProgressClass_update) {
    GtkProgressClass *p = (GtkProgressClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->update ;
}

AIKIDO_NATIVE (dtk_get_GtkProgressClass_act_mode_enter) {
    GtkProgressClass *p = (GtkProgressClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->act_mode_enter ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_draw_background) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_background ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_clear_background) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->clear_background ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_draw_trough) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_trough ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_draw_slider) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_slider ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_draw_step_forw) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_step_forw ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_draw_step_back) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_step_back ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_slider_update) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->slider_update ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_trough_click) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->trough_click ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_trough_keys) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->trough_keys ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_motion) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->motion ;
}

AIKIDO_NATIVE (dtk_get_GtkRangeClass_timer) {
    GtkRangeClass *p = (GtkRangeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->timer ;
}

AIKIDO_NATIVE (dtk_get_GtkRulerClass_draw_ticks) {
    GtkRulerClass *p = (GtkRulerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_ticks ;
}

AIKIDO_NATIVE (dtk_get_GtkRulerClass_draw_pos) {
    GtkRulerClass *p = (GtkRulerClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_pos ;
}

AIKIDO_NATIVE (dtk_get_GtkScaleClass_draw_value) {
    GtkScaleClass *p = (GtkScaleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_value ;
}

AIKIDO_NATIVE (dtk_get_GtkStatusbarClass_text_pushed) {
    GtkStatusbarClass *p = (GtkStatusbarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->text_pushed ;
}

AIKIDO_NATIVE (dtk_get_GtkStatusbarClass_text_popped) {
    GtkStatusbarClass *p = (GtkStatusbarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->text_popped ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_hline) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_hline ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_vline) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_vline ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_shadow) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_shadow ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_polygon) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_polygon ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_arrow) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_arrow ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_diamond) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_diamond ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_oval) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_oval ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_string) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_string ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_box) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_box ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_flat_box) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_flat_box ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_check) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_check ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_option) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_option ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_cross) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_cross ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_ramp) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_ramp ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_tab) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_tab ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_shadow_gap) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_shadow_gap ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_box_gap) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_box_gap ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_extension) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_extension ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_focus) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_focus ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_slider) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_slider ;
}

AIKIDO_NATIVE (dtk_get_GtkStyleClass_draw_handle) {
    GtkStyleClass *p = (GtkStyleClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_handle ;
}

AIKIDO_NATIVE (dtk_get_GtkTextClass_set_scroll_adjustments) {
    GtkTextClass *p = (GtkTextClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_scroll_adjustments ;
}

AIKIDO_NATIVE (dtk_get_GtkToggleButtonClass_toggled) {
    GtkToggleButtonClass *p = (GtkToggleButtonClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->toggled ;
}

AIKIDO_NATIVE (dtk_get_GtkToolbarClass_orientation_changed) {
    GtkToolbarClass *p = (GtkToolbarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->orientation_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkToolbarClass_style_changed) {
    GtkToolbarClass *p = (GtkToolbarClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->style_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkTreeClass_selection_changed) {
    GtkTreeClass *p = (GtkTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkTreeClass_select_child) {
    GtkTreeClass *p = (GtkTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->select_child ;
}

AIKIDO_NATIVE (dtk_get_GtkTreeClass_unselect_child) {
    GtkTreeClass *p = (GtkTreeClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unselect_child ;
}

AIKIDO_NATIVE (dtk_get_GtkTreeItemClass_expand) {
    GtkTreeItemClass *p = (GtkTreeItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->expand ;
}

AIKIDO_NATIVE (dtk_get_GtkTreeItemClass_collapse) {
    GtkTreeItemClass *p = (GtkTreeItemClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->collapse ;
}

AIKIDO_NATIVE (dtk_get_GtkViewportClass_set_scroll_adjustments) {
    GtkViewportClass *p = (GtkViewportClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_scroll_adjustments ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_show) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->show ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_show_all) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->show_all ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_hide) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->hide ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_hide_all) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->hide_all ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_map) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->map ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_unmap) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unmap ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_realize) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->realize ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_unrealize) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unrealize ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_draw) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_draw_focus) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_focus ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_draw_default) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->draw_default ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_size_request) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->size_request ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_size_allocate) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->size_allocate ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_state_changed) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->state_changed ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_parent_set) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->parent_set ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_style_set) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->style_set ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_add_accelerator) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->add_accelerator ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_remove_accelerator) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->remove_accelerator ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_grab_focus) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->grab_focus ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_button_press_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->button_press_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_button_release_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->button_release_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_motion_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->motion_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_delete_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->delete_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_destroy_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->destroy_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_expose_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->expose_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_key_press_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->key_press_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_key_release_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->key_release_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_enter_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->enter_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_leave_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->leave_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_configure_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->configure_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_focus_in_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->focus_in_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_focus_out_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->focus_out_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_map_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->map_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_unmap_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->unmap_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_property_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->property_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_selection_clear_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_clear_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_selection_request_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_request_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_selection_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_proximity_in_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->proximity_in_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_proximity_out_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->proximity_out_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_visibility_notify_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->visibility_notify_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_client_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->client_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_no_expose_event) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->no_expose_event ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_selection_get) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_get ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_selection_received) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->selection_received ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_begin) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_begin ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_end) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_end ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_data_get) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_data_get ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_data_delete) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_data_delete ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_leave) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_leave ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_motion) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_motion ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_drop) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_drop ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_drag_data_received) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->drag_data_received ;
}

AIKIDO_NATIVE (dtk_get_GtkWidgetClass_debug_msg) {
    GtkWidgetClass *p = (GtkWidgetClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->debug_msg ;
}

AIKIDO_NATIVE (dtk_get_GtkWindowClass_set_focus) {
    GtkWindowClass *p = (GtkWindowClass*)(((GtkObject*)paras[1].integer)->klass) ;
    return (INTEGER)p->set_focus ;
}

