/*
 * gtk.aikido
 *
 * Aikido Language System,
 * export version: 1.00
 * Copyright (c) 2002-2003 Sun Microsystems, Inc. 2003
 *
 * Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License Version 1.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of the License is available
 * at http://www.opensource.org/licenses/sunpublic.php
 * 
 * The Original Code is Aikido. 
 * The Initial Developer of the Original Code is David Allison on behalf of Sun Microsystems, Inc. 
 * Copyright (C) Sun Microsystems, Inc. 2000-2003. All Rights Reserved.
 * 
 * 
 * Contributor(s): dallison
 *
 * Version:  1.2
 * Created by dallison on 4/19/2002
 * Last modified by dallison on 03/07/29
 */


// GIMP Toolkit interface package.  Most of this is generated by
// a script.  Too much typing...
//
// Luckily the designer of the toolkit did it in a nice object oriented
// way.  Makes it much easier to convert
//

import gdk

package GTK {
public:
    import libgthread
    import libgtk

    import libdtk
    native aikido_gtk_init (a)
    native g_thread_init (v)

    //native dtk_register_object (nativeobj, obj)
    //native dtk_lookup_object (nativeobj)
    //native dtk_unregister_object (nativeobj) 

    var objectRegistry = {}

    public function register_object (nativeobj, obj) {
        objectRegistry[nativeobj] = obj
    }

    public function lookup_object (nativeobj) {
        return objectRegistry[nativeobj]
    }

    public function unregister_object (nativeobj) {
        delete objectRegistry[nativeobj]
    }

    private native gtk_accelerator_valid (keyval, modifiers)
    private native gtk_accelerator_parse (accelerator, accelerator_key, accelerator_mods)
    private native gtk_accelerator_name (accelerator_key, accelerator_mods)
    private native gtk_accelerator_set_default_mod_mask (default_mod_mask)
    private native gtk_accelerator_get_default_mod_mask ()
    private native gtk_accel_group_new ()
    private native gtk_accel_group_get_default ()
    private native gtk_accel_group_ref (accel_group)
    private native gtk_accel_group_unref (accel_group)
    private native gtk_accel_group_lock (accel_group)
    private native gtk_accel_group_unlock (accel_group)
    private native gtk_accel_groups_activate (object, accel_key, accel_mods)
    private native gtk_accel_group_activate (accel_group, accel_key, accel_mods)
    private native gtk_accel_group_attach (accel_group, object)
    private native gtk_accel_group_detach (accel_group, object)
    private native gtk_accel_group_get_entry (accel_group, accel_key, accel_mods)
    private native gtk_accel_group_lock_entry (accel_group, accel_key, accel_mods)
    private native gtk_accel_group_unlock_entry (accel_group, accel_key, accel_mods)
    private native gtk_accel_group_add (accel_group, accel_key, accel_mods, accel_flags, object, accel_signal)
    private native gtk_accel_group_remove (accel_group, accel_key, accel_mods, object)
    private native gtk_accel_group_handle_add (object, accel_signal_id, accel_group, accel_key, accel_mods, accel_flags)
    private native gtk_accel_group_handle_remove (object, accel_group, accel_key, accel_mods)
    private native gtk_accel_group_create_add (class_type, signal_flags, handler_offset)
    private native gtk_accel_group_create_remove (class_type, signal_flags, handler_offset)
    private native gtk_accel_groups_from_object (object)
    private native gtk_accel_group_entries_from_object (object)
    private native gtk_accel_label_get_type ()
    private native gtk_accel_label_new (string)
    private native gtk_accel_label_get_accel_width (accel_label)
    private native gtk_accel_label_set_accel_widget (accel_label, accel_widget)
    private native gtk_accel_label_refetch (accel_label)
    private native gtk_adjustment_get_type ()
    private native gtk_adjustment_new (value, lower, upper, step_increment, page_increment, page_size)
    private native gtk_adjustment_changed (adjustment)
    private native gtk_adjustment_value_changed (adjustment)
    private native gtk_adjustment_clamp_page (adjustment, lower, upper)
    private native gtk_adjustment_set_value (adjustment, value)
    private native gtk_alignment_get_type ()
    private native gtk_alignment_new (xalign, yalign, xscale, yscale)
    private native gtk_alignment_set (alignment, xalign, yalign, xscale, yscale)
    private native gtk_arg_new (arg_type)
    private native gtk_arg_copy (src_arg, dest_arg)
    private native gtk_arg_free (arg, free_contents)
    private native gtk_arg_reset (arg)
    private native gtk_arg_values_equal (arg1, arg2)
    private native gtk_args_collect (object_type, arg_info_hash_table, arg_list_p, info_list_p, first_arg_name, var_args)
    private native gtk_args_collect_cleanup (arg_list, info_list)
    private native gtk_arg_get_info (object_type, arg_info_hash_table, arg_name, info_p)
    private native gtk_arg_type_new_static (base_class_type, arg_name, class_n_args_offset, arg_info_hash_table, arg_type, arg_flags, arg_id)
    private native gtk_args_query (class_type, arg_info_hash_table, arg_flags, n_args_p)
    private native gtk_arg_name_strip_type (arg_name)
    private native gtk_arg_info_equal (arg_info_1, arg_info_2)
    private native gtk_arg_info_hash (arg_info)
    private native gtk_arg_to_valueloc (arg, value_pointer)
    private native gtk_arrow_get_type ()
    private native gtk_arrow_new (arrow_type, shadow_type)
    private native gtk_arrow_set (arrow, arrow_type, shadow_type)
    private native gtk_aspect_frame_get_type ()
    private native gtk_aspect_frame_new (label, xalign, yalign, ratio, obey_child)
    private native gtk_aspect_frame_set (aspect_frame, xalign, yalign, ratio, obey_child)
    private native gtk_bin_get_type ()
    private native gtk_pattern_spec_init (pspec, pattern)
    private native gtk_pattern_spec_free_segs (pspec)
    private native gtk_pattern_match (pspec, string_length, string, string_reversed)
    private native gtk_pattern_match_string (pspec, string)
    private native gtk_pattern_match_simple (pattern, string)
    private native gtk_binding_set_new (set_name)
    private native gtk_binding_set_by_class (object_class)
    private native gtk_binding_set_find (set_name)
    private native gtk_bindings_activate (object, keyval, modifiers)
    private native gtk_binding_set_activate (binding_set, keyval, modifiers, object)
    private native gtk_binding_entry_clear (binding_set, keyval, modifiers)
    private native gtk_binding_entry_add_signal (binding_set, keyval, modifiers, signal_name, n_args,... )
    private native gtk_binding_set_add_path (binding_set, path_type, path_pattern, priority)
    private native gtk_binding_entry_remove (binding_set, keyval, modifiers)
    private native gtk_binding_entry_add_signall (binding_set, keyval, modifiers, signal_name, binding_args)
    private native gtk_binding_parse_binding (scanner)
    private native gtk_button_box_get_type ()
    private native gtk_button_box_get_child_size_default (min_width, min_height)
    private native gtk_button_box_get_child_ipadding_default (ipad_x, ipad_y)
    private native gtk_button_box_set_child_size_default (min_width, min_height)
    private native gtk_button_box_set_child_ipadding_default (ipad_x, ipad_y)
    private native gtk_button_box_get_spacing (widget)
    private native gtk_button_box_get_layout (widget)
    private native gtk_button_box_get_child_size (widget, min_width, min_height)
    private native gtk_button_box_get_child_ipadding (widget, ipad_x, ipad_y)
    private native gtk_button_box_set_spacing (widget, spacing)
    private native gtk_button_box_set_layout (widget, layout_style)
    private native gtk_button_box_set_child_size (widget, min_width, min_height)
    private native gtk_button_box_set_child_ipadding (widget, ipad_x, ipad_y)
    private native gtk_button_box_child_requisition (widget, nvis_children, width, height)
    private native gtk_box_get_type ()
    private native gtk_box_pack_start (box, child, expand, fill, padding)
    private native gtk_box_pack_end (box, child, expand, fill, padding)
    private native gtk_box_pack_start_defaults (box, widget)
    private native gtk_box_pack_end_defaults (box, widget)
    private native gtk_box_set_homogeneous (box, homogeneous)
    private native gtk_box_set_spacing (box, spacing)
    private native gtk_box_reorder_child (box, child, position)
    private native gtk_box_query_child_packing (box, child, expand, fill, padding, pack_type)
    private native gtk_box_set_child_packing (box, child, expand, fill, padding, pack_type)
    private native gtk_button_get_type ()
    private native gtk_button_new ()
    private native gtk_button_new_with_label (label)
    private native gtk_button_pressed (button)
    private native gtk_button_released (button)
    private native gtk_button_clicked (button)
    private native gtk_button_enter (button)
    private native gtk_button_leave (button)
    private native gtk_button_set_relief (button, newstyle)
    private native gtk_button_get_relief (button)
    private native gtk_calendar_get_type ()
    private native gtk_calendar_new ()
    private native gtk_calendar_select_month (calendar, month, year)
    private native gtk_calendar_select_day (calendar, day)
    private native gtk_calendar_mark_day (calendar, day)
    private native gtk_calendar_unmark_day (calendar, day)
    private native gtk_calendar_clear_marks (calendar)
    private native gtk_calendar_display_options (calendar, flags)
    private native gtk_calendar_get_date (calendar, year, month, day)
    private native gtk_calendar_freeze (calendar)
    private native gtk_calendar_thaw (calendar)
    private native gtk_check_button_get_type ()
    private native gtk_check_button_new ()
    private native gtk_check_button_new_with_label (label)
    private native gtk_check_menu_item_get_type ()
    private native gtk_check_menu_item_new ()
    private native gtk_check_menu_item_new_with_label (label)
    private native gtk_check_menu_item_set_active (check_menu_item, is_active)
    private native gtk_check_menu_item_set_show_toggle (menu_item, always)
    private native gtk_check_menu_item_toggled (check_menu_item)
    private native gtk_clist_get_type ()
    private native gtk_clist_construct (clist, columns, titles)
    private native gtk_clist_new (columns)
    private native gtk_clist_new_with_titles (columns, titles)
    private native gtk_clist_set_hadjustment (clist, adjustment)
    private native gtk_clist_set_vadjustment (clist, adjustment)
    private native gtk_clist_get_hadjustment (clist)
    private native gtk_clist_get_vadjustment (clist)
    private native gtk_clist_set_shadow_type (clist, type)
    private native gtk_clist_set_selection_mode (clist, mode)
    private native gtk_clist_set_reorderable (clist, reorderable)
    private native gtk_clist_set_use_drag_icons (clist, use_icons)
    private native gtk_clist_set_button_actions (clist, button, button_actions)
    private native gtk_clist_freeze (clist)
    private native gtk_clist_thaw (clist)
    private native gtk_clist_column_titles_show (clist)
    private native gtk_clist_column_titles_hide (clist)
    private native gtk_clist_column_title_active (clist, column)
    private native gtk_clist_column_title_passive (clist, column)
    private native gtk_clist_column_titles_active (clist)
    private native gtk_clist_column_titles_passive (clist)
    private native gtk_clist_set_column_title (clist, column, title)
    private native gtk_clist_get_column_title (clist, column)
    private native gtk_clist_set_column_widget (clist, column, widget)
    private native gtk_clist_get_column_widget (clist, column)
    private native gtk_clist_set_column_justification (clist, column, justification)
    private native gtk_clist_set_column_visibility (clist, column, visible)
    private native gtk_clist_set_column_resizeable (clist, column, resizeable)
    private native gtk_clist_set_column_auto_resize (clist, column, auto_resize)
    private native gtk_clist_columns_autosize (clist)
    private native gtk_clist_optimal_column_width (clist, column)
    private native gtk_clist_set_column_width (clist, column, width)
    private native gtk_clist_set_column_min_width (clist, column, min_width)
    private native gtk_clist_set_column_max_width (clist, column, max_width)
    private native gtk_clist_set_row_height (clist, height)
    private native gtk_clist_moveto (clist, row, column, row_align, col_align)
    private native gtk_clist_row_is_visible (clist, row)
    private native gtk_clist_get_cell_type (clist, row, column)
    private native gtk_clist_set_text (clist, row, column, text)
    private native gtk_clist_get_text (clist, row, column, var text)
    private native gtk_clist_set_pixmap (clist, row, column, pixmap, mask)
    private native gtk_clist_get_pixmap (clist, row, column, var pixmap, var mask)
    private native gtk_clist_set_pixtext (clist, row, column, text, spacing, pixmap, mask)
    private native gtk_clist_get_pixtext (clist, row, column, var text, var spacing, var pixmap, var mask)
    private native gtk_clist_set_foreground (clist, row, color)
    private native gtk_clist_set_background (clist, row, color)
    private native gtk_clist_set_cell_style (clist, row, column, style)
    private native gtk_clist_get_cell_style (clist, row, column)
    private native gtk_clist_set_row_style (clist, row, style)
    private native gtk_clist_get_row_style (clist, row)
    private native gtk_clist_set_shift (clist, row, column, vertical, horizontal)
    private native gtk_clist_set_selectable (clist, row, selectable)
    private native gtk_clist_get_selectable (clist, row)
    private native gtk_clist_prepend (clist, text)
    private native gtk_clist_append (clist, text)
    private native gtk_clist_insert (clist, row, text)
    private native gtk_clist_remove (clist, row)
    private native gtk_clist_set_row_data (clist, row, data)
    private native gtk_clist_set_row_data_full (clist, row, data, destroy)
    private native gtk_clist_get_row_data (clist, row)
    private native gtk_clist_find_row_from_data (clist, data)
    private native gtk_clist_select_row (clist, row, column)
    private native gtk_clist_unselect_row (clist, row, column)
    private native gtk_clist_undo_selection (clist)
    private native gtk_clist_clear (clist)
    private native gtk_clist_get_selection_info (clist, x, y, row, column)
    private native gtk_clist_select_all (clist)
    private native gtk_clist_unselect_all (clist)
    private native gtk_clist_swap_rows (clist, row1, row2)
    private native gtk_clist_row_move (clist, source_row, dest_row)
    private native gtk_clist_set_compare_func (clist, cmp_func)
    private native gtk_clist_set_sort_column (clist, column)
    private native gtk_clist_set_sort_type (clist, sort_type)
    private native gtk_clist_sort (clist)
    private native gtk_clist_set_auto_sort (clist, auto_sort)
    private native gtk_color_selection_get_type ()
    private native gtk_color_selection_new ()
    private native gtk_color_selection_set_update_policy (colorsel, policy)
    private native gtk_color_selection_set_opacity (colorsel, use_opacity)
    private native gtk_color_selection_set_color (colorsel, color)
    private native gtk_color_selection_get_color (colorsel, color)
    private native gtk_color_selection_dialog_get_type ()
    private native gtk_color_selection_dialog_new (title)
    private native gtk_combo_get_type ()
    private native gtk_combo_new ()
    private native gtk_combo_set_value_in_list (combo, val, ok_if_empty)
    private native gtk_combo_set_use_arrows (combo, val)
    private native gtk_combo_set_use_arrows_always (combo, val)
    private native gtk_combo_set_case_sensitive (combo, val)
    private native gtk_combo_set_item_string (combo, item, item_value)
    private native gtk_combo_set_popdown_strings (combo, strings)
    private native gtk_combo_disable_activate (combo)
    private native gtk_gc_get (depth, colormap, values, values_mask)
    private native gtk_gc_release (gc)
    private native gtk_container_get_type ()
    private native gtk_container_set_border_width (container, border_width)
    private native gtk_container_add (container, widget)
    private native gtk_container_remove (container, widget)
    private native gtk_container_set_resize_mode (container, resize_mode)
    private native gtk_container_check_resize (container)
    private native gtk_container_foreach (container, callback, callback_data)
    private native gtk_container_foreach_full (container, callback, marshal, callback_data, notify)
    private native gtk_container_children (container)
    private native gtk_container_focus (container, direction)
    private native gtk_container_set_reallocate_redraws (container, needs_redraws)
    private native gtk_container_set_focus_child (container, child)
    private native gtk_container_set_focus_vadjustment (container, adjustment)
    private native gtk_container_set_focus_hadjustment (container, adjustment)
    private native gtk_container_register_toplevel (container)
    private native gtk_container_unregister_toplevel (container)
    private native gtk_container_get_toplevels ()
    private native gtk_container_resize_children (container)
    private native gtk_container_child_type (container)
    private native gtk_container_add_child_arg_type (arg_name, arg_type, arg_flags, arg_id)
    private native gtk_container_query_child_args (class_type, arg_flags, nargs)
    private native gtk_container_child_getv (container, child, n_args, args)
    private native gtk_container_child_setv (container, child, n_args, args)
    private native gtk_container_add_with_args (container, widget, first_arg_name,... )
    private native gtk_container_addv (container, widget, n_args, args)
    private native gtk_container_child_set (container, child, first_arg_name,... )
    private native gtk_container_queue_resize (container)
    private native gtk_container_clear_resize_widgets (container)
    private native gtk_container_arg_set (container, child, arg, info)
    private native gtk_container_arg_get (container, child, arg, info)
    private native gtk_container_child_args_collect (object_type, arg_list_p, info_list_p, first_arg_name, args)
    private native gtk_container_child_arg_get_info (object_type, arg_name, info_p)
    private native gtk_container_forall (container, callback, callback_data)
    private native gtk_container_child_composite_name (container, child)
    private native gtk_container_dequeue_resize_handler (container)
    private native gtk_ctree_get_type ()
    private native gtk_ctree_construct (ctree, columns, tree_column, titles)
    private native gtk_ctree_new_with_titles (columns, tree_column, titles)
    private native gtk_ctree_new (columns, tree_column)
    private native gtk_ctree_insert_node (ctree, parent, sibling, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
    private native gtk_ctree_remove_node (ctree, node)
    private native gtk_ctree_insert_gnode (ctree, parent, sibling, gnode, func, data)
    private native gtk_ctree_export_to_gnode (ctree, parent, sibling, node, func, data)
    private native gtk_ctree_post_recursive (ctree, node, func, data)
    private native gtk_ctree_post_recursive_to_depth (ctree, node, depth, func, data)
    private native gtk_ctree_pre_recursive (ctree, node, func, data)
    private native gtk_ctree_pre_recursive_to_depth (ctree, node, depth, func, data)
    private native gtk_ctree_is_viewable (ctree, node)
    private native gtk_ctree_last (ctree, node)
    private native gtk_ctree_find_node_ptr (ctree, ctree_row)
    private native gtk_ctree_node_nth (ctree, row)
    private native gtk_ctree_find (ctree, node, child)
    private native gtk_ctree_is_ancestor (ctree, node, child)
    private native gtk_ctree_find_by_row_data (ctree, node, data)
    private native gtk_ctree_find_all_by_row_data (ctree, node, data)
    private native gtk_ctree_find_by_row_data_custom (ctree, node, data, func)
    private native gtk_ctree_find_all_by_row_data_custom (ctree, node, data, func)
    private native gtk_ctree_is_hot_spot (ctree, x, y)
    private native gtk_ctree_move (ctree, node, new_parent, new_sibling)
    private native gtk_ctree_expand (ctree, node)
    private native gtk_ctree_expand_recursive (ctree, node)
    private native gtk_ctree_expand_to_depth (ctree, node, depth)
    private native gtk_ctree_collapse (ctree, node)
    private native gtk_ctree_collapse_recursive (ctree, node)
    private native gtk_ctree_collapse_to_depth (ctree, node, depth)
    private native gtk_ctree_toggle_expansion (ctree, node)
    private native gtk_ctree_toggle_expansion_recursive (ctree, node)
    private native gtk_ctree_select (ctree, node)
    private native gtk_ctree_select_recursive (ctree, node)
    private native gtk_ctree_unselect (ctree, node)
    private native gtk_ctree_unselect_recursive (ctree, node)
    private native gtk_ctree_real_select_recursive (ctree, node, state)
    private native gtk_ctree_node_set_text (ctree, node, column, text)
    private native gtk_ctree_node_set_pixmap (ctree, node, column, pixmap, mask)
    private native gtk_ctree_node_set_pixtext (ctree, node, column, text, spacing, pixmap, mask)
    private native gtk_ctree_set_node_info (ctree, node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
    private native gtk_ctree_node_set_shift (ctree, node, column, vertical, horizontal)
    private native gtk_ctree_node_set_selectable (ctree, node, selectable)
    private native gtk_ctree_node_get_selectable (ctree, node)
    private native gtk_ctree_node_get_cell_type (ctree, node, column)
    private native gtk_ctree_node_get_text (ctree, node, column, text)
    private native gtk_ctree_node_get_pixmap (ctree, node, column, pixmap, mask)
    private native gtk_ctree_node_get_pixtext (ctree, node, column, text, spacing, pixmap, mask)
    private native gtk_ctree_get_node_info (ctree, node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
    private native gtk_ctree_node_set_row_style (ctree, node, style)
    private native gtk_ctree_node_get_row_style (ctree, node)
    private native gtk_ctree_node_set_cell_style (ctree, node, column, style)
    private native gtk_ctree_node_get_cell_style (ctree, node, column)
    private native gtk_ctree_node_set_foreground (ctree, node, color)
    private native gtk_ctree_node_set_background (ctree, node, color)
    private native gtk_ctree_node_set_row_data (ctree, node, data)
    private native gtk_ctree_node_set_row_data_full (ctree, node, data, destroy)
    private native gtk_ctree_node_get_row_data (ctree, node)
    private native gtk_ctree_node_moveto (ctree, node, column, row_align, col_align)
    private native gtk_ctree_node_is_visible (ctree, node)
    private native gtk_ctree_set_indent (ctree, indent)
    private native gtk_ctree_set_spacing (ctree, spacing)
    private native gtk_ctree_set_show_stub (ctree, show_stub)
    private native gtk_ctree_set_line_style (ctree, line_style)
    private native gtk_ctree_set_expander_style (ctree, expander_style)
    private native gtk_ctree_set_drag_compare_func (ctree, cmp_func)
    private native gtk_ctree_sort_node (ctree, node)
    private native gtk_ctree_sort_recursive (ctree, node)
    private native gtk_curve_get_type ()
    private native gtk_curve_new ()
    private native gtk_curve_reset (curve)
    private native gtk_curve_set_gamma (curve, gamma)
    private native gtk_curve_set_range (curve, min_x, max_x, min_y, max_y)
    private native gtk_curve_get_vector (curve, veclen, vector)
    private native gtk_curve_set_vector (curve, veclen, vector)
    private native gtk_curve_set_curve_type (curve, type)
    private native gtk_data_get_type ()
    private native gtk_dialog_get_type ()
    private native gtk_dialog_new ()
    private native gtk_drag_get_data (widget, context, target, time)
    private native gtk_drag_finish (context, success, del, time)
    private native gtk_drag_get_source_widget (context)
    private native gtk_drag_highlight (widget)
    private native gtk_drag_unhighlight (widget)
    private native gtk_drag_dest_set (widget, flags, targets, n_targets, actions)
    private native gtk_drag_dest_set_proxy (widget, proxy_window, protocol, use_coordinates)
    private native gtk_drag_dest_unset (widget)
    private native gtk_drag_source_set (widget, start_button_mask, targets, n_targets, actions)
    private native gtk_drag_source_unset (widget)
    private native gtk_drag_source_set_icon (widget, colormap, pixmap, mask)
    private native gtk_drag_begin (widget, targets, actions, button, event)
    private native gtk_drag_set_icon_widget (context, widget, hot_x, hot_y)
    private native gtk_drag_set_icon_pixmap (context, colormap, pixmap, mask, hot_x, hot_y)
    private native gtk_drag_set_icon_default (context)
    private native gtk_drag_set_default_icon (colormap, pixmap, mask, hot_x, hot_y)
    private native gtk_drag_source_handle_event (widget, event)
    private native gtk_drag_dest_handle_event (toplevel, event)
    private native gtk_drawing_area_get_type ()
    private native gtk_drawing_area_new ()
    private native gtk_drawing_area_size (darea, width, height)
    private native gtk_editable_get_type ()
    private native gtk_editable_select_region (editable, start, end)
    private native gtk_editable_insert_text (editable, new_text, new_text_length, position)
    private native gtk_editable_delete_text (editable, start_pos, end_pos)
    private native gtk_editable_get_chars (editable, start_pos, end_pos)
    private native gtk_editable_cut_clipboard (editable)
    private native gtk_editable_copy_clipboard (editable)
    private native gtk_editable_paste_clipboard (editable)
    private native gtk_editable_claim_selection (editable, claim, time)
    private native gtk_editable_delete_selection (editable)
    private native gtk_editable_changed (editable)
    private native gtk_editable_set_position (editable, position)
    private native gtk_editable_get_position (editable)
    private native gtk_editable_set_editable (editable, is_editable)
    private native gtk_entry_get_type ()
    private native gtk_entry_new ()
    private native gtk_entry_new_with_max_length (max)
    private native gtk_entry_set_text (entry, text)
    private native gtk_entry_append_text (entry, text)
    private native gtk_entry_prepend_text (entry, text)
    private native gtk_entry_set_position (entry, position)
    private native gtk_entry_get_text (entry)
    private native gtk_entry_select_region (entry, start, end)
    private native gtk_entry_set_visibility (entry, visible)
    private native gtk_entry_set_editable (entry, editable)
    private native gtk_entry_set_max_length (entry, max)
    private native gtk_event_box_get_type ()
    private native gtk_event_box_new ()
    private native gtk_file_selection_get_type ()
    private native gtk_file_selection_new (title)
    private native gtk_file_selection_set_filename (filesel, filename)
    private native gtk_file_selection_get_filename (filesel)
    private native gtk_file_selection_complete (filesel, pattern)
    private native gtk_file_selection_show_fileop_buttons (filesel)
    private native gtk_file_selection_hide_fileop_buttons (filesel)
    private native gtk_fixed_get_type ()
    private native gtk_fixed_new ()
    private native gtk_fixed_put (fixed, widget, x, y)
    private native gtk_fixed_move (fixed, widget, x, y)
    private native gtk_font_selection_get_type ()
    private native gtk_font_selection_new ()
    private native gtk_font_selection_get_font_name (fontsel)
    private native gtk_font_selection_get_font (fontsel)
    private native gtk_font_selection_set_font_name (fontsel, fontname)
    private native gtk_font_selection_set_filter (fontsel, filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets)
    private native gtk_font_selection_get_preview_text (fontsel)
    private native gtk_font_selection_set_preview_text (fontsel, text)
    private native gtk_font_selection_dialog_get_type ()
    private native gtk_font_selection_dialog_new (title)
    private native gtk_font_selection_dialog_get_font_name (fsd)
    private native gtk_font_selection_dialog_get_font (fsd)
    private native gtk_font_selection_dialog_set_font_name (fsd, fontname)
    private native gtk_font_selection_dialog_set_filter (fsd, filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets)
    private native gtk_font_selection_dialog_get_preview_text (fsd)
    private native gtk_font_selection_dialog_set_preview_text (fsd, text)
    private native gtk_frame_get_type ()
    private native gtk_frame_new (label)
    private native gtk_frame_set_label (frame, label)
    private native gtk_frame_set_label_align (frame, xalign, yalign)
    private native gtk_frame_set_shadow_type (frame, type)
    private native gtk_gamma_curve_get_type ()
    private native gtk_gamma_curve_new ()
    private native gtk_handle_box_get_type ()
    private native gtk_handle_box_new ()
    private native gtk_handle_box_set_shadow_type (handle_box, type)
    private native gtk_handle_box_set_handle_position (handle_box, position)
    private native gtk_handle_box_set_snap_edge (handle_box, edge)
    private native gtk_hbutton_box_get_type ()
    private native gtk_hbutton_box_new ()
    private native gtk_hbutton_box_get_spacing_default()
    private native gtk_hbutton_box_get_layout_default()
    private native gtk_hbutton_box_set_spacing_default (object, spacing)
    private native gtk_hbutton_box_set_layout_default (object, layout)
    private native gtk_hbox_get_type ()
    private native gtk_hbox_new (homogeneous, spacing)
    private native gtk_hpaned_get_type ()
    private native gtk_hpaned_new ()
    private native gtk_hruler_get_type ()
    private native gtk_hruler_new ()
    private native gtk_rc_init ()
    private native gtk_rc_add_default_file (filename)
    private native gtk_rc_set_default_files (filenames)
    private native gtk_rc_get_default_files ()
    private native gtk_rc_parse (filename)
    private native gtk_rc_parse_string (rc_string)
    private native gtk_rc_reparse_all ()
    private native gtk_rc_get_style (widget)
    private native gtk_rc_add_widget_name_style (rc_style, pattern)
    private native gtk_rc_add_widget_class_style (rc_style, pattern)
    private native gtk_rc_add_class_style (rc_style, pattern)
    private native gtk_rc_style_new ()
    private native gtk_rc_style_ref (rc_style)
    private native gtk_rc_style_unref (rc_style)
    private native gtk_rc_set_image_loader (loader)
    private native gtk_rc_load_image (colormap, transparent_color, filename)
    private native gtk_rc_find_pixmap_in_path (scanner, pixmap_file)
    private native gtk_rc_find_module_in_path (module_file)
    private native gtk_rc_get_theme_dir ()
    private native gtk_rc_get_module_dir ()
    private native gtk_rc_parse_color (scanner, color)
    private native gtk_rc_parse_state (scanner, state)
    private native gtk_rc_parse_priority (scanner, priority)
    private native gtk_hscale_get_type ()
    private native gtk_hscale_new (adjustment)
    private native gtk_hscrollbar_get_type ()
    private native gtk_hscrollbar_new (adjustment)
    private native gtk_hseparator_get_type ()
    private native gtk_hseparator_new ()
    private native gtk_image_get_type ()
    private native gtk_image_new (val, mask)
    private native gtk_image_set (image, val, mask)
    private native gtk_image_get (image, val, mask)
    private native gtk_input_dialog_get_type ()
    private native gtk_input_dialog_new ()
    private native gtk_invisible_get_type ()
    private native gtk_invisible_new ()
    private native gtk_item_get_type ()
    private native gtk_item_select (item)
    private native gtk_item_deselect (item)
    private native gtk_item_toggle (item)
    private native gtk_item_factory_get_type ()
    private native gtk_item_factory_new (container_type, path, accel_group)
    private native gtk_item_factory_construct (ifactory, container_type, path, accel_group)
    private native gtk_item_factory_parse_rc (file_name)
    private native gtk_item_factory_parse_rc_string (rc_string)
    private native gtk_item_factory_parse_rc_scanner (scanner)
    private native gtk_item_factory_add_foreign (accel_widget, full_path, accel_group, keyval, modifiers)
    private native gtk_item_factory_from_widget (widget)
    private native gtk_item_factory_path_from_widget (widget)
    private native gtk_item_factory_get_item (ifactory, path)
    private native gtk_item_factory_get_widget (ifactory, path)
    private native gtk_item_factory_get_widget_by_action (ifactory, action)
    private native gtk_item_factory_get_item_by_action (ifactory, action)
    private native gtk_item_factory_dump_items (path_pspec, modified_only, print_func, func_data)
    private native gtk_item_factory_dump_rc (file_name, path_pspec, modified_only)
    private native gtk_item_factory_print_func (FILE_pointer, string)
    private native gtk_item_factory_create_item (ifactory, entry, callback_data, callback_type)
    private native gtk_item_factory_create_items (ifactory, n_entries, entries, callback_data)
    private native gtk_item_factory_delete_item (ifactory, path)
    private native gtk_item_factory_delete_entry (ifactory, entry)
    private native gtk_item_factory_delete_entries (ifactory, n_entries, entries)
    private native gtk_item_factory_popup (ifactory, x, y, mouse_button, time)
    private native gtk_item_factory_popup_with_data (ifactory, popup_data, destroy, x, y, mouse_button, time)
    private native gtk_item_factory_popup_data (ifactory)
    private native gtk_item_factory_popup_data_from_widget (widget)
    private native gtk_item_factory_set_translate_func (ifactory, func, data, notify)
    private native gtk_item_factory_from_path (path)
    private native gtk_item_factory_create_menu_entries (n_entries, entries)
    private native gtk_item_factories_path_delete (ifactory_path, path)
    private native gtk_item_factory_create_items_ac (ifactory, n_entries, entries, callback_data, callback_type)
    private native gtk_label_get_type ()
    private native gtk_label_new (str)
    private native gtk_label_set_text (label, str)
    private native gtk_label_set_justify (label, jtype)
    private native gtk_label_set_pattern (label, pattern)
    private native gtk_label_set_line_wrap (label, wrap)
    private native gtk_label_get (label, var str)
    private native gtk_label_parse_uline (label, string)
    private native gtk_layout_get_type ()
    private native gtk_layout_new (hadjustment, vadjustment)
    private native gtk_layout_put (layout, widget, x, y)
    private native gtk_layout_move (layout, widget, x, y)
    private native gtk_layout_set_size (layout, width, height)
    private native gtk_layout_get_hadjustment (layout)
    private native gtk_layout_get_vadjustment (layout)
    private native gtk_layout_set_hadjustment (layout, adjustment)
    private native gtk_layout_set_vadjustment (layout, adjustment)
    private native gtk_layout_freeze (layout)
    private native gtk_layout_thaw (layout)
    private native gtk_list_get_type ()
    private native gtk_list_new ()
    private native gtk_list_insert_items (list, items, position)
    private native gtk_list_append_items (list, items)
    private native gtk_list_prepend_items (list, items)
    private native gtk_list_remove_items (list, items)
    private native gtk_list_remove_items_no_unref (list, items)
    private native gtk_list_clear_items (list, start, end)
    private native gtk_list_select_item (list, item)
    private native gtk_list_unselect_item (list, item)
    private native gtk_list_select_child (list, child)
    private native gtk_list_unselect_child (list, child)
    private native gtk_list_child_position (list, child)
    private native gtk_list_set_selection_mode (list, mode)
    private native gtk_list_extend_selection (list, scroll_type, position, auto_start_selection)
    private native gtk_list_start_selection (list)
    private native gtk_list_end_selection (list)
    private native gtk_list_select_all (list)
    private native gtk_list_unselect_all (list)
    private native gtk_list_scroll_horizontal (list, scroll_type, position)
    private native gtk_list_scroll_vertical (list, scroll_type, position)
    private native gtk_list_toggle_add_mode (list)
    private native gtk_list_toggle_focus_row (list)
    private native gtk_list_toggle_row (list, item)
    private native gtk_list_undo_selection (list)
    private native gtk_list_end_drag_selection (list)
    private native gtk_list_item_get_type ()
    private native gtk_list_item_new ()
    private native gtk_list_item_new_with_label (label)
    private native gtk_list_item_select (list_item)
    private native gtk_list_item_deselect (list_item)
    private native gtk_check_version (required_major, required_minor, required_micro)
    private native gtk_init (argc, argv)
    private native gtk_init_check (argc, argv)
    private native gtk_exit (error_code)
    private native gtk_set_locale ()
    private native gtk_events_pending ()
    private native gtk_main_do_event (event)
    private native gtk_main ()
    private native gtk_main_level ()
    private native gtk_main_quit ()
    private native gtk_main_iteration ()
    private native gtk_main_iteration_do (blocking)
    private native gtk_true ()
    private native gtk_false ()
    private native gtk_grab_add (widget)
    private native gtk_grab_get_current ()
    private native gtk_grab_remove (widget)
    private native gtk_init_add (func, data)
    private native gtk_quit_add_destroy (main_level, object)
    private native gtk_quit_add (main_level, func, data)
    private native gtk_quit_add_full (main_level, func, marshal, data, destroy)
    private native gtk_quit_remove (quit_handler_id)
    private native gtk_quit_remove_by_data (data)
    private native gtk_timeout_add (interval, func, data)
    private native gtk_timeout_add_full (interval, func, marshal, data, destroy)
    private native gtk_timeout_remove (timeout_handler_id)
    private native gtk_idle_add (func, data)
    private native gtk_idle_add_priority (priority, func, data)
    private native gtk_idle_add_full (priority, func, marshal, data, destroy)
    private native gtk_idle_remove (idle_handler_id)
    private native gtk_idle_remove_by_data (data)
    private native gtk_input_add_full (source, condition, func, marshal, data, destroy)
    private native gtk_input_remove (input_handler_id)
    private native gtk_key_snooper_install (snooper, func_data)
    private native gtk_key_snooper_remove (snooper_handler_id)
    private native gtk_get_current_event ()
    private native gtk_get_event_widget (event)
    private native gtk_propagate_event (widget, event)
    private native gtk_menu_get_type ()
    private native gtk_menu_new ()
    private native gtk_menu_append (menu, child)
    private native gtk_menu_prepend (menu, child)
    private native gtk_menu_insert (menu, child, position)
    private native gtk_menu_popup (menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time)
    private native gtk_menu_reposition (menu)
    private native gtk_menu_popdown (menu)
    private native gtk_menu_get_active (menu)
    private native gtk_menu_set_active (menu, index)
    private native gtk_menu_set_accel_group (menu, accel_group)
    private native gtk_menu_get_accel_group (menu)
    private native gtk_menu_get_uline_accel_group (menu)
    private native gtk_menu_ensure_uline_accel_group (menu)
    private native gtk_menu_attach_to_widget (menu, attach_widget, detacher)
    private native gtk_menu_detach (menu)
    private native gtk_menu_get_attach_widget (menu)
    private native gtk_menu_set_tearoff_state (menu, torn_off)
    private native gtk_menu_set_title (menu, title)
    private native gtk_menu_reorder_child (menu, child, position)
    private native gtk_menu_bar_get_type ()
    private native gtk_menu_bar_new ()
    private native gtk_menu_bar_append (menu_bar, child)
    private native gtk_menu_bar_prepend (menu_bar, child)
    private native gtk_menu_bar_insert (menu_bar, child, position)
    private native gtk_menu_bar_set_shadow_type (menu_bar, type)
    private native gtk_menu_factory_new (type)
    private native gtk_menu_factory_destroy (factory)
    private native gtk_menu_factory_add_entries (factory, entries, nentries)
    private native gtk_menu_factory_add_subfactory (factory, subfactory, path)
    private native gtk_menu_factory_remove_paths (factory, paths, npaths)
    private native gtk_menu_factory_remove_entries (factory, entries, nentries)
    private native gtk_menu_factory_remove_subfactory (factory, subfactory, path)
    private native gtk_menu_factory_find (factory, path)
    private native gtk_menu_item_get_type ()
    private native gtk_menu_item_new ()
    private native gtk_menu_item_new_with_label (label)
    private native gtk_menu_item_set_submenu (menu_item, submenu)
    private native gtk_menu_item_remove_submenu (menu_item)
    private native gtk_menu_item_set_placement (menu_item, placement)
    private native gtk_menu_item_configure (menu_item, show_toggle_indicator, show_submenu_indicator)
    private native gtk_menu_item_select (menu_item)
    private native gtk_menu_item_deselect (menu_item)
    private native gtk_menu_item_activate (menu_item)
    private native gtk_menu_item_right_justify (menu_item)
    private native gtk_menu_shell_get_type ()
    private native gtk_menu_shell_append (menu_shell, child)
    private native gtk_menu_shell_prepend (menu_shell, child)
    private native gtk_menu_shell_insert (menu_shell, child, position)
    private native gtk_menu_shell_deactivate (menu_shell)
    private native gtk_menu_shell_select_item (menu_shell, menu_item)
    private native gtk_menu_shell_deselect (menu_shell)
    private native gtk_menu_shell_activate_item (menu_shell, menu_item, force_deactivate)
    private native gtk_misc_get_type ()
    private native gtk_misc_set_alignment (misc, xalign, yalign)
    private native gtk_misc_set_padding (misc, xpad, ypad)
    private native gtk_notebook_get_type ()
    private native gtk_notebook_new ()
    private native gtk_notebook_append_page (notebook, child, tab_label)
    private native gtk_notebook_append_page_menu (notebook, child, tab_label, menu_label)
    private native gtk_notebook_prepend_page (notebook, child, tab_label)
    private native gtk_notebook_prepend_page_menu (notebook, child, tab_label, menu_label)
    private native gtk_notebook_insert_page (notebook, child, tab_label, position)
    private native gtk_notebook_insert_page_menu (notebook, child, tab_label, menu_label, position)
    private native gtk_notebook_remove_page (notebook, page_num)
    private native gtk_notebook_get_current_page (notebook)
    private native gtk_notebook_get_nth_page (notebook, page_num)
    private native gtk_notebook_page_num (notebook, child)
    private native gtk_notebook_set_page (notebook, page_num)
    private native gtk_notebook_next_page (notebook)
    private native gtk_notebook_prev_page (notebook)
    private native gtk_notebook_set_show_border (notebook, show_border)
    private native gtk_notebook_set_show_tabs (notebook, show_tabs)
    private native gtk_notebook_set_tab_pos (notebook, pos)
    private native gtk_notebook_set_homogeneous_tabs (notebook, homogeneous)
    private native gtk_notebook_set_tab_border (notebook, border_width)
    private native gtk_notebook_set_tab_hborder (notebook, tab_hborder)
    private native gtk_notebook_set_tab_vborder (notebook, tab_vborder)
    private native gtk_notebook_set_scrollable (notebook, scrollable)
    private native gtk_notebook_popup_enable (notebook)
    private native gtk_notebook_popup_disable (notebook)
    private native gtk_notebook_get_tab_label (notebook, child)
    private native gtk_notebook_set_tab_label (notebook, child, tab_label)
    private native gtk_notebook_set_tab_label_text (notebook, child, tab_text)
    private native gtk_notebook_get_menu_label (notebook, child)
    private native gtk_notebook_set_menu_label (notebook, child, menu_label)
    private native gtk_notebook_set_menu_label_text (notebook, child, menu_text)
    private native gtk_notebook_query_tab_label_packing (notebook, child, expand, fill, pack_type)
    private native gtk_notebook_set_tab_label_packing (notebook, child, expand, fill, pack_type)
    private native gtk_notebook_reorder_child (notebook, child, position)
    private native gtk_type_check_object_cast ()
    private native gtk_type_check_class_cast ()
    private native gtk_object_get_type ()
    private native gtk_object_class_user_signal_new (klass, name, signal_flags, marshaller, return_val, nparams, ...)
    private native gtk_object_class_user_signal_newv (klass, name, signal_flags, marshaller, return_val, nparams, params)
    private native gtk_object_new (type, first_arg_name,... )
    private native gtk_object_newv (object_type, n_args, args)
    private native gtk_object_default_construct (object)
    private native gtk_object_constructed (object)
    private native gtk_object_sink (object)
    private native gtk_object_ref (object)
    private native gtk_object_unref (object)
    private native gtk_object_weakref (object, notify, data)
    private native gtk_object_weakunref (object, notify, data)
    private native gtk_object_destroy (object)
    private native gtk_object_getv (object, n_args, args)
    private native gtk_object_get (object, first_arg_name,... )
    private native gtk_object_set (object, first_arg_name,... )
    private native gtk_object_setv (object, n_args, args)
    private native gtk_object_query_args (class_type, arg_flags, n_args)
    private native gtk_object_set_data (object, key, data)
    private native gtk_object_set_data_full (object, key, data, destroy)
    private native gtk_object_remove_data (object, key)
    private native gtk_object_get_data (object, key)
    private native gtk_object_remove_no_notify (object, key)
    private native gtk_object_set_user_data (object, data)
    private native gtk_object_get_user_data (object)
    private native gtk_object_class_add_signals (klass, signals, nsignals)
    private native gtk_object_add_arg_type (arg_name, arg_type, arg_flags, arg_id)
    private native gtk_object_set_data_by_id (object, data_id, data)
    private native gtk_object_set_data_by_id_full (object, data_id, data, destroy)
    private native gtk_object_get_data_by_id (object, data_id)
    private native gtk_object_remove_data_by_id (object, data_id)
    private native gtk_object_remove_no_notify_by_id (object, key_id)
    private native gtk_object_arg_set (object, arg, info)
    private native gtk_object_arg_get (object, arg, info)
    private native gtk_object_args_collect (object_type, arg_list_p, info_list_p, first_arg_name, var_args)
    private native gtk_object_arg_get_info (object_type, arg_name, info_p)
    private native gtk_trace_referencing (object, func, dummy, line, do_ref)
    private native gtk_option_menu_get_type ()
    private native gtk_option_menu_new ()
    private native gtk_option_menu_get_menu (option_menu)
    private native gtk_option_menu_set_menu (option_menu, menu)
    private native gtk_option_menu_remove_menu (option_menu)
    private native gtk_option_menu_set_history (option_menu, index)
    private native gtk_packer_get_type ()
    private native gtk_packer_new ()
    private native gtk_packer_add_defaults (packer, child, side, anchor, options)
    private native gtk_packer_add (packer, child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y)
    private native gtk_packer_set_child_packing (packer, child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y)
    private native gtk_packer_reorder_child (packer, child, position)
    private native gtk_packer_set_spacing (packer, spacing)
    private native gtk_packer_set_default_border_width (packer, border)
    private native gtk_packer_set_default_pad (packer, pad_x, pad_y)
    private native gtk_packer_set_default_ipad (packer, i_pad_x, i_pad_y)
    private native gtk_paned_get_type ()
    private native gtk_paned_add1 (paned, child)
    private native gtk_paned_add2 (paned, child)
    private native gtk_paned_pack1 (paned, child, resize, shrink)
    private native gtk_paned_pack2 (paned, child, resize, shrink)
    private native gtk_paned_set_position (paned, position)
    private native gtk_paned_set_handle_size (paned, size)
    private native gtk_paned_set_gutter_size (paned, size)
    private native gtk_paned_compute_position (paned, allocation, child1_req, child2_req)
    private native gtk_pixmap_get_type ()
    private native gtk_pixmap_new (pixmap, mask)
    private native gtk_pixmap_set (pixmap, val, mask)
    private native gtk_pixmap_get (pixmap, val, mask)
    private native gtk_pixmap_set_build_insensitive (pixmap, build)
    private native gtk_plug_get_type ()
    private native gtk_plug_construct (plug, socket_id)
    private native gtk_plug_new (socket_id)
    private native gtk_preview_get_type ()
    private native gtk_preview_uninit ()
    private native gtk_preview_new (type)
    private native gtk_preview_size (preview, width, height)
    private native gtk_preview_put (preview, window, gc, srcx, srcy, destx, desty, width, height)
    private native gtk_preview_draw_row (preview, data, x, y, w)
    private native gtk_preview_set_expand (preview, expand)
    private native gtk_preview_set_gamma (gamma)
    private native gtk_preview_set_color_cube (nred_shades, ngreen_shades, nblue_shades, ngray_shades)
    private native gtk_preview_set_install_cmap (install_cmap)
    private native gtk_preview_set_reserved (nreserved)
    private native gtk_preview_set_dither (preview, dither)
    private native gtk_preview_get_visual ()
    private native gtk_preview_get_cmap ()
    private native gtk_preview_get_info ()
    private native gtk_preview_reset ()
    private native gtk_progress_get_type ()
    private native gtk_progress_set_show_text (progress, show_text)
    private native gtk_progress_set_text_alignment (progress, x_align, y_align)
    private native gtk_progress_set_format_string (progress, format)
    private native gtk_progress_set_adjustment (progress, adjustment)
    private native gtk_progress_configure (progress, value, min, max)
    private native gtk_progress_set_percentage (progress, percentage)
    private native gtk_progress_set_value (progress, value)
    private native gtk_progress_get_value (progress)
    private native gtk_progress_set_activity_mode (progress, activity_mode)
    private native gtk_progress_get_current_text (progress)
    private native gtk_progress_get_text_from_value (progress, value)
    private native gtk_progress_get_current_percentage (progress)
    private native gtk_progress_get_percentage_from_value (progress, value)
    private native gtk_progress_bar_get_type ()
    private native gtk_progress_bar_new ()
    private native gtk_progress_bar_new_with_adjustment (adjustment)
    private native gtk_progress_bar_set_bar_style (pbar, style)
    private native gtk_progress_bar_set_discrete_blocks (pbar, blocks)
    private native gtk_progress_bar_set_activity_step (pbar, step)
    private native gtk_progress_bar_set_activity_blocks (pbar, blocks)
    private native gtk_progress_bar_set_orientation (pbar, orientation)
    private native gtk_progress_bar_update (pbar, percentage)
    private native gtk_radio_button_get_type ()
    private native gtk_radio_button_new (group)
    private native gtk_radio_button_new_from_widget (group)
    private native gtk_radio_button_new_with_label (group, label)
    private native gtk_radio_button_new_with_label_from_widget (group, label)
    private native gtk_radio_button_group (radio_button)
    private native gtk_radio_button_set_group (radio_button, group)
    private native gtk_radio_menu_item_get_type ()
    private native gtk_radio_menu_item_new (group)
    private native gtk_radio_menu_item_new_with_label (group, label)
    private native gtk_radio_menu_item_group (radio_menu_item)
    private native gtk_radio_menu_item_set_group (radio_menu_item, group)
    private native gtk_range_get_type ()
    private native gtk_range_get_adjustment (range)
    private native gtk_range_set_update_policy (range, policy)
    private native gtk_range_set_adjustment (range, adjustment)
    private native gtk_range_draw_background (range)
    private native gtk_range_clear_background (range)
    private native gtk_range_draw_trough (range)
    private native gtk_range_draw_slider (range)
    private native gtk_range_draw_step_forw (range)
    private native gtk_range_draw_step_back (range)
    private native gtk_range_slider_update (range)
    private native gtk_range_trough_click (range, x, y, jump_perc)
    private native gtk_range_default_hslider_update (range)
    private native gtk_range_default_vslider_update (range)
    private native gtk_range_default_htrough_click (range, x, y, jump_perc)
    private native gtk_range_default_vtrough_click (range, x, y, jump_perc)
    private native gtk_range_default_hmotion (range, xdelta, ydelta)
    private native gtk_range_default_vmotion (range, xdelta, ydelta)
    private native gtk_ruler_get_type ()
    private native gtk_ruler_set_metric (ruler, metric)
    private native gtk_ruler_set_range (ruler, lower, upper, position, max_size)
    private native gtk_ruler_draw_ticks (ruler)
    private native gtk_ruler_draw_pos (ruler)
    private native gtk_scale_get_type ()
    private native gtk_scale_set_digits (scale, digits)
    private native gtk_scale_set_draw_value (scale, draw_value)
    private native gtk_scale_set_value_pos (scale, pos)
    private native gtk_scale_get_value_width (scale)
    private native gtk_scale_draw_value (scale)
    private native gtk_scrollbar_get_type ()
    private native gtk_scrolled_window_get_type ()
    private native gtk_scrolled_window_new (hadjustment, vadjustment)
    private native gtk_scrolled_window_set_hadjustment (scrolled_window, hadjustment)
    private native gtk_scrolled_window_set_vadjustment (scrolled_window, hadjustment)
    private native gtk_scrolled_window_get_hadjustment (scrolled_window)
    private native gtk_scrolled_window_get_vadjustment (scrolled_window)
    private native gtk_scrolled_window_set_policy (scrolled_window, hscrollbar_policy, vscrollbar_policy)
    private native gtk_scrolled_window_set_placement (scrolled_window, window_placement)
    private native gtk_scrolled_window_add_with_viewport (scrolled_window, child)
    private native gtk_target_list_new (targets, ntargets)
    private native gtk_target_list_ref (list)
    private native gtk_target_list_unref (list)
    private native gtk_target_list_add (list, target, flags, info)
    private native gtk_target_list_add_table (list, targets, ntargets)
    private native gtk_target_list_remove (list, target)
    private native gtk_target_list_find (list, target, info)
    private native gtk_selection_owner_set (widget, selection, time)
    private native gtk_selection_add_target (widget, selection, target, info)
    private native gtk_selection_add_targets (widget, selection, targets, ntargets)
    private native gtk_selection_convert (widget, selection, target, time)
    private native gtk_selection_data_set (selection_data, type, format, data, length)
    private native gtk_selection_remove_all (widget)
    private native gtk_selection_clear (widget, event)
    private native gtk_selection_request (widget, event)
    private native gtk_selection_incr_event (window, event)
    private native gtk_selection_notify (widget, event)
    private native gtk_selection_property_notify (widget, event)
    private native gtk_selection_data_copy (data)
    private native gtk_selection_data_free (data)
    private native gtk_separator_get_type ()
    private native gtk_signal_lookup (name, object_type)
    private native gtk_signal_name (signal_id)
    private native gtk_signal_n_emissions (object, signal_id)
    private native gtk_signal_n_emissions_by_name (object, name)
    private native gtk_signal_emit_stop (object, signal_id)
    private native gtk_signal_emit_stop_by_name (object, name)
    private native gtk_signal_connect (o, object, name, func, func_data)
    private native gtk_signal_connect_after (o, object, name, func, func_data)
    private native gtk_signal_connect_object (o, object, name, func, slot_object)
    private native gtk_signal_connect_object_after (o, object, name, func, slot_object)
    private native gtk_signal_connect_full (o, object, name, func, marshal, data, destroy_func, object_signal, after)
    private native gtk_signal_connect_object_while_alive (o, object, signal, func, alive_object)
    private native gtk_signal_connect_while_alive (o, object, signal, func, func_data, alive_object)
    private native gtk_signal_disconnect (o, object, handler_id)
    private native gtk_signal_disconnect_by_func (o, object, func, data)
    private native gtk_signal_disconnect_by_data (o, object, data)
    private native gtk_signal_handler_block (object, handler_id)
    private native gtk_signal_handler_block_by_func (object, func, data)
    private native gtk_signal_handler_block_by_data (object, data)
    private native gtk_signal_handler_unblock (object, handler_id)
    private native gtk_signal_handler_unblock_by_func (object, func, data)
    private native gtk_signal_handler_unblock_by_data (object, data)
    private native gtk_signal_handler_pending (object, signal_id, may_be_blocked)
    private native gtk_signal_handler_pending_by_func (object, signal_id, may_be_blocked, func, data)
    private native gtk_signal_handler_pending_by_id (object, handler_id, may_be_blocked)
    private native gtk_signal_add_emission_hook (signal_id, hook_func, data)
    private native gtk_signal_add_emission_hook_full (signal_id, hook_func, data, destroy)
    private native gtk_signal_remove_emission_hook (signal_id, hook_id)
    private native gtk_signal_query (signal_id)
    private native gtk_signal_init ()
    private native gtk_signal_new (name, signal_flags, object_type, function_offset, marshaller, return_val, nparams,... )
    private native gtk_signal_newv (name, signal_flags, object_type, function_offset, marshaller, return_val, nparams, params)
    private native gtk_signal_emit (object, signal_id,... )
    private native gtk_signal_emit_by_name (object, name,... )
    private native gtk_signal_emitv (object, signal_id, params)
    private native gtk_signal_emitv_by_name (object, name, params)
    private native gtk_signal_handlers_destroy (object)
    private native gtk_signal_set_funcs (marshal_func, destroy_func)
    private native gtk_socket_new ()
    private native gtk_socket_get_type ()
    private native gtk_socket_steal (socket, wid)
    private native gtk_spin_button_get_type ()
    private native gtk_spin_button_configure (spin_button, adjustment, climb_rate, digits)
    private native gtk_spin_button_new (adjustment, climb_rate, digits)
    private native gtk_spin_button_set_adjustment (spin_button, adjustment)
    private native gtk_spin_button_get_adjustment (spin_button)
    private native gtk_spin_button_set_digits (spin_button, digits)
    private native gtk_spin_button_get_value_as_float (spin_button)
    private native gtk_spin_button_get_value_as_int (spin_button)
    private native gtk_spin_button_set_value (spin_button, value)
    private native gtk_spin_button_set_update_policy (spin_button, policy)
    private native gtk_spin_button_set_numeric (spin_button, numeric)
    private native gtk_spin_button_spin (spin_button, direction, increment)
    private native gtk_spin_button_set_wrap (spin_button, wrap)
    private native gtk_spin_button_set_shadow_type (spin_button, shadow_type)
    private native gtk_spin_button_set_snap_to_ticks (spin_button, snap_to_ticks)
    private native gtk_spin_button_update (spin_button)
    private native gtk_style_new ()
    private native gtk_style_copy (style)
    private native gtk_style_attach (style, window)
    private native gtk_style_detach (style)
    private native gtk_style_ref (style)
    private native gtk_style_unref (style)
    private native gtk_style_set_background (style, window, state_type)
    private native gtk_style_apply_default_background (style, window, set_bg, state_type, area, x, y, width, height)
    private native gtk_draw_hline (style, window, state_type, x1, x2, y)
    private native gtk_draw_vline (style, window, state_type, y1, y2, x)
    private native gtk_draw_shadow (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_polygon (style, window, state_type, shadow_type, points, npoints, fill)
    private native gtk_draw_arrow (style, window, state_type, shadow_type, arrow_type, fill, x, y, width, height)
    private native gtk_draw_diamond (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_oval (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_string (style, window, state_type, x, y, string)
    private native gtk_draw_box (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_flat_box (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_check (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_option (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_cross (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_ramp (style, window, state_type, shadow_type, arrow_type, x, y, width, height)
    private native gtk_draw_tab (style, window, state_type, shadow_type, x, y, width, height)
    private native gtk_draw_shadow_gap (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)
    private native gtk_draw_box_gap (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)
    private native gtk_draw_extension (style, window, state_type, shadow_type, x, y, width, height, gap_side)
    private native gtk_draw_focus (style, window, x, y, width, height)
    private native gtk_draw_slider (style, window, state_type, shadow_type, x, y, width, height, orientation)
    private native gtk_draw_handle (style, window, state_type, shadow_type, x, y, width, height, orientation)
    private native gtk_paint_hline (style, window, state_type, area, widget, detail, x1, x2, y)
    private native gtk_paint_vline (style, window, state_type, area, widget, detail, y1, y2, x)
    private native gtk_paint_shadow (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_polygon (style, window, state_type, shadow_type, area, widget, detail, points, npoints, fill)
    private native gtk_paint_arrow (style, window, state_type, shadow_type, area, widget, detail, arrow_type, fill, x, y, width, height)
    private native gtk_paint_diamond (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_oval (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_string (style, window, state_type, area, widget, detail, x, y, string)
    private native gtk_paint_box (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_flat_box (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_check (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_option (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_cross (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_ramp (style, window, state_type, shadow_type, area, widget, detail, arrow_type, x, y, width, height)
    private native gtk_paint_tab (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    private native gtk_paint_shadow_gap (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width)
    private native gtk_paint_box_gap (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width)
    private native gtk_paint_extension (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side)
    private native gtk_paint_focus (style, window, area, widget, detail, x, y, width, height)
    private native gtk_paint_slider (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation)
    private native gtk_paint_handle (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation)
    private native gtk_statusbar_get_type ()
    private native gtk_statusbar_new ()
    private native gtk_statusbar_get_context_id (statusbar, context_description)
    private native gtk_statusbar_push (statusbar, context_id, text)
    private native gtk_statusbar_pop (statusbar, context_id)
    private native gtk_statusbar_remove (statusbar, context_id, message_id)
    private native gtk_table_get_type ()
    private native gtk_table_new (rows, columns, homogeneous)
    private native gtk_table_resize (table, rows, columns)
    private native gtk_table_attach (table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding)
    private native gtk_table_attach_defaults (table, widget, left_attach, right_attach, top_attach, bottom_attach)
    private native gtk_table_set_row_spacing (table, row, spacing)
    private native gtk_table_set_col_spacing (table, column, spacing)
    private native gtk_table_set_row_spacings (table, spacing)
    private native gtk_table_set_col_spacings (table, spacing)
    private native gtk_table_set_homogeneous (table, homogeneous)
    private native gtk_tearoff_menu_item_get_type ()
    private native gtk_tearoff_menu_item_new ()
    private native gtk_text_get_type ()
    private native gtk_text_new (hadj, vadj)
    private native gtk_text_set_editable (text, editable)
    private native gtk_text_set_word_wrap (text, word_wrap)
    private native gtk_text_set_line_wrap (text, line_wrap)
    private native gtk_text_set_adjustments (text, hadj, vadj)
    private native gtk_text_set_point (text, index)
    private native gtk_text_get_point (text)
    private native gtk_text_get_length (text)
    private native gtk_text_freeze (text)
    private native gtk_text_thaw (text)
    private native gtk_text_insert (text, font, fore, back, chars, length)
    private native gtk_text_backward_delete (text, nchars)
    private native gtk_text_forward_delete (text, nchars)
    private native gtk_theme_engine_get (name)
    private native gtk_theme_engine_ref (engine)
    private native gtk_theme_engine_unref (engine)
    private native gtk_tips_query_get_type ()
    private native gtk_tips_query_new ()
    private native gtk_tips_query_start_query (tips_query)
    private native gtk_tips_query_stop_query (tips_query)
    private native gtk_tips_query_set_caller (tips_query, caller)
    private native gtk_tips_query_set_labels (tips_query, label_inactive, label_no_tip)
    private native gtk_toggle_button_get_type ()
    private native gtk_toggle_button_new ()
    private native gtk_toggle_button_new_with_label (label)
    private native gtk_toggle_button_set_mode (toggle_button, draw_indicator)
    private native gtk_toggle_button_set_active (toggle_button, is_active)
    private native gtk_toggle_button_get_active (toggle_button)
    private native gtk_toggle_button_toggled (toggle_button)
    private native gtk_toolbar_get_type ()
    private native gtk_toolbar_new (orientation, style)
    private native gtk_toolbar_append_item (toolbar, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
    private native gtk_toolbar_prepend_item (toolbar, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
    private native gtk_toolbar_insert_item (toolbar, text, tooltip_text, tooltip_private_text, icon, callback, user_data, position)
    private native gtk_toolbar_append_space (toolbar)
    private native gtk_toolbar_prepend_space (toolbar)
    private native gtk_toolbar_insert_space (toolbar, position)
    private native gtk_toolbar_append_element (toolbar, type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
    private native gtk_toolbar_prepend_element (toolbar, type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
    private native gtk_toolbar_insert_element (toolbar, type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data, position)
    private native gtk_toolbar_append_widget (toolbar, widget, tooltip_text, tooltip_private_text)
    private native gtk_toolbar_prepend_widget (toolbar, widget, tooltip_text, tooltip_private_text)
    private native gtk_toolbar_insert_widget (toolbar, widget, tooltip_text, tooltip_private_text, position)
    private native gtk_toolbar_set_orientation (toolbar, orientation)
    private native gtk_toolbar_set_style (toolbar, style)
    private native gtk_toolbar_set_space_size (toolbar, space_size)
    private native gtk_toolbar_set_space_style (toolbar, space_style)
    private native gtk_toolbar_set_tooltips (toolbar, enable)
    private native gtk_toolbar_set_button_relief (toolbar, relief)
    private native gtk_toolbar_get_button_relief (toolbar)
    private native gtk_tooltips_get_type ()
    private native gtk_tooltips_new ()
    private native gtk_tooltips_enable (tooltips)
    private native gtk_tooltips_disable (tooltips)
    private native gtk_tooltips_set_delay (tooltips, delay)
    private native gtk_tooltips_set_tip (tooltips, widget, tip_text, tip_private)
    private native gtk_tooltips_set_colors (tooltips, background, foreground)
    private native gtk_tooltips_data_get (widget)
    private native gtk_tooltips_force_window (tooltips)
    private native gtk_tree_get_type ()
    private native gtk_tree_new ()
    private native gtk_tree_append (tree, tree_item)
    private native gtk_tree_prepend (tree, tree_item)
    private native gtk_tree_insert (tree, tree_item, position)
    private native gtk_tree_remove_items (tree, items)
    private native gtk_tree_clear_items (tree, start, end)
    private native gtk_tree_select_item (tree, item)
    private native gtk_tree_unselect_item (tree, item)
    private native gtk_tree_select_child (tree, tree_item)
    private native gtk_tree_unselect_child (tree, tree_item)
    private native gtk_tree_child_position (tree, child)
    private native gtk_tree_set_selection_mode (tree, mode)
    private native gtk_tree_set_view_mode (tree, mode)
    private native gtk_tree_set_view_lines (tree, flag)
    private native gtk_tree_remove_item (tree, child)
    private native gtk_tree_item_get_type ()
    private native gtk_tree_item_new ()
    private native gtk_tree_item_new_with_label (label)
    private native gtk_tree_item_set_subtree (tree_item, subtree)
    private native gtk_tree_item_remove_subtree (tree_item)
    private native gtk_tree_item_select (tree_item)
    private native gtk_tree_item_deselect (tree_item)
    private native gtk_tree_item_expand (tree_item)
    private native gtk_tree_item_collapse (tree_item)
    private native gtk_vbutton_box_get_type ()
    private native gtk_vbutton_box_new ()
    private native gtk_vbutton_box_get_spacing_default ()
    private native gtk_vbutton_box_set_spacing_default (spacing)
    private native gtk_vbutton_box_get_layout_default ()
    private native gtk_vbutton_box_set_layout_default (layout)
    private native gtk_vbox_get_type ()
    private native gtk_vbox_new (homogeneous, spacing)
    private native gtk_viewport_get_type ()
    private native gtk_viewport_new (hadjustment, vadjustment)
    private native gtk_viewport_get_hadjustment (viewport)
    private native gtk_viewport_get_vadjustment (viewport)
    private native gtk_viewport_set_hadjustment (viewport, adjustment)
    private native gtk_viewport_set_vadjustment (viewport, adjustment)
    private native gtk_viewport_set_shadow_type (viewport, type)
    private native gtk_vpaned_get_type ()
    private native gtk_vpaned_new ()
    private native gtk_vruler_get_type ()
    private native gtk_vruler_new ()
    private native gtk_vscale_get_type ()
    private native gtk_vscale_new (adjustment)
    private native gtk_vscrollbar_get_type ()
    private native gtk_vscrollbar_new (adjustment)
    private native gtk_vseparator_get_type ()
    private native gtk_vseparator_new ()
    private native gtk_widget_get_type ()
    private native gtk_widget_new (type, first_arg_name,... )
    private native gtk_widget_newv (type, nargs, args)
    private native gtk_widget_ref (widget)
    private native gtk_widget_unref (widget)
    private native gtk_widget_destroy (widget)
    private native gtk_widget_destroyed (widget, widget_pointer)
    private native gtk_widget_get (widget, arg)
    private native gtk_widget_getv (widget, nargs, args)
    private native gtk_widget_set (widget, first_arg_name,... )
    private native gtk_widget_setv (widget, nargs, args)
    private native gtk_widget_unparent (widget)
    private native gtk_widget_show (widget)
    private native gtk_widget_show_now (widget)
    private native gtk_widget_hide (widget)
    private native gtk_widget_show_all (widget)
    private native gtk_widget_hide_all (widget)
    private native gtk_widget_map (widget)
    private native gtk_widget_unmap (widget)
    private native gtk_widget_realize (widget)
    private native gtk_widget_unrealize (widget)
    private native gtk_widget_queue_draw (widget)
    private native gtk_widget_queue_draw_area (widget, x, y, width, height)
    private native gtk_widget_queue_clear (widget)
    private native gtk_widget_queue_clear_area (widget, x, y, width, height)
    private native gtk_widget_queue_resize (widget)
    private native gtk_widget_draw (widget, area)
    private native gtk_widget_draw_focus (widget)
    private native gtk_widget_draw_default (widget)
    private native gtk_widget_size_request (widget, requisition)
    private native gtk_widget_size_allocate (widget, allocation)
    private native gtk_widget_get_child_requisition (widget, requisition)
    private native gtk_widget_add_accelerator (widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags)
    private native gtk_widget_remove_accelerator (widget, accel_group, accel_key, accel_mods)
    private native gtk_widget_remove_accelerators (widget, accel_signal, visible_only)
    private native gtk_widget_accelerator_signal (widget, accel_group, accel_key, accel_mods)
    private native gtk_widget_lock_accelerators (widget)
    private native gtk_widget_unlock_accelerators (widget)
    private native gtk_widget_accelerators_locked (widget)
    private native gtk_widget_event (widget, event)
    private native gtk_widget_activate (widget)
    private native gtk_widget_set_scroll_adjustments (widget, hadjustment, vadjustment)
    private native gtk_widget_reparent (widget, new_parent)
    private native gtk_widget_popup (widget, x, y)
    private native gtk_widget_intersect (widget, area, intersection)
    private native gtk_widget_grab_focus (widget)
    private native gtk_widget_grab_default (widget)
    private native gtk_widget_set_name (widget, name)
    private native gtk_widget_get_name (widget)
    private native gtk_widget_set_state (widget, state)
    private native gtk_widget_set_sensitive (widget, sensitive)
    private native gtk_widget_set_app_paintable (widget, app_paintable)
    private native gtk_widget_set_parent (widget, parent)
    private native gtk_widget_set_parent_window (widget, parent_window)
    private native gtk_widget_get_parent_window (widget)
    private native gtk_widget_set_uposition (widget, x, y)
    private native gtk_widget_set_usize (widget, width, height)
    private native gtk_widget_set_events (widget, events)
    private native gtk_widget_add_events (widget, events)
    private native gtk_widget_set_extension_events (widget, mode)
    private native gtk_widget_get_extension_events (widget)
    private native gtk_widget_get_toplevel (widget)
    private native gtk_widget_get_ancestor (widget, widget_type)
    private native gtk_widget_get_colormap (widget)
    private native gtk_widget_get_visual (widget)
    private native gtk_widget_set_colormap (widget, colormap)
    private native gtk_widget_set_visual (widget, visual)
    private native gtk_widget_get_events (widget)
    private native gtk_widget_get_pointer (widget, x, y)
    private native gtk_widget_is_ancestor (widget, ancestor)
    private native gtk_widget_hide_on_delete (widget)
    private native gtk_widget_set_style (widget, style)
    private native gtk_widget_set_rc_style (widget)
    private native gtk_widget_ensure_style (widget)
    private native gtk_widget_get_style (widget)
    private native gtk_widget_restore_default_style (widget)
    private native gtk_widget_modify_style (widget, style)
    private native gtk_widget_set_composite_name (widget, name)
    private native gtk_widget_get_composite_name (widget)
    private native gtk_widget_reset_rc_styles (widget)
    private native gtk_widget_push_style (style)
    private native gtk_widget_push_colormap (cmap)
    private native gtk_widget_push_visual (visual)
    private native gtk_widget_push_composite_child ()
    private native gtk_widget_pop_composite_child ()
    private native gtk_widget_pop_style ()
    private native gtk_widget_pop_colormap ()
    private native gtk_widget_pop_visual ()
    private native gtk_widget_set_default_style (style)
    private native gtk_widget_set_default_colormap (colormap)
    private native gtk_widget_set_default_visual (visual)
    private native gtk_widget_get_default_style ()
    private native gtk_widget_get_default_colormap ()
    private native gtk_widget_get_default_visual ()
    private native gtk_widget_shape_combine_mask (widget, shape_mask, offset_x, offset_y)
    private native gtk_widget_reset_shapes (widget)
    private native gtk_widget_path (widget, path_length, path, path_reversed)
    private native gtk_widget_class_path (widget, path_length, path, path_reversed)
    private native gtk_window_get_type ()
    private native gtk_window_new (type)
    private native gtk_window_set_title (window, title)
    private native gtk_window_set_wmclass (window, wmclass_name, wmclass_class)
    private native gtk_window_set_policy (window, allow_shrink, allow_grow, auto_shrink)
    private native gtk_window_add_accel_group (window, accel_group)
    private native gtk_window_remove_accel_group (window, accel_group)
    private native gtk_window_set_position (window, position)
    private native gtk_window_activate_focus (window)
    private native gtk_window_activate_default (window)
    private native gtk_window_set_transient_for (window, parent)
    private native gtk_window_set_geometry_hints (window, geometry_widget, geometry, geom_mask)
    private native gtk_window_set_default_size (window, width, height)
    private native gtk_window_set_modal (window, modal)
    private native gtk_window_set_focus (window, focus)
    private native gtk_window_set_default (window, defaultw)
    private native gtk_window_remove_embedded_xid (window, xid)
    private native gtk_window_add_embedded_xid (window, xid)
    private native gtk_window_reposition (window, x, y)

    public function accelerator_valid (keyval, modifiers) { 
        return gtk_accelerator_valid(keyval, modifiers)
    }
    
    public function accelerator_parse (accelerator, accelerator_key, accelerator_mods) { 
        return gtk_accelerator_parse(accelerator, accelerator_key, accelerator_mods)
    }
    
    public function accelerator_name (accelerator_key, accelerator_mods) { 
        return gtk_accelerator_name(accelerator_key, accelerator_mods)
    }
    
    public function accelerator_set_default_mod_mask (default_mod_mask) { 
        return gtk_accelerator_set_default_mod_mask(default_mod_mask)
    }
    
    public function accelerator_get_default_mod_mask () { 
        return gtk_accelerator_get_default_mod_mask()
    }
    
    public function accel_group_new () { 
        return gtk_accel_group_new()
    }
    
    public function accel_group_get_default () { 
        return gtk_accel_group_get_default()
    }
    
    public function accel_group_ref (accel_group) { 
        return gtk_accel_group_ref(accel_group)
    }
    
    public function accel_group_unref (accel_group) { 
        return gtk_accel_group_unref(accel_group)
    }
    
    public function accel_group_lock (accel_group) { 
        return gtk_accel_group_lock(accel_group)
    }
    
    public function accel_group_unlock (accel_group) { 
        return gtk_accel_group_unlock(accel_group)
    }
    
    public function accel_groups_activate (object, accel_key, accel_mods) { 
        return gtk_accel_groups_activate(object, accel_key, accel_mods)
    }
    
    public function accel_group_activate (accel_group, accel_key, accel_mods) { 
        return gtk_accel_group_activate(accel_group, accel_key, accel_mods)
    }
    
    public function accel_group_attach (accel_group, object) { 
        return gtk_accel_group_attach(accel_group, object)
    }
    
    public function accel_group_detach (accel_group, object) { 
        return gtk_accel_group_detach(accel_group, object)
    }
    
    public function accel_group_get_entry (accel_group, accel_key, accel_mods) { 
        return gtk_accel_group_get_entry(accel_group, accel_key, accel_mods)
    }
    
    public function accel_group_lock_entry (accel_group, accel_key, accel_mods) { 
        return gtk_accel_group_lock_entry(accel_group, accel_key, accel_mods)
    }
    
    public function accel_group_unlock_entry (accel_group, accel_key, accel_mods) { 
        return gtk_accel_group_unlock_entry(accel_group, accel_key, accel_mods)
    }
    
    public function accel_group_add (accel_group, accel_key, accel_mods, accel_flags, object, accel_signal) { 
        return gtk_accel_group_add(accel_group, accel_key, accel_mods, accel_flags, object, accel_signal)
    }
    
    public function accel_group_remove (accel_group, accel_key, accel_mods, object) { 
        return gtk_accel_group_remove(accel_group, accel_key, accel_mods, object)
    }
    
    public function accel_group_handle_add (object, accel_signal_id, accel_group, accel_key, accel_mods, accel_flags) { 
        return gtk_accel_group_handle_add(object, accel_signal_id, accel_group, accel_key, accel_mods, accel_flags)
    }
    
    public function accel_group_handle_remove (object, accel_group, accel_key, accel_mods) { 
        return gtk_accel_group_handle_remove(object, accel_group, accel_key, accel_mods)
    }
    
    public function accel_group_create_add (class_type, signal_flags, handler_offset) { 
        return gtk_accel_group_create_add(class_type, signal_flags, handler_offset)
    }
    
    public function accel_group_create_remove (class_type, signal_flags, handler_offset) { 
        return gtk_accel_group_create_remove(class_type, signal_flags, handler_offset)
    }
    
    public function accel_groups_from_object (object) { 
        return gtk_accel_groups_from_object(object)
    }
    
    public function accel_group_entries_from_object (object) { 
        return gtk_accel_group_entries_from_object(object)
    }
    
    public function arg_new (arg_type) { 
        return gtk_arg_new(arg_type)
    }
    
    public function arg_copy (src_arg, dest_arg) { 
        return gtk_arg_copy(src_arg, dest_arg)
    }
    
    public function arg_free (arg, free_contents) { 
        return gtk_arg_free(arg, free_contents)
    }
    
    public function arg_reset (arg) { 
        return gtk_arg_reset(arg)
    }
    
    public function arg_values_equal (arg1, arg2) { 
        return gtk_arg_values_equal(arg1, arg2)
    }
    
    public function args_collect (object_type, arg_info_hash_table, arg_list_p, info_list_p, first_arg_name, var_args) { 
        return gtk_args_collect(object_type, arg_info_hash_table, arg_list_p, info_list_p, first_arg_name, var_args)
    }
    
    public function args_collect_cleanup (arg_list, info_list) { 
        return gtk_args_collect_cleanup(arg_list, info_list)
    }
    
    public function arg_get_info (object_type, arg_info_hash_table, arg_name, info_p) { 
        return gtk_arg_get_info(object_type, arg_info_hash_table, arg_name, info_p)
    }
    
    public function arg_type_new_static (base_class_type, arg_name, class_n_args_offset, arg_info_hash_table, arg_type, arg_flags, arg_id) { 
        return gtk_arg_type_new_static(base_class_type, arg_name, class_n_args_offset, arg_info_hash_table, arg_type, arg_flags, arg_id)
    }
    
    public function args_query (class_type, arg_info_hash_table, arg_flags, n_args_p) { 
        return gtk_args_query(class_type, arg_info_hash_table, arg_flags, n_args_p)
    }
    
    public function arg_name_strip_type (arg_name) { 
        return gtk_arg_name_strip_type(arg_name)
    }
    
    public function arg_info_equal (arg_info_1, arg_info_2) { 
        return gtk_arg_info_equal(arg_info_1, arg_info_2)
    }
    
    public function arg_info_hash (arg_info) { 
        return gtk_arg_info_hash(arg_info)
    }
    
    public function arg_to_valueloc (arg, value_pointer) { 
        return gtk_arg_to_valueloc(arg, value_pointer)
    }
    
    public function pattern_spec_init (pspec, pattern) { 
        return gtk_pattern_spec_init(pspec, pattern)
    }
    
    public function pattern_spec_free_segs (pspec) { 
        return gtk_pattern_spec_free_segs(pspec)
    }
    
    public function pattern_match (pspec, string_length, string, string_reversed) { 
        return gtk_pattern_match(pspec, string_length, string, string_reversed)
    }
    
    public function pattern_match_string (pspec, string) { 
        return gtk_pattern_match_string(pspec, string)
    }
    
    public function pattern_match_simple (pattern, string) { 
        return gtk_pattern_match_simple(pattern, string)
    }
    
    public function binding_set_new (set_name) { 
        return gtk_binding_set_new(set_name)
    }
    
    public function binding_set_by_class (object_class) { 
        return gtk_binding_set_by_class(object_class)
    }
    
    public function binding_set_find (set_name) { 
        return gtk_binding_set_find(set_name)
    }
    
    public function bindings_activate (object, keyval, modifiers) { 
        return gtk_bindings_activate(object, keyval, modifiers)
    }
    
    public function binding_set_activate (binding_set, keyval, modifiers, object) { 
        return gtk_binding_set_activate(binding_set, keyval, modifiers, object)
    }
    
    public function binding_entry_clear (binding_set, keyval, modifiers) { 
        return gtk_binding_entry_clear(binding_set, keyval, modifiers)
    }
    
    public function binding_entry_add_signal (binding_set, keyval, modifiers, signal_name, n_args,... ) { 
        return gtk_binding_entry_add_signal(binding_set, keyval, modifiers, signal_name, n_args,args )
    }
    
    public function binding_set_add_path (binding_set, path_type, path_pattern, priority) { 
        return gtk_binding_set_add_path(binding_set, path_type, path_pattern, priority)
    }
    
    public function binding_entry_remove (binding_set, keyval, modifiers) { 
        return gtk_binding_entry_remove(binding_set, keyval, modifiers)
    }
    
    public function binding_entry_add_signall (binding_set, keyval, modifiers, signal_name, binding_args) { 
        return gtk_binding_entry_add_signall(binding_set, keyval, modifiers, signal_name, binding_args)
    }
    
    public function binding_parse_binding (scanner) { 
        return gtk_binding_parse_binding(scanner)
    }
    
    public function gc_get (depth, colormap, values, values_mask) { 
        return gtk_gc_get(depth, colormap, values, values_mask)
    }
    
    public function gc_release (gc) { 
        return gtk_gc_release(gc)
    }
    
    public function drag_get_data (widget, context, target, time) { 
        return gtk_drag_get_data(widget.toNative(), context, target, time)
    }
    
    public function drag_finish (context, success, del, time) { 
        return gtk_drag_finish(context, success, del, time)
    }
    
    public function drag_get_source_widget (context) { 
        return gtk_drag_get_source_widget(context)
    }
    
    public function drag_highlight (widget) { 
        return gtk_drag_highlight(widget.toNative())
    }
    
    public function drag_unhighlight (widget) { 
        return gtk_drag_unhighlight(widget.toNative())
    }
    
    public function drag_dest_set (widget, flags, targets, n_targets, actions) { 
        return gtk_drag_dest_set(widget.toNative(), flags, targets, n_targets, actions)
    }
    
    public function drag_dest_set_proxy (widget, proxy_window, protocol, use_coordinates) { 
        return gtk_drag_dest_set_proxy(widget.toNative(), proxy_window, protocol, use_coordinates)
    }
    
    public function drag_dest_unset (widget) { 
        return gtk_drag_dest_unset(widget.toNative())
    }
    
    public function drag_source_set (widget, start_button_mask, targets, n_targets, actions) { 
        return gtk_drag_source_set(widget.toNative(), start_button_mask, targets, n_targets, actions)
    }
    
    public function drag_source_unset (widget) { 
        return gtk_drag_source_unset(widget.toNative())
    }
    
    public function drag_source_set_icon (widget, colormap, pixmap, mask) { 
        return gtk_drag_source_set_icon(widget.toNative(), colormap, pixmap, mask)
    }
    
    public function drag_begin (widget, targets, actions, button, event) { 
        return gtk_drag_begin(widget.toNative(), targets, actions, button, event)
    }
    
    public function drag_set_icon_widget (context, widget, hot_x, hot_y) { 
        return gtk_drag_set_icon_widget(context, widget.toNative(), hot_x, hot_y)
    }
    
    public function drag_set_icon_pixmap (context, colormap, pixmap, mask, hot_x, hot_y) { 
        return gtk_drag_set_icon_pixmap(context, colormap, pixmap, mask, hot_x, hot_y)
    }
    
    public function drag_set_icon_default (context) { 
        return gtk_drag_set_icon_default(context)
    }
    
    public function drag_set_default_icon (colormap, pixmap, mask, hot_x, hot_y) { 
        return gtk_drag_set_default_icon(colormap, pixmap, mask, hot_x, hot_y)
    }
    
    public function drag_source_handle_event (widget, event) { 
        return gtk_drag_source_handle_event(widget.toNative(), event)
    }
    
    public function drag_dest_handle_event (toplevel, event) { 
        return gtk_drag_dest_handle_event(toplevel, event)
    }
    
    public function rc_init () { 
        return gtk_rc_init()
    }
    
    public function rc_add_default_file (filename) { 
        return gtk_rc_add_default_file(filename)
    }
    
    public function rc_set_default_files (filenames) { 
        return gtk_rc_set_default_files(filenames)
    }
    
    public function rc_get_default_files () { 
        return gtk_rc_get_default_files()
    }
    
    public function rc_parse (filename) { 
        return gtk_rc_parse(filename)
    }
    
    public function rc_parse_string (rc_string) { 
        return gtk_rc_parse_string(rc_string)
    }
    
    public function rc_reparse_all () { 
        return gtk_rc_reparse_all()
    }
    
    public function rc_get_style (widget) { 
        return gtk_rc_get_style(widget)
    }
    
    public function rc_add_widget_name_style (rc_style, pattern) { 
        return gtk_rc_add_widget_name_style(rc_style, pattern)
    }
    
    public function rc_add_widget_class_style (rc_style, pattern) { 
        return gtk_rc_add_widget_class_style(rc_style, pattern)
    }
    
    public function rc_add_class_style (rc_style, pattern) { 
        return gtk_rc_add_class_style(rc_style, pattern)
    }
    
    public function rc_style_new () { 
        return gtk_rc_style_new()
    }
    
    public function rc_style_ref (rc_style) { 
        return gtk_rc_style_ref(rc_style)
    }
    
    public function rc_style_unref (rc_style) { 
        return gtk_rc_style_unref(rc_style)
    }
    
    public function rc_set_image_loader (loader) { 
        return gtk_rc_set_image_loader(loader)
    }
    
    public function rc_load_image (colormap, transparent_color, filename) { 
        return gtk_rc_load_image(colormap, transparent_color, filename)
    }
    
    public function rc_find_pixmap_in_path (scanner, pixmap_file) { 
        return gtk_rc_find_pixmap_in_path(scanner, pixmap_file)
    }
    
    public function rc_find_module_in_path (module_file) { 
        return gtk_rc_find_module_in_path(module_file)
    }
    
    public function rc_get_theme_dir () { 
        return gtk_rc_get_theme_dir()
    }
    
    public function rc_get_module_dir () { 
        return gtk_rc_get_module_dir()
    }
    
    public function rc_parse_color (scanner, color) { 
        return gtk_rc_parse_color(scanner, color)
    }
    
    public function rc_parse_state (scanner, state) { 
        return gtk_rc_parse_state(scanner, state)
    }
    
    public function rc_parse_priority (scanner, priority) { 
        return gtk_rc_parse_priority(scanner, priority)
    }
    
    public function check_version (required_major, required_minor, required_micro) { 
        return gtk_check_version(required_major, required_minor, required_micro)
    }
    
    public function init (argc, argv) { 
        return gtk_init(argc, argv)
    }
    
    public function init_check (argc, argv) { 
        return gtk_init_check(argc, argv)
    }
    
    public function exit (error_code) { 
        return gtk_exit(error_code)
    }
    
    public function set_locale () { 
        return gtk_set_locale()
    }
    
    public function events_pending () { 
        return gtk_events_pending()
    }
    
    public function main_do_event (event) { 
        return gtk_main_do_event(event)
    }
    
    public function main_level () { 
        return gtk_main_level()
    }
    
    public function main_quit () { 
        return gtk_main_quit()
    }
    
    public function main_iteration () { 
        return gtk_main_iteration()
    }
    
    public function main_iteration_do (blocking) { 
        return gtk_main_iteration_do(blocking)
    }
    
    public function grab_add (widget) { 
        return gtk_grab_add(widget)
    }
    
    public function grab_get_current () { 
        return gtk_grab_get_current()
    }
    
    public function grab_remove (widget) { 
        return gtk_grab_remove(widget)
    }
    
    public function init_add (func, data) { 
        return gtk_init_add(func, data)
    }
    
    public function quit_add_destroy (main_level, object) { 
        return gtk_quit_add_destroy(main_level, object)
    }
    
    public function quit_add (main_level, func, data) { 
        return gtk_quit_add(main_level, func, data)
    }
    
    public function quit_add_full (main_level, func, marshal, data, destroy) { 
        return gtk_quit_add_full(main_level, func, marshal, data, destroy)
    }
    
    public function quit_remove (quit_handler_id) { 
        return gtk_quit_remove(quit_handler_id)
    }
    
    public function quit_remove_by_data (data) { 
        return gtk_quit_remove_by_data(data)
    }
    
    public function timeout_add (interval, func, data) { 
        return gtk_timeout_add(interval, func, data)
    }
    
    public function timeout_add_full (interval, func, marshal, data, destroy) { 
        return gtk_timeout_add_full(interval, func, marshal, data, destroy)
    }
    
    public function timeout_remove (timeout_handler_id) { 
        return gtk_timeout_remove(timeout_handler_id)
    }
    
    public function idle_add (func, data) { 
        return gtk_idle_add(func, data)
    }
    
    public function idle_add_priority (priority, func, data) { 
        return gtk_idle_add_priority(priority, func, data)
    }
    
    public function idle_add_full (priority, func, marshal, data, destroy) { 
        return gtk_idle_add_full(priority, func, marshal, data, destroy)
    }
    
    public function idle_remove (idle_handler_id) { 
        return gtk_idle_remove(idle_handler_id)
    }
    
    public function idle_remove_by_data (data) { 
        return gtk_idle_remove_by_data(data)
    }
    
    public function input_add_full (source, condition, func, marshal, data, destroy) { 
        return gtk_input_add_full(source, condition, func, marshal, data, destroy)
    }
    
    public function input_remove (input_handler_id) { 
        return gtk_input_remove(input_handler_id)
    }
    
    public function key_snooper_install (snooper, func_data) { 
        return gtk_key_snooper_install(snooper, func_data)
    }
    
    public function key_snooper_remove (snooper_handler_id) { 
        return gtk_key_snooper_remove(snooper_handler_id)
    }
    
    public function get_current_event () { 
        return gtk_get_current_event()
    }
    
    public function get_event_widget (event) { 
        return gtk_get_event_widget(event)
    }
    
    public function propagate_event (widget, event) { 
        return gtk_propagate_event(widget, event)
    }
    
    public function object_class_user_signal_new (klass, name, signal_flags, marshaller, return_val, nparams,... ) { 
        return gtk_object_class_user_signal_new(klass, name, signal_flags, marshaller, return_val, nparams, args)
    }
    
    public function object_class_user_signal_newv (klass, name, signal_flags, marshaller, return_val, nparams, params) { 
        return gtk_object_class_user_signal_newv(klass, name, signal_flags, marshaller, return_val, nparams, params)
    }
    
    public function trace_referencing (object, func, dummy, line, do_ref) { 
        return gtk_trace_referencing(object, func, dummy, line, do_ref)
    }
    
    
    public function target_list_new (targets, ntargets) { 
        return gtk_target_list_new(targets, ntargets)
    }
    
    public function target_list_ref (list) { 
        return gtk_target_list_ref(list)
    }
    
    public function target_list_unref (list) { 
        return gtk_target_list_unref(list)
    }
    
    public function target_list_add (list, target, flags, info) { 
        return gtk_target_list_add(list, target, flags, info)
    }
    
    public function target_list_add_table (list, targets, ntargets) { 
        return gtk_target_list_add_table(list, targets, ntargets)
    }
    
    public function target_list_remove (list, target) { 
        return gtk_target_list_remove(list, target)
    }
    
    public function target_list_find (list, target, info) { 
        return gtk_target_list_find(list, target, info)
    }
    
    public function selection_owner_set (widget, selection, time) { 
        return gtk_selection_owner_set(widget, selection, time)
    }
    
    public function selection_add_target (widget, selection, target, info) { 
        return gtk_selection_add_target(widget, selection, target, info)
    }
    
    public function selection_add_targets (widget, selection, targets, ntargets) { 
        return gtk_selection_add_targets(widget, selection, targets, ntargets)
    }
    
    public function selection_convert (widget, selection, target, time) { 
        return gtk_selection_convert(widget, selection, target, time)
    }
    
    public function selection_data_set (selection_data, type, format, data, length) { 
        return gtk_selection_data_set(selection_data, type, format, data, length)
    }
    
    public function selection_remove_all (widget) { 
        return gtk_selection_remove_all(widget)
    }
    
    public function selection_clear (widget, event) { 
        return gtk_selection_clear(widget, event)
    }
    
    public function selection_request (widget, event) { 
        return gtk_selection_request(widget, event)
    }
    
    public function selection_incr_event (window, event) { 
        return gtk_selection_incr_event(window, event)
    }
    
    public function selection_notify (widget, event) { 
        return gtk_selection_notify(widget, event)
    }
    
    public function selection_property_notify (widget, event) { 
        return gtk_selection_property_notify(widget, event)
    }
    
    public function selection_data_copy (data) { 
        return gtk_selection_data_copy(data)
    }
    
    public function selection_data_free (data) { 
        return gtk_selection_data_free(data)
    }
    
    public function separator_get_type () { 
        return gtk_separator_get_type()
    }
    
    public function signal_lookup (name, object_type) { 
        return gtk_signal_lookup(name, object_type)
    }
    
    public function signal_name (signal_id) { 
        return gtk_signal_name(signal_id)
    }
    
    public function signal_add_emission_hook (signal_id, hook_func, data) { 
        return gtk_signal_add_emission_hook(signal_id, hook_func, data)
    }
    
    public function signal_add_emission_hook_full (signal_id, hook_func, data, destroy) { 
        return gtk_signal_add_emission_hook_full(signal_id, hook_func, data, destroy)
    }
    
    public function signal_remove_emission_hook (signal_id, hook_id) { 
        return gtk_signal_remove_emission_hook(signal_id, hook_id)
    }
    
    public function signal_query (signal_id) { 
        return gtk_signal_query(signal_id)
    }
    
    public function signal_init () { 
        return gtk_signal_init()
    }
    
    public function signal_new (name, signal_flags, object_type, function_offset, marshaller, return_val, nparams,... ) { 
        return gtk_signal_new(name, signal_flags, object_type, function_offset, marshaller, return_val, nparams,args )
    }
    
    public function signal_newv (name, signal_flags, object_type, function_offset, marshaller, return_val, nparams, params) { 
        return gtk_signal_newv(name, signal_flags, object_type, function_offset, marshaller, return_val, nparams, params)
    }
    
    public function signal_emit (object, signal_id,... ) { 
        return gtk_signal_emit(object, signal_id,args )
    }
    
    public function signal_emit_by_name (object, name,... ) { 
        return gtk_signal_emit_by_name(object, name,args )
    }
    
    public function signal_emitv (object, signal_id, params) { 
        return gtk_signal_emitv(object, signal_id, params)
    }
    
    public function signal_emitv_by_name (object, name, params) { 
        return gtk_signal_emitv_by_name(object, name, params)
    }
    
    public function signal_handlers_destroy (object) { 
        return gtk_signal_handlers_destroy(object)
    }
    
    public function signal_set_funcs (marshal_func, destroy_func) { 
        return gtk_signal_set_funcs(marshal_func, destroy_func)
    }
    
    public function draw_hline (style, window, state_type, x1, x2, y) { 
        return gtk_draw_hline(style, window, state_type, x1, x2, y)
    }
    
    public function draw_vline (style, window, state_type, y1, y2, x) { 
        return gtk_draw_vline(style, window, state_type, y1, y2, x)
    }
    
    public function draw_shadow (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_shadow(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_polygon (style, window, state_type, shadow_type, points, npoints, fill) { 
        return gtk_draw_polygon(style, window, state_type, shadow_type, points, npoints, fill)
    }
    
    public function draw_arrow (style, window, state_type, shadow_type, arrow_type, fill, x, y, width, height) { 
        return gtk_draw_arrow(style, window, state_type, shadow_type, arrow_type, fill, x, y, width, height)
    }
    
    public function draw_diamond (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_diamond(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_oval (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_oval(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_string (style, window, state_type, x, y, string) { 
        return gtk_draw_string(style, window, state_type, x, y, string)
    }
    
    public function draw_box (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_box(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_flat_box (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_flat_box(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_check (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_check(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_option (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_option(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_cross (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_cross(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_ramp (style, window, state_type, shadow_type, arrow_type, x, y, width, height) { 
        return gtk_draw_ramp(style, window, state_type, shadow_type, arrow_type, x, y, width, height)
    }
    
    public function draw_tab (style, window, state_type, shadow_type, x, y, width, height) { 
        return gtk_draw_tab(style, window, state_type, shadow_type, x, y, width, height)
    }
    
    public function draw_shadow_gap (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width) { 
        return gtk_draw_shadow_gap(style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)
    }
    
    public function draw_box_gap (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width) { 
        return gtk_draw_box_gap(style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)
    }
    
    public function draw_extension (style, window, state_type, shadow_type, x, y, width, height, gap_side) { 
        return gtk_draw_extension(style, window, state_type, shadow_type, x, y, width, height, gap_side)
    }
    
    public function draw_focus (style, window, x, y, width, height) { 
        return gtk_draw_focus(style, window, x, y, width, height)
    }
    
    public function draw_slider (style, window, state_type, shadow_type, x, y, width, height, orientation) { 
        return gtk_draw_slider(style, window, state_type, shadow_type, x, y, width, height, orientation)
    }
    
    public function draw_handle (style, window, state_type, shadow_type, x, y, width, height, orientation) { 
        return gtk_draw_handle(style, window, state_type, shadow_type, x, y, width, height, orientation)
    }
    
    public function paint_hline (style, window, state_type, area, widget, detail, x1, x2, y) { 
        return gtk_paint_hline(style, window, state_type, area, widget, detail, x1, x2, y)
    }
    
    public function paint_vline (style, window, state_type, area, widget, detail, y1, y2, x) { 
        return gtk_paint_vline(style, window, state_type, area, widget, detail, y1, y2, x)
    }
    
    public function paint_shadow (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_shadow(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_polygon (style, window, state_type, shadow_type, area, widget, detail, points, npoints, fill) { 
        return gtk_paint_polygon(style, window, state_type, shadow_type, area, widget, detail, points, npoints, fill)
    }
    
    public function paint_arrow (style, window, state_type, shadow_type, area, widget, detail, arrow_type, fill, x, y, width, height) { 
        return gtk_paint_arrow(style, window, state_type, shadow_type, area, widget, detail, arrow_type, fill, x, y, width, height)
    }
    
    public function paint_diamond (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_diamond(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_oval (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_oval(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_string (style, window, state_type, area, widget, detail, x, y, string) { 
        return gtk_paint_string(style, window, state_type, area, widget, detail, x, y, string)
    }
    
    public function paint_box (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_flat_box (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_flat_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_check (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_check(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_option (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_option(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_cross (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_cross(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_ramp (style, window, state_type, shadow_type, area, widget, detail, arrow_type, x, y, width, height) { 
        return gtk_paint_ramp(style, window, state_type, shadow_type, area, widget, detail, arrow_type, x, y, width, height)
    }
    
    public function paint_tab (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height) { 
        return gtk_paint_tab(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height)
    }
    
    public function paint_shadow_gap (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width) { 
        return gtk_paint_shadow_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width)
    }
    
    public function paint_box_gap (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width) { 
        return gtk_paint_box_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width)
    }
    
    public function paint_extension (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side) { 
        return gtk_paint_extension(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side)
    }
    
    public function paint_focus (style, window, area, widget, detail, x, y, width, height) { 
        return gtk_paint_focus(style, window, area, widget, detail, x, y, width, height)
    }
    
    public function paint_slider (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation) { 
        return gtk_paint_slider(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation)
    }
    
    public function paint_handle (style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation) { 
        return gtk_paint_handle(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation)
    }
    
    public function statusbar_get_type () { 
        return gtk_statusbar_get_type()
    }
    
    public function statusbar_new () { 
        return gtk_statusbar_new()
    }
    
    public function statusbar_get_context_id (statusbar, context_description) { 
        return gtk_statusbar_get_context_id(statusbar, context_description)
    }
    
    public function statusbar_push (statusbar, context_id, text) { 
        return gtk_statusbar_push(statusbar, context_id, text)
    }
    
    public function statusbar_pop (statusbar, context_id) { 
        return gtk_statusbar_pop(statusbar, context_id)
    }
    
    public function statusbar_remove (statusbar, context_id, message_id) { 
        return gtk_statusbar_remove(statusbar, context_id, message_id)
    }
    
    public function theme_engine_get (name) { 
        return gtk_theme_engine_get(name)
    }
    
    public function theme_engine_ref (engine) { 
        return gtk_theme_engine_ref(engine)
    }
    
    public function theme_engine_unref (engine) { 
        return gtk_theme_engine_unref(engine)
    }
    
    //native gtk_threads_enter()
    //native gtk_threads_leave()

public:
    function mainloop() {
        //gtk_threads_enter()
        gtk_main()
        //gtk_threads_leave()
    }

    native dtk_widget_get_window (widget)
    native dtk_widget_get_allocation (widget)
    native dtk_widget_get_state (widget)
    native dtk_text_get_adjustments (text, var v, var h)
    native dtk_text_get_char (text, index)
    native dtk_dialog_get_vbox (dialog)
    native dtk_dialog_get_action_area (dialog)
    native dtk_widget_set_flags (widget, flags)
    native dtk_adjustment_get_upper(object)
    native dtk_adjustment_get_lower(object)
    native dtk_adjustment_get_value(object)
    native dtk_adjustment_get_step_increment(object)
    native dtk_adjustment_get_page_increment(object)
    native dtk_adjustment_get_page_size(object)
    native dtk_progress_get_adjustment (object)
    native dtk_construct_object (object)

    // support classes

    class Allocation {
         public var x = 0
         public var y = 0
         public var width = 0
         public var height = 0

         var memory = malloc (8)

         public function fill (address) {
             x = peek (address, 2)
             y = peek (address + 2, 2)
             height = peek (address + 4, 2)
             width = peek (address + 6, 2)
         }

         public function setNative (addr) {
             fill (addr) 
         }

         public function toNative() {
             poke (memory, x, 2)
             poke (memory + 2, y, 2)
             poke (memory + 4, height, 2)
             poke (memory + 6, width, 2)
             return memory
         }
    }

    class SelectionData (address=0) {
        public var selection = 0
        public var target = 0
        public var type = 0
        public var format = 0
        public generic data 
        public var length = 0

        public function fill (address) {
            selection = peek (address, 4)
            target = peek (address + 4, 4)
            type = peek (address + 8, 4)
            format = peek (address + 12, 4)
            var ptr = peek (address+16, 4)
            length = peek (address +20, 4)
            data = peek (ptr, length, true)
        }

        if (address != 0) {
            fill (address)
        }
    }

    // this is an awkward one

    class Style (_toplevel = false) {
    public:
        var object = null
        if (_toplevel) {
            object = gtk_style_new()
        }

        public function style_copy () { 
            return gtk_style_copy(object)
        }
        
        public function style_attach (window) { 
            return gtk_style_attach(object, window)
        }
        
        public function style_detach () { 
            return gtk_style_detach(object)
        }
        
        public function style_ref () { 
            return gtk_style_ref(object)
        }
        
        public function style_unref () { 
            return gtk_style_unref(object)
        }
        
        public function style_set_background (window, state_type) { 
            return gtk_style_set_background(object, window, state_type)
        }
        
        public function style_apply_default_background (window, set_bg, state_type, area, x, y, width, height) { 
            return gtk_style_apply_default_background(object, window, set_bg, state_type, area, x, y, width, height)
        }
    
       var fg = new [5]
       var bg = new [5]
       var light = new [5]
       var dark = new [5]
       var mid = new [5]
       var text = new [5]
       var base = new [5]

       var black = new GDK.Color()
       var white = new GDK.Color()
       var font = new GDK.Font()
   
       var fg_gc = new [5]
       var bg_gc = new [5]
       var light_gc = new [5]
       var dark_gc = new [5]
       var mid_gc = new [5]
       var text_gc = new [5]
       var base_gc = new [5]
       var black_gc = 0
       var white_gc = 0

       var bg_pixmap = new [5]


       public function fill (addr) {
           addr += 4			// move to first field
           function fillColorVec (vec) {
               foreach i 5 {
                   vec[i] = new GDK.Color()
                   vec[i].fill (addr)
                   addr += sizeof (vec[i])
               }
           }
           fillColorVec (fg)
           fillColorVec (bg)
           fillColorVec (light)
           fillColorVec (dark)
           fillColorVec (mid)
	   fillColorVec (text)
           fillColorVec (base)

           black.fill (addr) ; addr += sizeof (black)
           white.fill (addr) ; addr += sizeof (white)

           font.fill (addr) ; addr += 4

           function fillGCVec (vec) {
               foreach i 5 {
                   vec[i] = peek (addr, 4)
                   addr += 4
               }
           }

           fillGCVec (fg_gc)
           fillGCVec (bg_gc)
           fillGCVec (light_gc)
           fillGCVec (dark_gc)
           fillGCVec (mid_gc)
	   fillGCVec (text_gc)
           fillGCVec (base_gc)

           black_gc = peek (addr, 4) ; addr += 4
           white_gc = peek (addr, 4) ; addr += 4

           foreach i 5 {
               bg_pixmap[i] = peek (addr, 4)
               addr += 4
           }
       }


         public function setNative (addr) {
             fill (addr) 
         }

    }

    class CListCellInfo {
    public:
        var row = 0
        var column = 0

        function setNative (addr) {
            row = peek (addr, 4)
            column = peek (addr + 4, 4)
        }

        var memory = malloc (8)

        function toNative {
            poke (memory, row, 4)
            poke (memory +4, column, 4)
            return memory
        }
    }

    class Requisition {
    public:
        var width = 0
        var height = 0

        function setNative (addr) {
            width = peek (addr, 2)
            height = peek (addr + 2, 2)
        }

        var memory = malloc (4)

        function toNative {
            poke (memory, width, 2)
            poke (memory +2, height, 2)
            return memory
        }
    }

    class PropertyMark {
    public:
        var property = []
        var offset = 0
        var index = 0

        function setNative (addr) {
        }

        function toNative {
        }

    }

    // enumerated types
    enum AccelFlags {
        /* should the accelerator appear in
        * the widget's display?
        */
        ACCEL_VISIBLE        = 1 << 0,
        /* should the signal associated with
        * this accelerator be also visible?
        */
        ACCEL_SIGNAL_VISIBLE = 1 << 1,
        /* may the accelerator be removed
        * again?
        */
        ACCEL_LOCKED         = 1 << 2,
        ACCEL_MASK           = 0x07
    }

    enum CalendarDisplayOptions {
        CALENDAR_SHOW_HEADING		= 1 << 0,
        CALENDAR_SHOW_DAY_NAMES		= 1 << 1,
        CALENDAR_NO_MONTH_CHANGE		= 1 << 2,
        CALENDAR_SHOW_WEEK_NUMBERS	= 1 << 3,
        CALENDAR_WEEK_START_MONDAY	= 1 << 4
    }

    enum CellType {
        CELL_EMPTY,
        CELL_TEXT,
        CELL_PIXMAP,
        CELL_PIXTEXT,
        CELL_WIDGET
    }

    enum CListDragPos {
        CLIST_DRAG_NONE,
        CLIST_DRAG_BEFORE,
        CLIST_DRAG_INTO,
        CLIST_DRAG_AFTER
    }

    enum ButtonAction {
        BUTTON_IGNORED = 0,
        BUTTON_SELECTS = 1 << 0,
        BUTTON_DRAGS   = 1 << 1,
        BUTTON_EXPANDS = 1 << 2
    }

    enum CTreePos {
        CTREE_POS_BEFORE,
        CTREE_POS_AS_CHILD,
        CTREE_POS_AFTER
    }

    enum CTreeLineStyle {
        CTREE_LINES_NONE,
        CTREE_LINES_SOLID,
        CTREE_LINES_DOTTED,
        CTREE_LINES_TABBED
    }

    enum CTreeExpanderStyle {
        CTREE_EXPANDER_NONE,
        CTREE_EXPANDER_SQUARE,
        CTREE_EXPANDER_TRIANGLE,
        CTREE_EXPANDER_CIRCULAR
    }

    enum CTreeExpansionType {
        CTREE_EXPANSION_EXPAND,
        CTREE_EXPANSION_EXPAND_RECURSIVE,
        CTREE_EXPANSION_COLLAPSE,
        CTREE_EXPANSION_COLLAPSE_RECURSIVE,
        CTREE_EXPANSION_TOGGLE,
        CTREE_EXPANSION_TOGGLE_RECURSIVE
    }

    enum DebugFlag {
        DEBUG_OBJECTS    = 1 << 0,
        DEBUG_MISC       = 1 << 1,
        DEBUG_SIGNALS    = 1 << 2,
        DEBUG_DND        = 1 << 3,
        DEBUG_PLUGSOCKET = 1 << 4
    }

    enum DestDefaults {
        DEST_DEFAULT_MOTION     = 1 << 0, /* respond to "drag_motion" */
        DEST_DEFAULT_HIGHLIGHT  = 1 << 1, /* auto-highlight */
        DEST_DEFAULT_DROP       = 1 << 2, /* respond to "drag_drop" */
        DEST_DEFAULT_ALL        = 0x07
    }

    enum TargetFlags {
        TARGET_SAME_APP = 1 << 0,    /*< nick=same-app >*/
        TARGET_SAME_WIDGET = 1 << 1  /*< nick=same-widget >*/
    }

    enum ArrowType {
        ARROW_UP,
        ARROW_DOWN,
        ARROW_LEFT,
        ARROW_RIGHT
    }

    enum AttachOptions {
        EXPAND = 1 << 0,
        SHRINK = 1 << 1,
        FILL   = 1 << 2
    }

    enum ButtonBoxStyle {
        BUTTONBOX_DEFAULT_STYLE,
        BUTTONBOX_SPREAD,
        BUTTONBOX_EDGE,
        BUTTONBOX_START,
        BUTTONBOX_END
    }

    enum CurveType {
        CURVE_TYPE_LINEAR,       /* linear interpolation */
        CURVE_TYPE_SPLINE,       /* spline interpolation */
        CURVE_TYPE_FREE          /* free form curve */
    }

    enum DirectionType {
        DIR_TAB_FORWARD,
        DIR_TAB_BACKWARD,
        DIR_UP,
        DIR_DOWN,
        DIR_LEFT,
        DIR_RIGHT
    }

    enum Justification {
        JUSTIFY_LEFT,
        JUSTIFY_RIGHT,
        JUSTIFY_CENTER,
        JUSTIFY_FILL
    }

    enum MatchType {
        MATCH_ALL,       /* "*A?A*" */
        MATCH_ALL_TAIL,  /* "*A?AA" */
        MATCH_HEAD,      /* "AAAA*" */
        MATCH_TAIL,      /* "*AAAA" */
        MATCH_EXACT,     /* "AAAAA" */
        MATCH_LAST
    }

    enum MenuDirectionType {
        MENU_DIR_PARENT,
        MENU_DIR_CHILD,
        MENU_DIR_NEXT,
        MENU_DIR_PREV
    }

    enum MenuFactoryType {
        MENU_FACTORY_MENU,
        MENU_FACTORY_MENU_BAR,
        MENU_FACTORY_OPTION_MENU
    }

    enum MetricType {
        PIXELS,
        INCHES,
        CENTIMETERS
    }

    enum Orientation {
        ORIENTATION_HORIZONTAL,
        ORIENTATION_VERTICAL
    }

    enum CornerType {
        CORNER_TOP_LEFT,
        CORNER_BOTTOM_LEFT,
        CORNER_TOP_RIGHT,
        CORNER_BOTTOM_RIGHT
    }

    enum PackType {
        PACK_START,
        PACK_END
    }

    enum PathPriorityType {
        PATH_PRIO_LOWEST      = 0,
        PATH_PRIO_GTK	    = 4,
        PATH_PRIO_APPLICATION = 8,
        PATH_PRIO_RC          = 12,
        PATH_PRIO_HIGHEST     = 15,
        PATH_PRIO_MASK        = 0x0f
    }

    enum PathType {
        PATH_WIDGET,
        PATH_WIDGET_CLASS,
        PATH_CLASS
    }

    enum PolicyType {
        POLICY_ALWAYS,
        POLICY_AUTOMATIC,
        POLICY_NEVER
    }

    enum PositionType {
        POS_LEFT,
        POS_RIGHT,
        POS_TOP,
        POS_BOTTOM
    }

    enum PreviewType {
        PREVIEW_COLOR,
        PREVIEW_GRAYSCALE
    }

    enum ReliefStyle {
        RELIEF_NORMAL,
        RELIEF_HALF,
        RELIEF_NONE
    }

    enum ResizeMode {
        RESIZE_PARENT,		/* Pass resize request to the parent */
        RESIZE_QUEUE,		/* Queue resizes on this widget */
        RESIZE_IMMEDIATE		/* Perform the resizes now */
    }

    enum SignalRunType {
        RUN_FIRST      = 1 << 0,
        RUN_LAST       = 1 << 1,
        RUN_BOTH       = (RUN_FIRST | RUN_LAST),
        RUN_NO_RECURSE = 1 << 2,
        RUN_ACTION     = 1 << 3,
        RUN_NO_HOOKS   = 1 << 4
    }

    enum ScrollType {
        SCROLL_NONE,
        SCROLL_STEP_BACKWARD,
        SCROLL_STEP_FORWARD,
        SCROLL_PAGE_BACKWARD,
        SCROLL_PAGE_FORWARD,
        SCROLL_JUMP
    }

    enum SelectionMode {
        SELECTION_SINGLE,
        SELECTION_BROWSE,
        SELECTION_MULTIPLE,
        SELECTION_EXTENDED
    }

    enum ShadowType {
        SHADOW_NONE,
        SHADOW_IN,
        SHADOW_OUT,
        SHADOW_ETCHED_IN,
        SHADOW_ETCHED_OUT
    }

    enum StateType {
        STATE_NORMAL,
        STATE_ACTIVE,
        STATE_PRELIGHT,
        STATE_SELECTED,
        STATE_INSENSITIVE
    }

    enum SubmenuDirection {
        DIRECTION_LEFT,
        DIRECTION_RIGHT
    }

    enum SubmenuPlacement {
        TOP_BOTTOM,
        LEFT_RIGHT
    }

    enum ToolbarStyle {
        TOOLBAR_ICONS,
        TOOLBAR_TEXT,
        TOOLBAR_BOTH
    }

    enum TroughType {
        TROUGH_NONE,
        TROUGH_START,
        TROUGH_END,
        TROUGH_JUMP
    }

    enum UpdateType {
        UPDATE_CONTINUOUS,
        UPDATE_DISCONTINUOUS,
        UPDATE_DELAYED
    }

    enum Visibility {
        VISIBILITY_NONE,
        VISIBILITY_PARTIAL,
        VISIBILITY_FULL
    }

    enum WindowPosition {
        WIN_POS_NONE,
        WIN_POS_CENTER,
        WIN_POS_MOUSE,
        WIN_POS_CENTER_ALWAYS
    }

    enum WindowType {
        WINDOW_TOPLEVEL,
        WINDOW_DIALOG,
        WINDOW_POPUP
    }

    enum SortType {
        SORT_ASCENDING,
        SORT_DESCENDING
    }

    enum FontMetricType {
        FONT_METRIC_PIXELS,
        FONT_METRIC_POINTS
    }

    enum FontType {
        FONT_BITMAP		= 1 << 0,
        FONT_SCALABLE		= 1 << 1,
        FONT_SCALABLE_BITMAP	= 1 << 2,
        FONT_ALL			= 0x07
    }

    enum FontFilterType {
        FONT_FILTER_BASE,
        FONT_FILTER_USER
    }

    enum ObjectFlags {
        DESTROYED		= 1 << 0,
        FLOATING		= 1 << 1,
        CONNECTED		= 1 << 2,
        CONSTRUCTED	= 1 << 3
    }

    enum ArgFlags {
        ARG_READABLE	 = 1 << 0,
        ARG_WRITABLE	 = 1 << 1,
        ARG_CONSTRUCT	 = 1 << 2,
        ARG_CONSTRUCT_ONLY = 1 << 3,
        ARG_CHILD_ARG	 = 1 << 4,
        ARG_MASK		 = 0x1f,
        /* aliases
        */
        ARG_READWRITE	 = ARG_READABLE | ARG_WRITABLE
    }

    enum PackerOptions {
        PACK_EXPAND   = 1 << 0,	/*< nick=expand >*/
        FILL_X        = 1 << 1,
        FILL_Y        = 1 << 2
    }

    enum SideType {
        SIDE_TOP,
        SIDE_BOTTOM,
        SIDE_LEFT,
        SIDE_RIGHT
    }

    enum AnchorType {
        ANCHOR_CENTER,
        ANCHOR_NORTH,
        ANCHOR_NORTH_WEST,
        ANCHOR_NORTH_EAST,
        ANCHOR_SOUTH,
        ANCHOR_SOUTH_WEST,
        ANCHOR_SOUTH_EAST,
        ANCHOR_WEST,
        ANCHOR_EAST,
        ANCHOR_N	=	ANCHOR_NORTH,
        ANCHOR_NW	=	ANCHOR_NORTH_WEST,
        ANCHOR_NE	=	ANCHOR_NORTH_EAST,
        ANCHOR_S	=	ANCHOR_SOUTH,
        ANCHOR_SW	=	ANCHOR_SOUTH_WEST,
        ANCHOR_SE	=	ANCHOR_SOUTH_EAST,
        ANCHOR_W	=	ANCHOR_WEST,
        ANCHOR_E	=	ANCHOR_EAST
    }

    enum PrivateFlags {
        PRIVATE_USER_STYLE	= 1 <<  0,
        PRIVATE_REDRAW_PENDING	= 1 <<  1,
        PRIVATE_RESIZE_PENDING	= 1 <<  2,
        PRIVATE_RESIZE_NEEDED	= 1 <<  3,
        PRIVATE_LEAVE_PENDING	= 1 <<  4,
        PRIVATE_HAS_SHAPE_MASK	= 1 <<  5,
        PRIVATE_IN_REPARENT       = 1 <<  6,
        PRIVATE_IS_OFFSCREEN      = 1 <<  7,
        PRIVATE_FULLDRAW_PENDING  = 1 <<  8
    }

    enum ProgressBarStyle {
        PROGRESS_CONTINUOUS,
        PROGRESS_DISCRETE
    }

    enum ProgressBarOrientation {
        PROGRESS_LEFT_TO_RIGHT,
        PROGRESS_RIGHT_TO_LEFT,
        PROGRESS_BOTTOM_TO_TOP,
        PROGRESS_TOP_TO_BOTTOM
    }

    enum RcFlags {
        RC_FG   = 1 << 0,
        RC_BG   = 1 << 1,
        RC_TEXT = 1 << 2,
        RC_BASE = 1 << 3
    }

    enum RcTokenType {
        RC_TOKEN_INVALID = 270,		// from glib.h G_TOKEN_LAST
        RC_TOKEN_INCLUDE,
        RC_TOKEN_NORMAL,
        RC_TOKEN_ACTIVE,
        RC_TOKEN_PRELIGHT,
        RC_TOKEN_SELECTED,
        RC_TOKEN_INSENSITIVE,
        RC_TOKEN_FG,
        RC_TOKEN_BG,
        RC_TOKEN_BASE,
        RC_TOKEN_TEXT,
        RC_TOKEN_FONT,
        RC_TOKEN_FONTSET,
        RC_TOKEN_BG_PIXMAP,
        RC_TOKEN_PIXMAP_PATH,
        RC_TOKEN_STYLE,
        RC_TOKEN_BINDING,
        RC_TOKEN_BIND,
        RC_TOKEN_WIDGET,
        RC_TOKEN_WIDGET_CLASS,
        RC_TOKEN_CLASS,
        RC_TOKEN_LOWEST,
        RC_TOKEN_GTK,
        RC_TOKEN_APPLICATION,
        RC_TOKEN_RC,
        RC_TOKEN_HIGHEST,
        RC_TOKEN_ENGINE,
        RC_TOKEN_MODULE_PATH,
        RC_TOKEN_LAST
    }

    enum SpinButtonUpdatePolicy {
        UPDATE_ALWAYS,
        UPDATE_IF_VALID
    }

    enum SpinType {
        SPIN_STEP_FORWARD,
        SPIN_STEP_BACKWARD,
        SPIN_PAGE_FORWARD,
        SPIN_PAGE_BACKWARD,
        SPIN_HOME,
        SPIN_END,
        SPIN_USER_DEFINED
    }

    enum ToolbarChildType {
        TOOLBAR_CHILD_SPACE,
        TOOLBAR_CHILD_BUTTON,
        TOOLBAR_CHILD_TOGGLEBUTTON,
        TOOLBAR_CHILD_RADIOBUTTON,
        TOOLBAR_CHILD_WIDGET
    }

    enum ToolbarSpaceStyle {
        TOOLBAR_SPACE_EMPTY,
        TOOLBAR_SPACE_LINE
    }

    enum TreeViewMode {
        TREE_VIEW_LINE,  /* default view mode */
        TREE_VIEW_ITEM
    }

    enum FundamentalType {
        TYPE_INVALID,
        TYPE_NONE,
        /* flat types */
        TYPE_CHAR,
        TYPE_UCHAR,
        TYPE_BOOL,
        TYPE_INT,
        TYPE_UINT,
        TYPE_LONG,
        TYPE_ULONG,
        TYPE_FLOAT,
        TYPE_DOUBLE,
        TYPE_STRING,
        TYPE_ENUM,
        TYPE_FLAGS,
        TYPE_BOXED,
        TYPE_POINTER,
        /* structured types */
        TYPE_SIGNAL,
        TYPE_ARGS,
        TYPE_CALLBACK,
        TYPE_C_CALLBACK,
        TYPE_FOREIGN,
        /* base type node of the object system */
        TYPE_OBJECT
    }

    enum WidgetFlags {
        TOPLEVEL         = 1 << 4,
        NO_WINDOW        = 1 << 5,
        REALIZED         = 1 << 6,
        MAPPED           = 1 << 7,
        VISIBLE          = 1 << 8,
        SENSITIVE        = 1 << 9,
        PARENT_SENSITIVE = 1 << 10,
        CAN_FOCUS        = 1 << 11,
        HAS_FOCUS        = 1 << 12,
        CAN_DEFAULT      = 1 << 13,
        HAS_DEFAULT      = 1 << 14,
        HAS_GRAB	       = 1 << 15,
        RC_STYLE	       = 1 << 16,
        COMPOSITE_CHILD  = 1 << 17,
        NO_REPARENT      = 1 << 18,
        APP_PAINTABLE    = 1 << 19,
        RECEIVES_DEFAULT = 1 << 20
    }


class Object (_toplevel=true){
    public var object = 0

    //public function finalize {
        //unregister_object (object)
    //}

    public function toNative {
        return object
    }

    public function setNative(x) {
        object = x
    }

    public function signal_n_emissions (signal_id) { 
        return gtk_signal_n_emissions(this, object, signal_id)
    }
    
    public function signal_n_emissions_by_name (name) { 
        return gtk_signal_n_emissions_by_name(this, object, name)
    }
    
    public function signal_emit_stop (signal_id) { 
        return gtk_signal_emit_stop(this, object, signal_id)
    }
    
    public function signal_emit_stop_by_name (name) { 
        return gtk_signal_emit_stop_by_name(this, object, name)
    }
    
    public function signal_connect (name, func, func_data) { 
        return gtk_signal_connect(this, object, name, func, func_data)
    }
    
    public function signal_connect_after (name, func, func_data) { 
        return gtk_signal_connect_after(this, object, name, func, func_data)
    }
    
    public function signal_connect_object (name, func, slot_object) { 
        return gtk_signal_connect_object(this, object, name, func, slot_object)
    }
    
    public function signal_connect_object_after (name, func, slot_object) { 
        return gtk_signal_connect_object_after(this, object, name, func, slot_object)
    }
    
    public function signal_connect_full (name, func, marshal, data, destroy_func, object_signal, after) { 
        return gtk_signal_connect_full(this, object, name, func, marshal, data, destroy_func, object_signal, after)
    }
    
    public function signal_connect_object_while_alive (signal, func, alive_object) { 
        return gtk_signal_connect_object_while_alive(this, object, signal, func, alive_object)
    }
    
    public function signal_connect_while_alive (signal, func, func_data, alive_object) { 
        return gtk_signal_connect_while_alive(this, object, signal, func, func_data, alive_object)
    }
    
    public function signal_disconnect (handler_id) { 
        return gtk_signal_disconnect(this, object, handler_id)
    }
    
    public function signal_disconnect_by_func (func, data) { 
        return gtk_signal_disconnect_by_func(this, object, func, data)
    }
    
    public function signal_disconnect_by_data (data) { 
        return gtk_signal_disconnect_by_data(this, object, data)
    }
    
    public function signal_handler_block (handler_id) { 
        return gtk_signal_handler_block(this, object, handler_id)
    }
    
    public function signal_handler_block_by_func (func, data) { 
        return gtk_signal_handler_block_by_func(this, object, func, data)
    }
    
    public function signal_handler_block_by_data (data) { 
        return gtk_signal_handler_block_by_data(this, object, data)
    }
    
    public function signal_handler_unblock (handler_id) { 
        return gtk_signal_handler_unblock(this, object, handler_id)
    }
    
    public function signal_handler_unblock_by_func (func, data) { 
        return gtk_signal_handler_unblock_by_func(this, object, func, data)
    }
    
    public function signal_handler_unblock_by_data (data) { 
        return gtk_signal_handler_unblock_by_data(this, object, data)
    }
    
    public function signal_handler_pending (signal_id, may_be_blocked) { 
        return gtk_signal_handler_pending(this, object, signal_id, may_be_blocked)
    }
    
    public function signal_handler_pending_by_func (signal_id, may_be_blocked, func, data) { 
        return gtk_signal_handler_pending_by_func(this, object, signal_id, may_be_blocked, func, data)
    }
    
    public function signal_handler_pending_by_id (handler_id, may_be_blocked) { 
        return gtk_signal_handler_pending_by_id(this, object, handler_id, may_be_blocked)
    }

    public function constructed () {
        return gtk_object_constructed (object)
    }

    public function sink () {
        return gtk_object_sink (object)
    }

    public function ref (object) {
        return gtk_object_ref (object)
    }

    public function unref () {
        return gtk_object_unref (object)
    }

    public function weakref ( notify, data) {
        return gtk_object_weakref (object, notify, data)
    }

    public function weakunref ( notify, data) {
        return gtk_object_weakunref (object, notify, data)
    }

    public function destroy () {
        return gtk_object_destroy (object)
    }

    public function getv ( n_args, args) {
        return gtk_object_getv (object, n_args, args)
    }

    public function get ( first_arg_name,... ) {
        return gtk_object_get (object, first_arg_name,args )
    }

    public function set ( first_arg_name,... ) {
        return gtk_object_set (object, first_arg_name,args )
    }

    public function setv ( n_args, args) {
        return gtk_object_setv (object, n_args, args)
    }

    public function query_args (class_type, arg_flags, n_args) {
        return gtk_object_query_args (class_type, arg_flags, n_args)
    }

    public function set_data ( key, data) {
        return gtk_object_set_data (object, key, data)
    }

    public function set_data_full ( key, data, destroy) {
        return gtk_object_set_data_full (object, key, data, destroy)
    }

    public function remove_data ( key) {
        return gtk_object_remove_data (object, key)
    }

    public function get_data ( key) {
        return gtk_object_get_data (object, key)
    }

    public function remove_no_notify ( key) {
        return gtk_object_remove_no_notify (object, key)
    }

    public function set_user_data ( data) {
        return gtk_object_set_user_data (object, data)
    }

    public function get_user_data () {
        return gtk_object_get_user_data (object)
    }

    public function class_add_signals (klass, signals, nsignals) {
        return gtk_object_class_add_signals (klass, signals, nsignals)
    }

    public function add_arg_type (arg_name, arg_type, arg_flags, arg_id) {
        return gtk_object_add_arg_type (arg_name, arg_type, arg_flags, arg_id)
    }

    public function set_data_by_id ( data_id, data) {
        return gtk_object_set_data_by_id (object, data_id, data)
    }

    public function set_data_by_id_full ( data_id, data, destroy) {
        return gtk_object_set_data_by_id_full (object, data_id, data, destroy)
    }

    public function get_data_by_id ( data_id) {
        return gtk_object_get_data_by_id (object, data_id)
    }

    public function remove_data_by_id ( data_id) {
        return gtk_object_remove_data_by_id (object, data_id)
    }

    public function remove_no_notify_by_id ( key_id) {
        return gtk_object_remove_no_notify_by_id (object, key_id)
    }

    public function arg_set ( arg, info) {
        return gtk_object_arg_set (object, arg, info)
    }

    public function arg_get ( arg, info) {
        return gtk_object_arg_get (object, arg, info)
    }

}
    

    
class Widget (_toplevel=true) extends Object {

    public function get_type() {
        return gtk_widget_get_type()
    }

    public function newv(type, nargs, args) {
        return gtk_widget_newv(type, nargs, args)
    }

    public function set_flags(flags) {
        dtk_widget_set_flags (object, flags)
    }

    public function ref() {
        return gtk_widget_ref(object)
    }

    public function unref() {
        return gtk_widget_unref(object)
    }

    public function destroy() {
        return gtk_widget_destroy(object)
    }

    public function destroyed(widget_pointer) {
        return gtk_widget_destroyed(object, widget_pointer)
    }

    public function get(arg) {
        return gtk_widget_get(object, arg)
    }

    public function getv(nargs, args) {
        return gtk_widget_getv(object, nargs, args)
    }

    public function set(first_arg_name,...) {
        return gtk_widget_set(object, first_arg_name,args )
    }

    public function setv(nargs, args) {
        return gtk_widget_setv(object, nargs, args)
    }

    public function unparent() {
        return gtk_widget_unparent(object)
    }

    public function show() {
        return gtk_widget_show(object)
    }

    public function show_now() {
        return gtk_widget_show_now(object)
    }

    public function hide() {
        return gtk_widget_hide(object)
    }

    public function show_all() {
        return gtk_widget_show_all(object)
    }

    public function hide_all() {
        return gtk_widget_hide_all(object)
    }

    public function map() {
        return gtk_widget_map(object)
    }

    public function unmap() {
        return gtk_widget_unmap(object)
    }

    public function realize() {
        return gtk_widget_realize(object)
    }

    public function unrealize() {
        return gtk_widget_unrealize(object)
    }

    public function queue_draw() {
        return gtk_widget_queue_draw(object)
    }

    public function queue_draw_area(x, y, width, height) {
        return gtk_widget_queue_draw_area(object, x, y, width, height)
    }

    public function queue_clear() {
        return gtk_widget_queue_clear(object)
    }

    public function queue_clear_area(x, y, width, height) {
        return gtk_widget_queue_clear_area(object, x, y, width, height)
    }

    public function queue_resize() {
        return gtk_widget_queue_resize(object)
    }

    public function draw(area) {
        return gtk_widget_draw(object, area)
    }

    public function draw_focus() {
        return gtk_widget_draw_focus(object)
    }

    public function draw_default() {
        return gtk_widget_draw_default(object)
    }

    public function size_request(requisition) {
        return gtk_widget_size_request(object, requisition)
    }

    public function size_allocate(allocation) {
        return gtk_widget_size_allocate(object, allocation)
    }

    public function get_child_requisition(requisition) {
        return gtk_widget_get_child_requisition(object, requisition)
    }

    public function remove_accelerators(accel_signal, visible_only) {
        return gtk_widget_remove_accelerators(object, accel_signal, visible_only)
    }

    public function lock_accelerators() {
        return gtk_widget_lock_accelerators(object)
    }

    public function unlock_accelerators() {
        return gtk_widget_unlock_accelerators(object)
    }

    public function accelerators_locked() {
        return gtk_widget_accelerators_locked(object)
    }

    public function event(event) {
        return gtk_widget_event(object, event)
    }

    public function activate() {
        return gtk_widget_activate(object)
    }

    public function set_scroll_adjustments(hadjustment, vadjustment) {
        return gtk_widget_set_scroll_adjustments(object, hadjustment, vadjustment)
    }

    public function reparent(new_parent) {
        return gtk_widget_reparent(object, new_parent)
    }

    public function popup(x, y) {
        return gtk_widget_popup(object, x, y)
    }

    public function intersect(area, intersection) {
        return gtk_widget_intersect(object, area, intersection)
    }

    public function grab_focus() {
        return gtk_widget_grab_focus(object)
    }

    public function grab_default() {
        return gtk_widget_grab_default(object)
    }

    public function set_name(name) {
        return gtk_widget_set_name(object, name)
    }

    public function get_name() {
        return gtk_widget_get_name(object)
    }

    public function set_state(state) {
        return gtk_widget_set_state(object, state)
    }

    public function set_sensitive(sensitive) {
        return gtk_widget_set_sensitive(object, sensitive)
    }

    public function set_app_paintable(app_paintable) {
        return gtk_widget_set_app_paintable(object, app_paintable)
    }

    public function set_parent(parent) {
        return gtk_widget_set_parent(object, parent)
    }

    public function set_parent_window(parent_window) {
        return gtk_widget_set_parent_window(object, parent_window)
    }

    public function get_parent_window() {
        return gtk_widget_get_parent_window(object)
    }

    public function set_uposition(x, y) {
        return gtk_widget_set_uposition(object, x, y)
    }

    public function set_usize(width, height) {
        return gtk_widget_set_usize(object, width, height)
    }

    public function set_events(events) {
        return gtk_widget_set_events(object, events)
    }

    public function add_events(events) {
        return gtk_widget_add_events(object, events)
    }

    public function set_extension_events(mode) {
        return gtk_widget_set_extension_events(object, mode)
    }

    public function get_extension_events() {
        return gtk_widget_get_extension_events(object)
    }

    public function get_toplevel() {
        return gtk_widget_get_toplevel(object)
    }

    public function get_ancestor(widget_type) {
        return gtk_widget_get_ancestor(object, widget_type)
    }

    public function get_colormap() {
        return gtk_widget_get_colormap(object)
    }

    public function get_visual() {
        return gtk_widget_get_visual(object)
    }

    public function set_colormap(colormap) {
        return gtk_widget_set_colormap(object, colormap)
    }

    public function set_visual(visual) {
        return gtk_widget_set_visual(object, visual)
    }

    public function get_events() {
        return gtk_widget_get_events(object)
    }

    public function get_pointer(x, y) {
        return gtk_widget_get_pointer(object, x, y)
    }

    public function is_ancestor(ancestor) {
        return gtk_widget_is_ancestor(object, ancestor)
    }

    public function hide_on_delete() {
        return gtk_widget_hide_on_delete(object)
    }

    public function set_style(style) {
        return gtk_widget_set_style(object, style)
    }

    public function set_rc_style() {
        return gtk_widget_set_rc_style(object)
    }

    public function ensure_style() {
        return gtk_widget_ensure_style(object)
    }

    public function restore_default_style() {
        return gtk_widget_restore_default_style(object)
    }

    public function modify_style(style) {
        return gtk_widget_modify_style(object, style)
    }

    public function set_composite_name(name) {
        return gtk_widget_set_composite_name(object, name)
    }

    public function get_composite_name() {
        return gtk_widget_get_composite_name(object)
    }

    public function reset_rc_styles() {
        return gtk_widget_reset_rc_styles(object)
    }

    public function push_style(style) {
        return gtk_widget_push_style(style)
    }

    public function push_colormap(cmap) {
        return gtk_widget_push_colormap(cmap)
    }

    public function push_visual(visual) {
        return gtk_widget_push_visual(visual)
    }

    public function push_composite_child() {
        return gtk_widget_push_composite_child()
    }

    public function pop_composite_child() {
        return gtk_widget_pop_composite_child()
    }

    public function pop_style() {
        return gtk_widget_pop_style()
    }

    public function pop_colormap() {
        return gtk_widget_pop_colormap()
    }

    public function pop_visual() {
        return gtk_widget_pop_visual()
    }

    public function set_default_style(style) {
        return gtk_widget_set_default_style(style)
    }

    public function set_default_colormap(colormap) {
        return gtk_widget_set_default_colormap(colormap)
    }

    public function set_default_visual(visual) {
        return gtk_widget_set_default_visual(visual)
    }

    public function get_default_style() {
        return gtk_widget_get_default_style()
    }

    public function get_default_colormap() {
        return gtk_widget_get_default_colormap()
    }

    public function get_default_visual() {
        return gtk_widget_get_default_visual()
    }

    public function shape_combine_mask(shape_mask, offset_x, offset_y) {
        return gtk_widget_shape_combine_mask(object, shape_mask, offset_x, offset_y)
    }

    public function reset_shapes() {
        return gtk_widget_reset_shapes(object)
    }

    public function path(path_length, path, path_reversed) {
        return gtk_widget_path(object, path_length, path, path_reversed)
    }

    public function class_path(path_length, path, path_reversed) {
        return gtk_widget_class_path(object, path_length, path, path_reversed)
    }

    public function get_window() {
       return dtk_widget_get_window(object) ;
    }

    public function get_allocation() {
        var alloc = new Allocation()
        var addr = dtk_widget_get_allocation (object)
        alloc.fill (addr)
        return alloc
    }

    public function get_style() {
        var style = new Style()
        var addr = gtk_widget_get_style (object)
        style.fill (addr)
        return style
    }

    public function get_state() {
        return dtk_widget_get_state(object)
    }
}




private:
    g_thread_init (null)
    aikido_gtk_init (args)

public:
//
// the code from here on is generated by a script
//

    /**
     * class Misc
     */

    class Misc(_toplevel = true) extends Widget(false) {

        public function get_type(){
            return gtk_misc_get_type(object)
        }

        public function set_alignment(xalign:real, yalign:real){
            return gtk_misc_set_alignment(object, xalign, yalign)
        }

        public function set_padding(xpad, ypad){
            return gtk_misc_set_padding(object, xpad, ypad)
        }

    }

    /**
     * class Label
     */

    class Label(str, _toplevel = true) extends Misc(false) {
        if (_toplevel) {
            object = gtk_label_new (str)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_label_get_type(object)
        }

        public function set_text(str : string){
            return gtk_label_set_text(object, str)
        }

        public function set_justify(jtype){
            return gtk_label_set_justify(object, jtype)
        }

        public function set_pattern(pattern){
            return gtk_label_set_pattern(object, pattern)
        }

        public function set_line_wrap(wrap){
            return gtk_label_set_line_wrap(object, wrap)
        }

        public function get(var str){
            return gtk_label_get(object, str)
        }

        public function parse_uline(string){
            return gtk_label_parse_uline(object, string)
        }

    }

    /**
     * class AccelLabel
     */

    class AccelLabel(str, _toplevel = true) extends Label(str, false) {
        if (_toplevel) {
            object = gtk_accel_label_new (str)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_accel_label_get_type(object)
        }

        public function get_accel_width(){
            return gtk_accel_label_get_accel_width(object)
        }

        public function set_accel_widget(accel_widget){
            return gtk_accel_label_set_accel_widget(object, accel_widget)
        }

        public function refetch(){
            return gtk_accel_label_refetch(object)
        }

    }

    /**
     * class TipsQuery
     */

    class TipsQuery(_toplevel = true) extends Label("", false) {
        if (_toplevel) {
            object = gtk_tips_query_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_tips_query_get_type(object)
        }

        public function start_query {
            return gtk_tips_query_start_query(object)
        }

        public function stop_query(){
            return gtk_tips_query_stop_query(object)
        }

        public function set_caller(caller){
            return gtk_tips_query_set_caller(object, caller)
        }

        public function set_labels(label_inactive, label_no_tip){
            return gtk_tips_query_set_labels(object, label_inactive, label_no_tip)
        }

    }

    /**
     * class Arrow
     */

    class Arrow(arrow_type, shadow_type, _toplevel = true) extends Misc(false) {
        if (_toplevel) {
            object = gtk_arrow_new (arrow_type, shadow_type)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_arrow_get_type(object)
        }

        public function set(shadow_type){
            return gtk_arrow_set(object, shadow_type)
        }

    }

    /**
     * class Image
     */

    class Image(val, mask, _toplevel = true) extends Misc(false) {
        if (_toplevel) {
            object = gtk_image_new (val, mask)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_image_get_type(object)
        }

        public function set(val, mask){
            return gtk_image_set(object, val, mask)
        }

        public function get(val, mask){
            return gtk_image_get(object, val, mask)
        }

    }

    /**
     * class Pixmap
     */

    class Pixmap(pixmap, mask, _toplevel = true) extends Misc(false) {
        if (_toplevel) {
            object = gtk_pixmap_new (pixmap, mask)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_pixmap_get_type(object)
        }

        public function set(val, mask){
            return gtk_pixmap_set(object, val, mask)
        }

        public function get(val, mask){
            return gtk_pixmap_get(object, val, mask)
        }

        public function set_build_insensitive(build){
            return gtk_pixmap_set_build_insensitive(object, build)
        }

    }

    /**
     * class Container
     */

    class Container(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_container_get_type(object)
        }

        public function set_border_width(border_width){
            return gtk_container_set_border_width(object, border_width)
        }

        public function add(widget){
            return gtk_container_add(object, widget)
        }

        public function remove(widget){
            return gtk_container_remove(object, widget)
        }

        public function set_resize_mode(resize_mode){
            return gtk_container_set_resize_mode(object, resize_mode)
        }

        public function check_resize(){
            return gtk_container_check_resize(object)
        }

        public function for_each(callback, callback_data){
            return gtk_container_foreach(object, callback, callback_data)
        }

        public function foreach_full(callback, marshal, callback_data, notify){
            return gtk_container_foreach_full(object, callback, marshal, callback_data, notify)
        }

        public function children(){
            return gtk_container_children(object)
        }

        public function focus(direction){
            return gtk_container_focus(object, direction)
        }

        public function set_reallocate_redraws(needs_redraws){
            return gtk_container_set_reallocate_redraws(object, needs_redraws)
        }

        public function set_focus_child(child){
            return gtk_container_set_focus_child(object, child)
        }

        public function set_focus_vadjustment(adjustment){
            return gtk_container_set_focus_vadjustment(object, adjustment)
        }

        public function set_focus_hadjustment(adjustment){
            return gtk_container_set_focus_hadjustment(object, adjustment)
        }

        public function register_toplevel(){
            return gtk_container_register_toplevel(object)
        }

        public function unregister_toplevel(){
            return gtk_container_unregister_toplevel(object)
        }

        public function get_toplevels(){
            return gtk_container_get_toplevels(object)
        }

        public function resize_children(){
            return gtk_container_resize_children(object)
        }

        public function child_type(){
            return gtk_container_child_type(object)
        }

        public function add_child_arg_type(arg_name, arg_type, arg_flags, arg_id){
            return gtk_container_add_child_arg_type(object, arg_name, arg_type, arg_flags, arg_id)
        }

        public function query_child_args(class_type, arg_flags, nargs){
            return gtk_container_query_child_args(object, class_type, arg_flags, nargs)
        }

        public function child_getv(child, n_args, args){
            return gtk_container_child_getv(object, child, n_args, args)
        }

        public function add_with_args(widget, first_arg_name,... ){
            return gtk_container_add_with_args(object, widget, first_arg_name,args )
        }

        public function addv(widget, n_args, args){
            return gtk_container_addv(object, widget, n_args, args)
        }

        public function child_set(child, first_arg_name,... ){
            return gtk_container_child_set(object, child, first_arg_name,args )
        }

        public function queue_resize(){
            return gtk_container_queue_resize(object)
        }

        public function clear_resize_widgets(){
            return gtk_container_clear_resize_widgets(object)
        }

        public function arg_set(child, arg, info){
            return gtk_container_arg_set(object, child, arg, info)
        }

        public function arg_get(child, arg, info){
            return gtk_container_arg_get(object, child, arg, info)
        }

        public function child_args_collect(object_type, arg_list_p, info_list_p, first_arg_name, args){
            return gtk_container_child_args_collect(object, object_type, arg_list_p, info_list_p, first_arg_name, args)
        }

        public function child_arg_get_info(object_type, arg_name, info_p){
            return gtk_container_child_arg_get_info(object, object_type, arg_name, info_p)
        }

        public function forall(callback, callback_data){
            return gtk_container_forall(object, callback, callback_data)
        }

        public function child_composite_name(child){
            return gtk_container_child_composite_name(object, child)
        }

        public function dequeue_resize_handler(){
            return gtk_container_dequeue_resize_handler(object)
        }

    }

    /**
     * class Bin
     */

    class Bin(_toplevel = true) extends Container(false) {
        public function get_type(){
            return gtk_bin_get_type(object)
        }

    }

    class Invisible (_toplevel = true) extends Bin (false) {
    }

    class Frame (label, _toplevel=true) extends Bin (false) {
        if (_toplevel) {
            object = gtk_frame_new(label)
            //register_object (this, object)
        }
    
    
        public function get_type() {
            return gtk_frame_get_type()
        }
    
        public function set_label(label) {
            return gtk_frame_set_label(object, label)
        }
    
        public function set_label_align(xalign:real, yalign:real) {
            return gtk_frame_set_label_align(object, xalign, yalign)
        }
    
        public function set_shadow_type(type) {
            return gtk_frame_set_shadow_type(object, type)
        }
    
    }

    /**
     * class Alignment
     */

    class Alignment(xalign : real, yalign : real, xscale : real, yscale : real, _toplevel = true) extends Bin(false) {
        if (_toplevel) {
            object = gtk_alignment_new (xalign, yalign, xscale, yscale)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_alignment_get_type(object)
        }

        public function set(xalign : real, yalign : real, xscale : real, yscale : real){
            return gtk_alignment_set(object, xalign, yalign, xscale, yscale)
        }

    }

    /**
     * class AspectFrame
     */

    class AspectFrame(label, xalign:real, yalign:real, ratio:real, obey_child, _toplevel = true) extends Frame(false) {
        if (_toplevel) {
            object = gtk_aspect_frame_new (label, xalign, yalign, ratio, obey_child)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_aspect_frame_get_type(object)
        }

        public function set(xalign:real, yalign:real, ratio:real, obey_child){
            return gtk_aspect_frame_set(object, xalign, yalign, ratio, obey_child)
        }

    }

    /**
     * class Button
     */

    class Button(label = "", _toplevel = true) extends Bin(false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_button_new_with_label (label)
            //register_object (this, object)
            } else {
                object = gtk_button_new ()
            //register_object (this, object)
            }
        }

        public function get_type(){
            return gtk_button_get_type(object)
        }


        public function pressed(){
            return gtk_button_pressed(object)
        }

        public function released(){
            return gtk_button_released(object)
        }

        public function clicked(){
            return gtk_button_clicked(object)
        }

        public function enter(){
            return gtk_button_enter(object)
        }

        public function leave(){
            return gtk_button_leave(object)
        }

        public function set_relief(newstyle){
            return gtk_button_set_relief(object, newstyle)
        }

        public function get_relief(){
            return gtk_button_get_relief(object)
        }

    }

    /**
     * class ToggleButton
     */

    class ToggleButton(label = "", _toplevel = true) extends Button(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_toggle_button_new_with_label (label)
            } else {
                object = gtk_toggle_button_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_toggle_button_get_type(object)
        }

        public function set_mode(draw_indicator){
            return gtk_toggle_button_set_mode(object, draw_indicator)
        }

        public function set_active(is_active){
            return gtk_toggle_button_set_active(object, is_active)
        }

        public function get_active(){
            return gtk_toggle_button_get_active(object)
        }

        public function toggled(){
            return gtk_toggle_button_toggled(object)
        }

    }

    /**
     * class CheckButton
     */

    class CheckButton(label = "", _toplevel = true) extends ToggleButton(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_check_button_new_with_label (label)
            } else {
                object = gtk_check_button_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_check_button_get_type(object)
        }

    }

    /**
     * class RadioButton
     */

    class RadioButton(grp, label = "", _toplevel = true) extends CheckButton(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_radio_button_new_with_label (grp, label)
            } else {
                object = gtk_radio_button_new (grp)
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_radio_button_get_type(object)
        }

        public function group(){
            return gtk_radio_button_group(object)
        }

        public function set_group(group){
            return gtk_radio_button_set_group(object, group)
        }

    }

    /**
     * class RadioButtonFropmWidget
     * 
     * this is used to construct a radio button using the from_widget constructors
     */

    class RadioButtonFromWidget (grp, label = "", _toplevel = true) extends CheckButton(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_radio_button_new_with_label_from_widget (grp, label)
            } else {
                object = gtk_radio_button_new_from_widget (grp)
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_radio_button_get_type(object)
        }

        public function group(){
            return gtk_radio_button_group(object)
        }

        public function set_group(group){
            return gtk_radio_button_set_group(object, group)
        }

    }

    /**
     * class OptionMenu
     */

    class OptionMenu(_toplevel = true) extends Button(false) {
        if (_toplevel) {
            object = gtk_option_menu_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_option_menu_get_type(object)
        }

        public function get_menu(){
            return gtk_option_menu_get_menu(object)
        }

        public function set_menu(menu){
            return gtk_option_menu_set_menu(object, menu)
        }

        public function remove_menu(){
            return gtk_option_menu_remove_menu(object)
        }

        public function set_history(index){
            return gtk_option_menu_set_history(object, index)
        }

    }

    /**
     * class Item
     */

    class Item(_toplevel = true) extends Bin(false) {

        public function get_type(){
            return gtk_item_get_type(object)
        }

        public function select(){
            return gtk_item_select(object)
        }

        public function deselect(){
            return gtk_item_deselect(object)
        }

        public function toggle(){
            return gtk_item_toggle(object)
        }

        public function factories_path_delete(ifactory_path, path){
            return gtk_item_factories_path_delete(object, ifactory_path, path)
        }

    }

    /**
     * class MenuItem
     */

    class MenuItem(label = "", _toplevel = true) extends Item(false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_menu_item_new_with_label (label)
            } else {
                object = gtk_menu_item_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_menu_item_get_type(object)
        }

        public function set_submenu(submenu){
            return gtk_menu_item_set_submenu(object, submenu)
        }

        public function remove_submenu(){
            return gtk_menu_item_remove_submenu(object)
        }

        public function set_placement(placement){
            return gtk_menu_item_set_placement(object, placement)
        }

        public function configure(show_toggle_indicator, show_submenu_indicator){
            return gtk_menu_item_configure(object, show_toggle_indicator, show_submenu_indicator)
        }

        public function select(){
            return gtk_menu_item_select(object)
        }

        public function deselect(){
            return gtk_menu_item_deselect(object)
        }

        public function activate(){
            return gtk_menu_item_activate(object)
        }

        public function right_justify(){
            return gtk_menu_item_right_justify(object)
        }

    }

    /**
     * class CheckMenuItem
     */

    class CheckMenuItem(label = "", _toplevel = true) extends MenuItem(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_check_menu_item_new_with_label (label)
            } else {
                object = gtk_check_menu_item_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_check_menu_item_get_type(object)
        }

        public function set_active(is_active){
            return gtk_check_menu_item_set_active(object, is_active)
        }

        public function set_show_toggle(always){
            return gtk_check_menu_item_set_show_toggle(object, always)
        }

        public function toggled(){
            return gtk_check_menu_item_toggled(object)
        }

    }

    /**
     * class RadioMenuItem
     */

    class RadioMenuItem(grp,label="", _toplevel = true) extends CheckMenuItem(label, false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_radio_menu_item_new_with_label (grp, label)
            } else {
                object = gtk_radio_menu_item_new (grp)
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_radio_menu_item_get_type(object)
        }

        public function group(){
            return gtk_radio_menu_item_group(object)
        }

        public function set_group(group){
            return gtk_radio_menu_item_set_group(object, group)
        }

    }

    /**
     * class TearoffMenuItem
     */

    class TearoffMenuItem(_toplevel = true) extends MenuItem("", false) {
        if (_toplevel) {
            object = gtk_tearoff_menu_item_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_tearoff_menu_item_get_type(object)
        }

    }

    /**
     * class ListItem
     */

    class ListItem(label="", _toplevel = true) extends Item(false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_list_item_new_with_label (label)
            } else {
                object = gtk_list_item_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_list_item_get_type(object)
        }

        public function select(){
            return gtk_list_item_select(object)
        }

        public function deselect(){
            return gtk_list_item_deselect(object)
        }

    }

    /**
     * class TreeItem
     */

    class TreeItem(label = "", _toplevel = true) extends Item(false) {
        if (_toplevel) {
            if (label != "") {
                object = gtk_tree_item_new_with_label (label)
            } else {
                object = gtk_tree_item_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_tree_item_get_type(object)
        }

        public function set_subtree(subtree){
            return gtk_tree_item_set_subtree(object, subtree)
        }

        public function remove_subtree(){
            return gtk_tree_item_remove_subtree(object)
        }

        public function select(){
            return gtk_tree_item_select(object)
        }

        public function deselect(){
            return gtk_tree_item_deselect(object)
        }

        public function expand(){
            return gtk_tree_item_expand(object)
        }

        public function collapse(){
            return gtk_tree_item_collapse(object)
        }

    }


    /**
     * class Window
     */

    class Window (type, _toplevel=true) extends Bin (false) {
        if (_toplevel) {
            object = gtk_window_new(type)
            //register_object (this, object)
        }
    
        public function get_type() {
            return gtk_window_get_type()
        }
    
        public function set_title(title) {
            return gtk_window_set_title(object, title)
        }
    
        public function set_wmclass(wmclass_name, wmclass_class) {
            return gtk_window_set_wmclass(object, wmclass_name, wmclass_class)
        }
    
        public function set_policy(allow_shrink, allow_grow, auto_shrink) {
            return gtk_window_set_policy(object, allow_shrink, allow_grow, auto_shrink)
        }
    
        public function set_position(position) {
            return gtk_window_set_position(object, position)
        }
    
        public function activate_focus() {
            return gtk_window_activate_focus(object)
        }
    
        public function activate_default() {
            return gtk_window_activate_default(object)
        }
    
        public function set_transient_for(parent) {
            return gtk_window_set_transient_for(object, parent)
        }
    
        public function set_geometry_hints(geometry_widget, geometry, geom_mask) {
            return gtk_window_set_geometry_hints(object, geometry_widget, geometry, geom_mask)
        }
    
        public function set_default_size(width, height) {
            return gtk_window_set_default_size(object, width, height)
        }
    
        public function set_modal(modal) {
            return gtk_window_set_modal(object, modal)
        }
    
        public function set_focus(focus) {
            return gtk_window_set_focus(object, focus)
        }
    
        public function set_default(defaultw) {
            return gtk_window_set_default(object, defaultw)
        }
    
        public function remove_embedded_xid(xid) {
            return gtk_window_remove_embedded_xid(object, xid)
        }
    
        public function add_embedded_xid(xid) {
            return gtk_window_add_embedded_xid(object, xid)
        }
    
        public function reposition(x, y) {
            return gtk_window_reposition(object, x, y)
        }
    
    }




    /**
     * class ColorSelectionDialog
     */

    class ColorSelectionDialog(title, _toplevel = true) extends Window(false) {
        if (_toplevel) {
            object = gtk_color_selection_dialog_new (title)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_color_selection_dialog_get_type(object)
        }

    }

    /**
     * class Dialog
     */

    class Dialog(_toplevel = true) extends Window(false) {
        if (_toplevel) {
            object = gtk_dialog_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_dialog_get_type(object)
        }

        public function get_vbox {
            var addr = dtk_dialog_get_vbox (object)
            var vbox = dtk_construct_object (addr)
            vbox.setNative (addr)
            return vbox
        }

        public function get_action_area() {
            var addr = dtk_dialog_get_action_area (object)
            var hbox = dtk_construct_object (addr)
            hbox.setNative (addr)
            return hbox
        }

    }

    /**
     * class InputDialog
     */

    class InputDialog(_toplevel = true) extends Dialog(false) {
        if (_toplevel) {
            object = gtk_input_dialog_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_input_dialog_get_type(object)
        }

    }

    /**
     * class FileSelection
     */

    class FileSelection(title, _toplevel = true) extends Window(false) {
        if (_toplevel) {
            object = gtk_file_selection_new (title)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_file_selection_get_type(object)
        }

        public function set_filename(filename){
            return gtk_file_selection_set_filename(object, filename)
        }

        public function get_filename(){
            return gtk_file_selection_get_filename(object)
        }

        public function complete(pattern){
            return gtk_file_selection_complete(object, pattern)
        }

        public function show_fileop_buttons(){
            return gtk_file_selection_show_fileop_buttons(object)
        }

        public function hide_fileop_buttons(){
            return gtk_file_selection_hide_fileop_buttons(object)
        }

    }

    /**
     * class FontSelectionDialog
     */

    class FontSelectionDialog(title, _toplevel = true) extends Window(false) {
        if (_toplevel) {
            object = gtk_font_selection_dialog_new (title)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_font_selection_dialog_get_type(object)
        }

        public function get_font_name(){
            return gtk_font_selection_dialog_get_font_name(object)
        }

        public function get_font(){
            return gtk_font_selection_dialog_get_font(object)
        }

        public function set_font_name(fontname){
            return gtk_font_selection_dialog_set_font_name(object, fontname)
        }

        public function set_filter(filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets){
            return gtk_font_selection_dialog_set_filter(object, filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets)
        }

        public function get_preview_text(){
            return gtk_font_selection_dialog_get_preview_text(object)
        }

        public function set_preview_text(text){
            return gtk_font_selection_dialog_set_preview_text(object, text)
        }

    }

    /**
     * class Plug
     */

    class Plug(socket_id, _toplevel = true) extends Window(false) {
        if (_toplevel) {
            object = gtk_plug_new (socket_id)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_plug_get_type(object)
        }

        public function construct(socket_id){
            return gtk_plug_construct(object, socket_id)
        }

    }

    /**
     * class EventBox
     */

    class EventBox(_toplevel = true) extends Bin(false) {
        if (_toplevel) {
            object = gtk_event_box_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_event_box_get_type(object)
        }

    }

    /**
     * class HandleBox
     */

    class HandleBox(_toplevel = true) extends Bin(false) {
        if (_toplevel) {
            object = gtk_handle_box_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_handle_box_get_type(object)
        }

        public function set_shadow_type(type){
            return gtk_handle_box_set_shadow_type(object, type)
        }

        public function set_handle_position(position){
            return gtk_handle_box_set_handle_position(object, position)
        }

        public function set_snap_edge(edge){
            return gtk_handle_box_set_snap_edge(object, edge)
        }

    }

    /**
     * class ScrolledWindow
     */

    class ScrolledWindow(hadjustment, vadjustment, _toplevel = true) extends Bin(false) {
        if (_toplevel) {
            object = gtk_scrolled_window_new (hadjustment, vadjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_scrolled_window_get_type(object)
        }

        public function set_hadjustment(hadjustment){
            return gtk_scrolled_window_set_hadjustment(object, hadjustment)
        }

        public function set_vadjustment(hadjustment){
            return gtk_scrolled_window_set_vadjustment(object, hadjustment)
        }

        public function get_hadjustment(){
            return gtk_scrolled_window_get_hadjustment(object)
        }

        public function get_vadjustment(){
            return gtk_scrolled_window_get_vadjustment(object)
        }

        public function set_policy(hscrollbar_policy, vscrollbar_policy){
            return gtk_scrolled_window_set_policy(object, hscrollbar_policy, vscrollbar_policy)
        }

        public function set_placement(window_placement){
            return gtk_scrolled_window_set_placement(object, window_placement)
        }

        public function add_with_viewport(child){
            return gtk_scrolled_window_add_with_viewport(object, child)
        }

    }

    /**
     * class Viewport
     */

    class Viewport(hadjustment, vadjustment, _toplevel = true) extends Bin(false) {
        if (_toplevel) {
            object = gtk_viewport_new (hadjustment, vadjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_viewport_get_type(object)
        }

        public function get_hadjustment(){
            return gtk_viewport_get_hadjustment(object)
        }

        public function get_vadjustment(){
            return gtk_viewport_get_vadjustment(object)
        }

        public function set_hadjustment(adjustment){
            return gtk_viewport_set_hadjustment(object, adjustment)
        }

        public function set_vadjustment(adjustment){
            return gtk_viewport_set_vadjustment(object, adjustment)
        }

        public function set_shadow_type(type){
            return gtk_viewport_set_shadow_type(object, type)
        }

    }

    /**
     * class Box
     */

    class Box(_toplevel = true) extends Container(false) {
        public function get_type(){
            return gtk_box_get_type(object)
        }

        public function pack_start(child, expand, fill, padding){
            return gtk_box_pack_start(object, child, expand, fill, padding)
        }

        public function pack_end(child, expand, fill, padding){
            return gtk_box_pack_end(object, child, expand, fill, padding)
        }

        public function pack_start_defaults(widget){
            return gtk_box_pack_start_defaults(object, widget)
        }

        public function pack_end_defaults(widget){
            return gtk_box_pack_end_defaults(object, widget)
        }

        public function set_homogeneous(homogeneous){
            return gtk_box_set_homogeneous(object, homogeneous)
        }

        public function set_spacing(spacing){
            return gtk_box_set_spacing(object, spacing)
        }

        public function reorder_child(child, position){
            return gtk_box_reorder_child(object, child, position)
        }

        public function query_child_packing(child, expand, fill, padding, pack_type){
            return gtk_box_query_child_packing(object, child, expand, fill, padding, pack_type)
        }

        public function set_child_packing(child, expand, fill, padding, pack_type){
            return gtk_box_set_child_packing(object, child, expand, fill, padding, pack_type)
        }

    }

    /**
     * class ButtonBox
     */

    class ButtonBox(_toplevel = true) extends Box(false) {
        public function get_type(){
            return gtk_button_box_get_type(object)
        }

        public function get_child_size_default(min_width, min_height){
            return gtk_button_box_get_child_size_default(object, min_width, min_height)
        }

        public function get_child_ipadding_default(ipad_x, ipad_y){
            return gtk_button_box_get_child_ipadding_default(object, ipad_x, ipad_y)
        }

        public function set_child_size_default(min_width, min_height){
            return gtk_button_box_set_child_size_default(object, min_width, min_height)
        }

        public function set_child_ipadding_default(ipad_x, ipad_y){
            return gtk_button_box_set_child_ipadding_default(object, ipad_x, ipad_y)
        }

        public function get_spacing(){
            return gtk_button_box_get_spacing(object)
        }

        public function get_layout(){
            return gtk_button_box_get_layout(object)
        }

        public function get_child_size(min_width, min_height){
            return gtk_button_box_get_child_size(object, min_width, min_height)
        }

        public function get_child_ipadding(ipad_x, ipad_y){
            return gtk_button_box_get_child_ipadding(object, ipad_x, ipad_y)
        }

        public function set_spacing(spacing){
            return gtk_button_box_set_spacing(object, spacing)
        }

        public function set_layout(layout_style){
            return gtk_button_box_set_layout(object, layout_style)
        }

        public function set_child_size(min_width, min_height){
            return gtk_button_box_set_child_size(object, min_width, min_height)
        }

        public function set_child_ipadding(ipad_x, ipad_y){
            return gtk_button_box_set_child_ipadding(object, ipad_x, ipad_y)
        }

        public function child_requisition(nvis_children, width, height){
            return gtk_button_box_child_requisition(object, nvis_children, width, height)
        }

    }

    /**
     * class HButtonBox
     */

    class HButtonBox(_toplevel = true) extends ButtonBox(false) {
        if (_toplevel) {
            object = gtk_hbutton_box_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hbutton_box_get_type(object)
        }

        public function get_spacing_default(){
            return gtk_hbutton_box_get_spacing_default(object)
        }

        public function get_layout_default(){
            return gtk_hbutton_box_get_layout_default(object)
        }

        public function set_spacing_default(spacing){
            return gtk_hbutton_box_set_spacing_default(object, spacing)
        }

        public function set_layout_default(layout){
            return gtk_hbutton_box_set_layout_default(object, layout)
        }

    }

    /**
     * class VButtonBox
     */

    class VButtonBox(_toplevel = true) extends ButtonBox(false) {
        if (_toplevel) {
            object = gtk_vbutton_box_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vbutton_box_get_type(object)
        }

        public function get_spacing_default(){
            return gtk_vbutton_box_get_spacing_default(object)
        }

        public function set_spacing_default(spacing){
            return gtk_vbutton_box_set_spacing_default(object, spacing)
        }

        public function get_layout_default(){
            return gtk_vbutton_box_get_layout_default(object)
        }

        public function set_layout_default(layout){
            return gtk_vbutton_box_set_layout_default(object, layout)
        }

    }

    /**
     * class VBox
     */

    class VBox(homogeneous = 0, spacing = 0, _toplevel = true) extends Box(false) {
        if (_toplevel) {
            object = gtk_vbox_new (homogeneous, spacing)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vbox_get_type(object)
        }
    }

    /**
     * class ColorSelection
     */

    class ColorSelection(_toplevel = true) extends VBox(false, 0, false) {
        if (_toplevel) {
            object = gtk_color_selection_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_color_selection_get_type(object)
        }

        public function set_update_policy(policy){
            return gtk_color_selection_set_update_policy(object, policy)
        }

        public function set_opacity(use_opacity){
            return gtk_color_selection_set_opacity(object, use_opacity)
        }

        public function set_color(color){
            return gtk_color_selection_set_color(object, color)
        }

        public function get_color(color){
            return gtk_color_selection_get_color(object, color)
        }

    }

    /**
     * class GammaCurve
     */

    class GammaCurve(_toplevel = true) extends VBox(false, 0, false) {
        if (_toplevel) {
            object = gtk_gamma_curve_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_gamma_curve_get_type(object)
        }

    }

    /**
     * class HBox
     */

    class HBox(homogeneous = 0, spacing = 0, _toplevel = true) extends Box(false) {
        if (_toplevel) {
            object = gtk_hbox_new (homogeneous, spacing)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hbox_get_type(object)
        }

    }

    /**
     * class Combo
     */

    class Combo(_toplevel = true) extends HBox(false, 0, false) {
        if (_toplevel) {
            object = gtk_combo_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_combo_get_type(object)
        }

        public function set_value_in_list(val, ok_if_empty){
            return gtk_combo_set_value_in_list(object, val, ok_if_empty)
        }

        public function set_use_arrows(val){
            return gtk_combo_set_use_arrows(object, val)
        }

        public function set_use_arrows_always(val){
            return gtk_combo_set_use_arrows_always(object, val)
        }

        public function set_case_sensitive(val){
            return gtk_combo_set_case_sensitive(object, val)
        }

        public function set_item_string(item, item_value){
            return gtk_combo_set_item_string(object, item, item_value)
        }

        public function set_popdown_strings(strings){
            return gtk_combo_set_popdown_strings(object, strings)
        }

        public function disable_activate(){
            return gtk_combo_disable_activate(object)
        }

    }

    /**
     * class Statusbar
     */

    class Statusbar(_toplevel = true) extends HBox(false, 0, false) {
        if (_toplevel) {
            object = gtk_statusbar_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_statusbar_get_type(object)
        }

        public function get_context_id(context_description){
            return gtk_statusbar_get_context_id(object, context_description)
        }

        public function push(context_id, text){
            return gtk_statusbar_push(object, context_id, text)
        }

        public function pop(context_id){
            return gtk_statusbar_pop(object, context_id)
        }

        public function remove(context_id, message_id){
            return gtk_statusbar_remove(object, context_id, message_id)
        }

    }

    /**
     * class CList
     */

    class CList(columns, titles = [], _toplevel = true) extends Container(false) {
        if (_toplevel) {
            if (sizeof (titles) != 0) {
                object =  gtk_clist_new_with_titles(columns, titles)
            } else {
                object = gtk_clist_new (columns)
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_clist_get_type(object)
        }

        public function construct(columns, titles){
            return gtk_clist_construct(object, columns, titles)
        }

        public function set_hadjustment(adjustment){
            return gtk_clist_set_hadjustment(object, adjustment)
        }

        public function set_vadjustment(adjustment){
            return gtk_clist_set_vadjustment(object, adjustment)
        }

        public function get_hadjustment(){
            return gtk_clist_get_hadjustment(object)
        }

        public function get_vadjustment(){
            return gtk_clist_get_vadjustment(object)
        }

        public function set_shadow_type(type){
            return gtk_clist_set_shadow_type(object, type)
        }

        public function set_selection_mode(mode){
            return gtk_clist_set_selection_mode(object, mode)
        }

        public function set_reorderable(reorderable){
            return gtk_clist_set_reorderable(object, reorderable)
        }

        public function set_use_drag_icons(use_icons){
            return gtk_clist_set_use_drag_icons(object, use_icons)
        }

        public function set_button_actions(button, button_actions){
            return gtk_clist_set_button_actions(object, button, button_actions)
        }

        public function freeze(){
            return gtk_clist_freeze(object)
        }

        public function thaw(){
            return gtk_clist_thaw(object)
        }

        public function column_titles_show(){
            return gtk_clist_column_titles_show(object)
        }

        public function column_titles_hide(){
            return gtk_clist_column_titles_hide(object)
        }

        public function column_title_active(column){
            return gtk_clist_column_title_active(object, column)
        }

        public function column_title_passive(column){
            return gtk_clist_column_title_passive(object, column)
        }

        public function column_titles_active(){
            return gtk_clist_column_titles_active(object)
        }

        public function column_titles_passive(){
            return gtk_clist_column_titles_passive(object)
        }

        public function set_column_title(column, title){
            return gtk_clist_set_column_title(object, column, title)
        }

        public function get_column_title(column){
            return gtk_clist_get_column_title(object, column)
        }

        public function set_column_widget(column, widget){
            return gtk_clist_set_column_widget(object, column, widget)
        }

        public function get_column_widget(column){
            var w = gtk_clist_get_column_widget(object, column)
            var w1 = dtk_construct_object (w)
            w1.setNative (w)
            return w1
        }

        public function set_column_justification(column, justification){
            return gtk_clist_set_column_justification(object, column, justification)
        }

        public function set_column_visibility(column, visible){
            return gtk_clist_set_column_visibility(object, column, visible)
        }

        public function set_column_resizeable(column, resizeable){
            return gtk_clist_set_column_resizeable(object, column, resizeable)
        }

        public function set_column_auto_resize(column, auto_resize){
            return gtk_clist_set_column_auto_resize(object, column, auto_resize)
        }

        public function columns_autosize(){
            return gtk_clist_columns_autosize(object)
        }

        public function optimal_column_width(column){
            return gtk_clist_optimal_column_width(object, column)
        }

        public function set_column_width(column, width){
            return gtk_clist_set_column_width(object, column, width)
        }

        public function set_column_min_width(column, min_width){
            return gtk_clist_set_column_min_width(object, column, min_width)
        }

        public function set_column_max_width(column, max_width){
            return gtk_clist_set_column_max_width(object, column, max_width)
        }

        public function set_row_height(height){
            return gtk_clist_set_row_height(object, height)
        }

        public function moveto(row, column, row_align:real, col_align:real){
            return gtk_clist_moveto(object, row, column, row_align, col_align)
        }

        public function row_is_visible(row){
            return gtk_clist_row_is_visible(object, row)
        }

        public function get_cell_type(row, column){
            return gtk_clist_get_cell_type(object, row, column)
        }

        public function set_text(row, column, text : string){
            return gtk_clist_set_text(object, row, column, text)
        }

        public function get_text(row, column, var text){
            return gtk_clist_get_text(object, row, column, text)
        }

        public function set_pixmap(row, column, pixmap, mask){
            return gtk_clist_set_pixmap(object, row, column, pixmap, mask)
        }

        public function get_pixmap(row, column, var pixmap, var mask){
            return gtk_clist_get_pixmap(object, row, column, pixmap, mask)
        }

        public function set_pixtext(row, column, text, spacing, pixmap, mask){
            return gtk_clist_set_pixtext(object, row, column, text, spacing, pixmap, mask)
        }

        public function get_pixtext(row, column, text, var spacing, var pixmap, var mask){
            return gtk_clist_get_pixtext(object, row, column, text, spacing, pixmap, mask)
        }

        public function set_foreground(row, color){
            return gtk_clist_set_foreground(object, row, color)
        }

        public function set_background(row, color){
            return gtk_clist_set_background(object, row, color)
        }

        public function set_cell_style(row, column, style){
            return gtk_clist_set_cell_style(object, row, column, style)
        }

        public function get_cell_style(row, column){
            return gtk_clist_get_cell_style(object, row, column)
        }

        public function set_row_style(row, style){
            return gtk_clist_set_row_style(object, row, style)
        }

        public function get_row_style(row){
            return gtk_clist_get_row_style(object, row)
        }

        public function set_shift(row, column, vertical, horizontal){
            return gtk_clist_set_shift(object, row, column, vertical, horizontal)
        }

        public function set_selectable(row, selectable){
            return gtk_clist_set_selectable(object, row, selectable)
        }

        public function get_selectable(row){
            return gtk_clist_get_selectable(object, row)
        }

        public function prepend(text){
            return gtk_clist_prepend(object, text)
        }

        public function append(text){
            return gtk_clist_append(object, text)
        }

        public function insert(row, text){
            return gtk_clist_insert(object, row, text)
        }

        public function remove(row){
            return gtk_clist_remove(object, row)
        }

        public function set_row_data(row, data){
            return gtk_clist_set_row_data(object, row, data)
        }

        public function set_row_data_full(row, data, destroy){
            return gtk_clist_set_row_data_full(object, row, data, destroy)
        }

        public function get_row_data(row){
            return gtk_clist_get_row_data(object, row)
        }

        public function find_row_from_data(data){
            return gtk_clist_find_row_from_data(object, data)
        }

        public function select_row(row, column){
            return gtk_clist_select_row(object, row, column)
        }

        public function unselect_row(row, column){
            return gtk_clist_unselect_row(object, row, column)
        }

        public function undo_selection(){
            return gtk_clist_undo_selection(object)
        }

        public function clear(){
            return gtk_clist_clear(object)
        }

        public function get_selection_info(x, y, var row, var column){
            return gtk_clist_get_selection_info(object, x, y, row, column)
        }

        public function select_all(){
            return gtk_clist_select_all(object)
        }

        public function unselect_all(){
            return gtk_clist_unselect_all(object)
        }

        public function swap_rows(row1, row2){
            return gtk_clist_swap_rows(object, row1, row2)
        }

        public function row_move(source_row, dest_row){
            return gtk_clist_row_move(object, source_row, dest_row)
        }

        public function set_compare_func(cmp_func){
            return gtk_clist_set_compare_func(object, cmp_func)
        }

        public function set_sort_column(column){
            return gtk_clist_set_sort_column(object, column)
        }

        public function set_sort_type(sort_type){
            return gtk_clist_set_sort_type(object, sort_type)
        }

        public function sort(){
            return gtk_clist_sort(object)
        }

        public function set_auto_sort(auto_sort){
            return gtk_clist_set_auto_sort(object, auto_sort)
        }

    }

    /**
     * class CTree
     */

    class CTree(columns, tree_column, titles = [], _toplevel = true) extends CList(columns, titles, false) {
        if (_toplevel) {
            if (sizeof(titles) != 0) {
                object = gtk_ctree_new_with_titles (columns, tree_column, titles)
            } else {
                object = gtk_ctree_new (columns, tree_column)
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_ctree_get_type(object)
        }

        public function construct(columns, tree_column, titles){
            return gtk_ctree_construct(object, columns, tree_column, titles)
        }

        public function new_with_titles(columns, tree_column, titles){
            return gtk_ctree_new_with_titles(object, columns, tree_column, titles)
        }

        public function insert_node(parent, sibling, text : vector, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded){
            return gtk_ctree_insert_node(object, parent, sibling, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
        }

        public function remove_node(node){
            return gtk_ctree_remove_node(object, node)
        }

        public function insert_gnode(parent, sibling, gnode, func, data){
            return gtk_ctree_insert_gnode(object, parent, sibling, gnode, func, data)
        }

        public function export_to_gnode(parent, sibling, node, func, data){
            return gtk_ctree_export_to_gnode(object, parent, sibling, node, func, data)
        }

        public function post_recursive(node, func, data){
            return gtk_ctree_post_recursive(object, node, func, data)
        }

        public function post_recursive_to_depth(node, depth, func, data){
            return gtk_ctree_post_recursive_to_depth(object, node, depth, func, data)
        }

        public function pre_recursive(node, func, data){
            return gtk_ctree_pre_recursive(object, node, func, data)
        }

        public function pre_recursive_to_depth(node, depth, func, data){
            return gtk_ctree_pre_recursive_to_depth(object, node, depth, func, data)
        }

        public function is_viewable(node){
            return gtk_ctree_is_viewable(object, node)
        }

        public function last(node){
            return gtk_ctree_last(object, node)
        }

        public function find_node_ptr(ctree_row){
            return gtk_ctree_find_node_ptr(object, ctree_row)
        }

        public function node_nth(row){
            return gtk_ctree_node_nth(object, row)
        }

        public function find(node, child){
            return gtk_ctree_find(object, node, child)
        }

        public function is_ancestor(node, child){
            return gtk_ctree_is_ancestor(object, node, child)
        }

        public function find_by_row_data(node, data){
            return gtk_ctree_find_by_row_data(object, node, data)
        }

        public function find_all_by_row_data(node, data){
            return gtk_ctree_find_all_by_row_data(object, node, data)
        }

        public function find_by_row_data_custom(node, data, func){
            return gtk_ctree_find_by_row_data_custom(object, node, data, func)
        }

        public function find_all_by_row_data_custom(node, data, func){
            return gtk_ctree_find_all_by_row_data_custom(object, node, data, func)
        }

        public function is_hot_spot(x, y){
            return gtk_ctree_is_hot_spot(object, x, y)
        }

        public function move(node, new_parent, new_sibling){
            return gtk_ctree_move(object, node, new_parent, new_sibling)
        }

        public function expand(node){
            return gtk_ctree_expand(object, node)
        }

        public function expand_recursive(node){
            return gtk_ctree_expand_recursive(object, node)
        }

        public function expand_to_depth(node, depth){
            return gtk_ctree_expand_to_depth(object, node, depth)
        }

        public function collapse(node){
            return gtk_ctree_collapse(object, node)
        }

        public function collapse_recursive(node){
            return gtk_ctree_collapse_recursive(object, node)
        }

        public function collapse_to_depth(node, depth){
            return gtk_ctree_collapse_to_depth(object, node, depth)
        }

        public function toggle_expansion(node){
            return gtk_ctree_toggle_expansion(object, node)
        }

        public function toggle_expansion_recursive(node){
            return gtk_ctree_toggle_expansion_recursive(object, node)
        }

        public function select(node){
            return gtk_ctree_select(object, node)
        }

        public function select_recursive(node){
            return gtk_ctree_select_recursive(object, node)
        }

        public function unselect(node){
            return gtk_ctree_unselect(object, node)
        }

        public function unselect_recursive(node){
            return gtk_ctree_unselect_recursive(object, node)
        }

        public function real_select_recursive(node, state){
            return gtk_ctree_real_select_recursive(object, node, state)
        }

        public function node_set_text(node, column, text : string){
            return gtk_ctree_node_set_text(object, node, column, text)
        }

        public function node_set_pixmap(node, column, pixmap, mask){
            return gtk_ctree_node_set_pixmap(object, node, column, pixmap, mask)
        }

        public function node_set_pixtext(node, column, text, spacing, pixmap, mask){
            return gtk_ctree_node_set_pixtext(object, node, column, text, spacing, pixmap, mask)
        }

        public function set_node_info(node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded){
            return gtk_ctree_set_node_info(object, node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
        }

        public function node_set_shift(node, column, vertical, horizontal){
            return gtk_ctree_node_set_shift(object, node, column, vertical, horizontal)
        }

        public function node_set_selectable(node, selectable){
            return gtk_ctree_node_set_selectable(object, node, selectable)
        }

        public function node_get_selectable(node){
            return gtk_ctree_node_get_selectable(object, node)
        }

        public function node_get_cell_type(node, column){
            return gtk_ctree_node_get_cell_type(object, node, column)
        }

        public function node_get_text(node, column, text){
            return gtk_ctree_node_get_text(object, node, column, text)
        }

        public function node_get_pixmap(node, column, pixmap, mask){
            return gtk_ctree_node_get_pixmap(object, node, column, pixmap, mask)
        }

        public function node_get_pixtext(node, column, text, spacing, pixmap, mask){
            return gtk_ctree_node_get_pixtext(object, node, column, text, spacing, pixmap, mask)
        }

        public function get_node_info(node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded){
            return gtk_ctree_get_node_info(object, node, text, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded)
        }

        public function node_set_row_style(node, style){
            return gtk_ctree_node_set_row_style(object, node, style)
        }

        public function node_get_row_style(node){
            return gtk_ctree_node_get_row_style(object, node)
        }

        public function node_set_cell_style(node, column, style){
            return gtk_ctree_node_set_cell_style(object, node, column, style)
        }

        public function node_get_cell_style(node, column){
            return gtk_ctree_node_get_cell_style(object, node, column)
        }

        public function node_set_foreground(node, color){
            return gtk_ctree_node_set_foreground(object, node, color)
        }

        public function node_set_background(node, color){
            return gtk_ctree_node_set_background(object, node, color)
        }

        public function node_set_row_data(node, data){
            return gtk_ctree_node_set_row_data(object, node, data)
        }

        public function node_set_row_data_full(node, data, destroy){
            return gtk_ctree_node_set_row_data_full(object, node, data, destroy)
        }

        public function node_get_row_data(node){
            return gtk_ctree_node_get_row_data(object, node)
        }

        public function node_moveto(node, column, row_align:real, col_align:real){
            return gtk_ctree_node_moveto(object, node.toNative(), column, row_align, col_align)
        }

        public function node_is_visible(node){
            return gtk_ctree_node_is_visible(object, node)
        }

        public function set_indent(indent){
            return gtk_ctree_set_indent(object, indent)
        }

        public function set_spacing(spacing){
            return gtk_ctree_set_spacing(object, spacing)
        }

        public function set_show_stub(show_stub){
            return gtk_ctree_set_show_stub(object, show_stub)
        }

        public function set_line_style(line_style){
            return gtk_ctree_set_line_style(object, line_style)
        }

        public function set_expander_style(expander_style){
            return gtk_ctree_set_expander_style(object, expander_style)
        }

        public function set_drag_compare_func(cmp_func){
            return gtk_ctree_set_drag_compare_func(object, cmp_func)
        }

        public function sort_node(node){
            return gtk_ctree_sort_node(object, node)
        }

        public function sort_recursive(node){
            return gtk_ctree_sort_recursive(object, node)
        }

    }

    /**
     * class Fixed
     */

    class Fixed(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_fixed_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_fixed_get_type(object)
        }

        public function put(widget, x, y){
            return gtk_fixed_put(object, widget, x, y)
        }

        public function move(widget, x, y){
            return gtk_fixed_move(object, widget, x, y)
        }

    }

    /**
     * class Notebook
     */

    class Notebook(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_notebook_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_notebook_get_type(object)
        }

        public function append_page(child, tab_label){
            return gtk_notebook_append_page(object, child, tab_label)
        }

        public function append_page_menu(child, tab_label, menu_label){
            return gtk_notebook_append_page_menu(object, child, tab_label, menu_label)
        }

        public function prepend_page(child, tab_label){
            return gtk_notebook_prepend_page(object, child, tab_label)
        }

        public function prepend_page_menu(child, tab_label, menu_label){
            return gtk_notebook_prepend_page_menu(object, child, tab_label, menu_label)
        }

        public function insert_page(child, tab_label, position){
            return gtk_notebook_insert_page(object, child, tab_label, position)
        }

        public function insert_page_menu(child, tab_label, menu_label, position){
            return gtk_notebook_insert_page_menu(object, child, tab_label, menu_label, position)
        }

        public function remove_page(page_num){
            return gtk_notebook_remove_page(object, page_num)
        }

        public function get_current_page(){
            return gtk_notebook_get_current_page(object)
        }

        public function get_nth_page(page_num){
            return gtk_notebook_get_nth_page(object, page_num)
        }

        public function page_num(child){
            return gtk_notebook_page_num(object, child)
        }

        public function set_page(page_num){
            return gtk_notebook_set_page(object, page_num)
        }

        public function next_page(){
            return gtk_notebook_next_page(object)
        }

        public function prev_page(){
            return gtk_notebook_prev_page(object)
        }

        public function set_show_border(show_border){
            return gtk_notebook_set_show_border(object, show_border)
        }

        public function set_show_tabs(show_tabs){
            return gtk_notebook_set_show_tabs(object, show_tabs)
        }

        public function set_tab_pos(pos){
            return gtk_notebook_set_tab_pos(object, pos)
        }

        public function set_homogeneous_tabs(homogeneous){
            return gtk_notebook_set_homogeneous_tabs(object, homogeneous)
        }

        public function set_tab_border(border_width){
            return gtk_notebook_set_tab_border(object, border_width)
        }

        public function set_tab_hborder(tab_hborder){
            return gtk_notebook_set_tab_hborder(object, tab_hborder)
        }

        public function set_tab_vborder(tab_vborder){
            return gtk_notebook_set_tab_vborder(object, tab_vborder)
        }

        public function set_scrollable(scrollable){
            return gtk_notebook_set_scrollable(object, scrollable)
        }

        public function popup_enable(){
            return gtk_notebook_popup_enable(object)
        }

        public function popup_disable(){
            return gtk_notebook_popup_disable(object)
        }

        public function get_tab_label(child){
            return gtk_notebook_get_tab_label(object, child)
        }

        public function set_tab_label(child, tab_label){
            return gtk_notebook_set_tab_label(object, child, tab_label)
        }

        public function set_tab_label_text(child, tab_text){
            return gtk_notebook_set_tab_label_text(object, child, tab_text)
        }

        public function get_menu_label(child){
            return gtk_notebook_get_menu_label(object, child)
        }

        public function set_menu_label(child, menu_label){
            return gtk_notebook_set_menu_label(object, child, menu_label)
        }

        public function set_menu_label_text(child, menu_text){
            return gtk_notebook_set_menu_label_text(object, child, menu_text)
        }

        public function query_tab_label_packing(child, expand, fill, pack_type){
            return gtk_notebook_query_tab_label_packing(object, child, expand, fill, pack_type)
        }

        public function set_tab_label_packing(child, expand, fill, pack_type){
            return gtk_notebook_set_tab_label_packing(object, child, expand, fill, pack_type)
        }

        public function reorder_child(child, position){
            return gtk_notebook_reorder_child(object, child, position)
        }

    }

    /**
     * class FontSelection
     */

    class FontSelection(_toplevel = true) extends Notebook(false) {
        if (_toplevel) {
            object = gtk_font_selection_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_font_selection_get_type(object)
        }

        public function get_font_name(){
            return gtk_font_selection_get_font_name(object)
        }

        public function get_font(){
            return gtk_font_selection_get_font(object)
        }

        public function set_font_name(fontname){
            return gtk_font_selection_set_font_name(object, fontname)
        }

        public function set_filter(filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets){
            return gtk_font_selection_set_filter(object, filter_type, font_type, foundries, weights, slants, setwidths, spacings, charsets)
        }

        public function get_preview_text(){
            return gtk_font_selection_get_preview_text(object)
        }

        public function set_preview_text(text){
            return gtk_font_selection_set_preview_text(object, text)
        }

    }

    /**
     * class Paned
     */

    class Paned(_toplevel = true) extends Container(false) {

        public function get_type(){
            return gtk_paned_get_type(object)
        }

        public function add1(child){
            return gtk_paned_add1(object, child)
        }

        public function add2(child){
            return gtk_paned_add2(object, child)
        }

        public function pack1(child, resize, shrink){
            return gtk_paned_pack1(object, child, resize, shrink)
        }

        public function pack2(child, resize, shrink){
            return gtk_paned_pack2(object, child, resize, shrink)
        }

        public function set_position(position){
            return gtk_paned_set_position(object, position)
        }

        public function set_handle_size(size){
            return gtk_paned_set_handle_size(object, size)
        }

        public function set_gutter_size(size){
            return gtk_paned_set_gutter_size(object, size)
        }

        public function compute_position(allocation, child1_req, child2_req){
            return gtk_paned_compute_position(object, allocation, child1_req, child2_req)
        }

    }

    /**
     * class HPaned
     */

    class HPaned(_toplevel = true) extends Paned(false) {
        if (_toplevel) {
            object = gtk_hpaned_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hpaned_get_type(object)
        }

    }

    /**
     * class VPaned
     */

    class VPaned(_toplevel = true) extends Paned(false) {
        if (_toplevel) {
            object = gtk_vpaned_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vpaned_get_type(object)
        }

    }

    /**
     * class Layout
     */

    class Layout(hadjustment, vadjustment, _toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_layout_new (hadjustment, vadjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_layout_get_type(object)
        }

        public function put(widget, x, y){
            return gtk_layout_put(object, widget, x, y)
        }

        public function move(widget, x, y){
            return gtk_layout_move(object, widget, x, y)
        }

        public function set_size(width, height){
            return gtk_layout_set_size(object, width, height)
        }

        public function get_hadjustment(){
            return gtk_layout_get_hadjustment(object)
        }

        public function get_vadjustment(){
            return gtk_layout_get_vadjustment(object)
        }

        public function set_hadjustment(adjustment){
            return gtk_layout_set_hadjustment(object, adjustment)
        }

        public function set_vadjustment(adjustment){
            return gtk_layout_set_vadjustment(object, adjustment)
        }

        public function freeze(){
            return gtk_layout_freeze(object)
        }

        public function thaw(){
            return gtk_layout_thaw(object)
        }

    }

    /**
     * class List
     */

    class List(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_list_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_list_get_type(object)
        }

        public function insert_items(items, position){
            return gtk_list_insert_items(object,  items, position)
        }

        public function append_items( items){
            return gtk_list_append_items(object,  items)
        }

        public function prepend_items( items){
            return gtk_list_prepend_items(object,  items)
        }

        public function remove_items( items){
            return gtk_list_remove_items(object,  items)
        }

        public function remove_items_no_unref( items){
            return gtk_list_remove_items_no_unref(object,  items)
        }

        public function clear_items( start, end){
            return gtk_list_clear_items(object,  start, end)
        }

        public function select_item( item){
            return gtk_list_select_item(object,  item)
        }

        public function unselect_item( item){
            return gtk_list_unselect_item(object,  item)
        }

        public function select_child( child){
            return gtk_list_select_child(object,  child)
        }

        public function unselect_child( child){
            return gtk_list_unselect_child(object,  child)
        }

        public function child_position( child){
            return gtk_list_child_position(object,  child)
        }

        public function set_selection_mode( mode){
            return gtk_list_set_selection_mode(object,  mode)
        }

        public function extend_selection( scroll_type, position:real, auto_start_selection){
            return gtk_list_extend_selection(object,  scroll_type, position, auto_start_selection)
        }

        public function start_selection(){
            return gtk_list_start_selection(object)
        }

        public function end_selection(){
            return gtk_list_end_selection(object)
        }

        public function select_all(){
            return gtk_list_select_all(object)
        }

        public function unselect_all(){
            return gtk_list_unselect_all(object)
        }

        public function scroll_horizontal( scroll_type, position:real){
            return gtk_list_scroll_horizontal(object,  scroll_type, position)
        }

        public function scroll_vertical( scroll_type, position:real){
            return gtk_list_scroll_vertical(object,  scroll_type, position)
        }

        public function toggle_add_mode(){
            return gtk_list_toggle_add_mode(object)
        }

        public function toggle_focus_row(){
            return gtk_list_toggle_focus_row(object)
        }

        public function toggle_row( item){
            return gtk_list_toggle_row(object,  item)
        }

        public function undo_selection(){
            return gtk_list_undo_selection(object)
        }

        public function end_drag_selection(){
            return gtk_list_end_drag_selection(object)
        }

    }

    /**
     * class MenuShell
     */

    class MenuShell(_toplevel = true) extends Container(false) {
        public function get_type(){
            return gtk_menu_shell_get_type(object)
        }

        public function append( child){
            return gtk_menu_shell_append(object,  child)
        }

        public function prepend( child){
            return gtk_menu_shell_prepend(object,  child)
        }

        public function insert( child, position){
            return gtk_menu_shell_insert(object,  child, position)
        }

        public function deactivate(){
            return gtk_menu_shell_deactivate(object)
        }

        public function select_item( menu_item){
            return gtk_menu_shell_select_item(object,  menu_item)
        }

        public function deselect(){
            return gtk_menu_shell_deselect(object)
        }

        public function activate_item( menu_item, force_deactivate){
            return gtk_menu_shell_activate_item(object,  menu_item, force_deactivate)
        }

    }

    /**
     * class MenuBar
     */

    class MenuBar(_toplevel = true) extends MenuShell(false) {
        if (_toplevel) {
            object = gtk_menu_bar_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_menu_bar_get_type(object)
        }

        public function append(child){
            return gtk_menu_bar_append(object, child)
        }

        public function prepend(child){
            return gtk_menu_bar_prepend(object, child)
        }

        public function insert(child, position){
            return gtk_menu_bar_insert(object, child, position)
        }

        public function set_shadow_type(type){
            return gtk_menu_bar_set_shadow_type(object, type)
        }

    }

    /**
     * class Menu
     */

    class Menu(_toplevel = true) extends MenuShell(false) {
        if (_toplevel) {
            object = gtk_menu_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_menu_get_type(object)
        }

        public function append(child){
            return gtk_menu_append(object, child)
        }

        public function prepend(child){
            return gtk_menu_prepend(object, child)
        }

        public function insert(child, position){
            return gtk_menu_insert(object, child, position)
        }

        public function popup(parent_menu_shell, parent_menu_item, func, data, button, activate_time){
            return gtk_menu_popup(object, parent_menu_shell, parent_menu_item, func, data, button, activate_time)
        }

        public function reposition(){
            return gtk_menu_reposition(object)
        }

        public function popdown(){
            return gtk_menu_popdown(object)
        }

        public function get_active(){
            return gtk_menu_get_active(object)
        }

        public function set_active(index){
            return gtk_menu_set_active(object, index)
        }

        public function set_accel_group(accel_group){
            return gtk_menu_set_accel_group(object, accel_group)
        }

        public function get_accel_group(){
            return gtk_menu_get_accel_group(object)
        }

        public function get_uline_accel_group(){
            return gtk_menu_get_uline_accel_group(object)
        }

        public function ensure_uline_accel_group(){
            return gtk_menu_ensure_uline_accel_group(object)
        }

        public function attach_to_widget(attach_widget, detacher){
            return gtk_menu_attach_to_widget(object, attach_widget, detacher)
        }

        public function detach(){
            return gtk_menu_detach(object)
        }

        public function get_attach_widget(){
            return gtk_menu_get_attach_widget(object)
        }

        public function set_tearoff_state(torn_off){
            return gtk_menu_set_tearoff_state(object, torn_off)
        }

        public function set_title(title){
            return gtk_menu_set_title(object, title)
        }

        public function reorder_child(child, position){
            return gtk_menu_reorder_child(object, child, position)
        }

        public function factory_new(type){
            return gtk_menu_factory_new(object, type)
        }

        public function factory_destroy(factory){
            return gtk_menu_factory_destroy(object, factory)
        }

        public function factory_add_entries(factory, entries, nentries){
            return gtk_menu_factory_add_entries(object, factory, entries, nentries)
        }

        public function factory_add_subfactory(factory, subfactory, path){
            return gtk_menu_factory_add_subfactory(object, factory, subfactory, path)
        }

        public function factory_remove_paths(factory, paths, npaths){
            return gtk_menu_factory_remove_paths(object, factory, paths, npaths)
        }

        public function factory_remove_entries(factory, entries, nentries){
            return gtk_menu_factory_remove_entries(object, factory, entries, nentries)
        }

        public function factory_remove_subfactory(factory, subfactory, path){
            return gtk_menu_factory_remove_subfactory(object, factory, subfactory, path)
        }

        public function factory_find(factory, path){
            return gtk_menu_factory_find(object, factory, path)
        }

    }

    /**
     * class Packer
     */

    class Packer(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_packer_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_packer_get_type(object)
        }

        public function add_defaults(child, side, anchor, options){
            return gtk_packer_add_defaults(object, child, side, anchor, options)
        }

        public function add(child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y){
            return gtk_packer_add(object, child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y)
        }

        public function set_child_packing(child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y){
            return gtk_packer_set_child_packing(object, child, side, anchor, options, border_width, pad_x, pad_y, i_pad_x, i_pad_y)
        }

        public function reorder_child(child, position){
            return gtk_packer_reorder_child(object, child, position)
        }

        public function set_spacing(spacing){
            return gtk_packer_set_spacing(object, spacing)
        }

        public function set_default_border_width(border){
            return gtk_packer_set_default_border_width(object, border)
        }

        public function set_default_pad(pad_x, pad_y){
            return gtk_packer_set_default_pad(object, pad_x, pad_y)
        }

        public function set_default_ipad(i_pad_x, i_pad_y){
            return gtk_packer_set_default_ipad(object, i_pad_x, i_pad_y)
        }

    }

    /**
     * class Socket
     */

    class Socket(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_socket_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_socket_get_type(object)
        }

        public function steal(wid){
            return gtk_socket_steal(object, wid)
        }

    }

    /**
     * class Table
     */

    class Table(rows, columns, homogeneous, _toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_table_new (rows, columns, homogeneous)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_table_get_type(object)
        }

        public function resize( rows, columns){
            return gtk_table_resize(object,  rows, columns)
        }

        public function attach( child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding){
            return gtk_table_attach(object,  child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding)
        }

        public function attach_defaults( widget, left_attach, right_attach, top_attach, bottom_attach){
            return gtk_table_attach_defaults(object,  widget, left_attach, right_attach, top_attach, bottom_attach)
        }

        public function set_row_spacing( row, spacing){
            return gtk_table_set_row_spacing(object,  row, spacing)
        }

        public function set_col_spacing( column, spacing){
            return gtk_table_set_col_spacing(object,  column, spacing)
        }

        public function set_row_spacings( spacing){
            return gtk_table_set_row_spacings(object,  spacing)
        }

        public function set_col_spacings( spacing){
            return gtk_table_set_col_spacings(object,  spacing)
        }

        public function set_homogeneous( homogeneous){
            return gtk_table_set_homogeneous(object,  homogeneous)
        }

    }

    /**
     * class Toolbar
     */

    class Toolbar(orientation, style, _toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_toolbar_new (orientation, style)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_toolbar_get_type(object)
        }

        public function append_item( text, tooltip_text, tooltip_private_text, icon, callback, user_data){
            return gtk_toolbar_append_item(object,  text, tooltip_text, tooltip_private_text, icon, callback, user_data)
        }

        public function prepend_item( text, tooltip_text, tooltip_private_text, icon, callback, user_data){
            return gtk_toolbar_prepend_item(object,  text, tooltip_text, tooltip_private_text, icon, callback, user_data)
        }

        public function insert_item( text, tooltip_text, tooltip_private_text, icon, callback, user_data, position){
            return gtk_toolbar_insert_item(object,  text, tooltip_text, tooltip_private_text, icon, callback, user_data, position)
        }

        public function append_space(){
            return gtk_toolbar_append_space(object)
        }

        public function prepend_space(){
            return gtk_toolbar_prepend_space(object)
        }

        public function insert_space( position){
            return gtk_toolbar_insert_space(object,  position)
        }

        public function append_element( type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data){
            return gtk_toolbar_append_element(object,  type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
        }

        public function prepend_element( type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data){
            return gtk_toolbar_prepend_element(object,  type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data)
        }

        public function insert_element( type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data, position){
            return gtk_toolbar_insert_element(object,  type, widget, text, tooltip_text, tooltip_private_text, icon, callback, user_data, position)
        }

        public function append_widget( widget, tooltip_text, tooltip_private_text){
            return gtk_toolbar_append_widget(object,  widget, tooltip_text, tooltip_private_text)
        }

        public function prepend_widget( widget, tooltip_text, tooltip_private_text){
            return gtk_toolbar_prepend_widget(object,  widget, tooltip_text, tooltip_private_text)
        }

        public function insert_widget( widget, tooltip_text, tooltip_private_text, position){
            return gtk_toolbar_insert_widget(object,  widget, tooltip_text, tooltip_private_text, position)
        }

        public function set_orientation( orientation){
            return gtk_toolbar_set_orientation(object,  orientation)
        }

        public function set_style( style){
            return gtk_toolbar_set_style(object,  style)
        }

        public function set_space_size( space_size){
            return gtk_toolbar_set_space_size(object,  space_size)
        }

        public function set_space_style( space_style){
            return gtk_toolbar_set_space_style(object,  space_style)
        }

        public function set_tooltips( enable){
            return gtk_toolbar_set_tooltips(object,  enable)
        }

        public function set_button_relief( relief){
            return gtk_toolbar_set_button_relief(object,  relief)
        }

        public function get_button_relief(){
            return gtk_toolbar_get_button_relief(object)
        }

    }

    /**
     * class Tree
     */

    class Tree(_toplevel = true) extends Container(false) {
        if (_toplevel) {
            object = gtk_tree_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_tree_get_type(object)
        }

        public function append( tree_item){
            return gtk_tree_append(object,  tree_item)
        }

        public function prepend( tree_item){
            return gtk_tree_prepend(object,  tree_item)
        }

        public function insert( tree_item, position){
            return gtk_tree_insert(object,  tree_item, position)
        }

        public function remove_items( items){
            return gtk_tree_remove_items(object,  items)
        }

        public function clear_items( start, end){
            return gtk_tree_clear_items(object,  start, end)
        }

        public function select_item( item){
            return gtk_tree_select_item(object,  item)
        }

        public function unselect_item( item){
            return gtk_tree_unselect_item(object,  item)
        }

        public function select_child( tree_item){
            return gtk_tree_select_child(object,  tree_item)
        }

        public function unselect_child( tree_item){
            return gtk_tree_unselect_child(object,  tree_item)
        }

        public function child_position( child){
            return gtk_tree_child_position(object,  child)
        }

        public function set_selection_mode( mode){
            return gtk_tree_set_selection_mode(object,  mode)
        }

        public function set_view_mode( mode){
            return gtk_tree_set_view_mode(object,  mode)
        }

        public function set_view_lines( flag){
            return gtk_tree_set_view_lines(object,  flag)
        }

        public function remove_item( child){
            return gtk_tree_remove_item(object,  child)
        }

    }

    /**
     * class Calendar
     */

    class Calendar(_toplevel = true) extends Widget(false) {
        if (_toplevel) {
            object = gtk_calendar_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_calendar_get_type(object)
        }

        public function select_month( month, year){
            return gtk_calendar_select_month(object,  month, year)
        }

        public function select_day( day){
            return gtk_calendar_select_day(object,  day)
        }

        public function mark_day( day){
            return gtk_calendar_mark_day(object,  day)
        }

        public function unmark_day( day){
            return gtk_calendar_unmark_day(object,  day)
        }

        public function clear_marks(){
            return gtk_calendar_clear_marks(object)
        }

        public function display_options( flags){
            return gtk_calendar_display_options(object,  flags)
        }

        public function get_date( year, month, day){
            return gtk_calendar_get_date(object,  year, month, day)
        }

        public function freeze(){
            return gtk_calendar_freeze(object)
        }

        public function thaw(){
            return gtk_calendar_thaw(object)
        }

    }

    /**
     * class DrawingArea
     */

    class DrawingArea(_toplevel = true) extends Widget(false) {
        if (_toplevel) {
            object = gtk_drawing_area_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_drawing_area_get_type(object)
        }

        public function size(width, height){
            return gtk_drawing_area_size(object, width, height)
        }

    }

    /**
     * class Curve
     */

    class Curve(_toplevel = true) extends DrawingArea(false) {
        if (_toplevel) {
            object = gtk_curve_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_curve_get_type(object)
        }

        public function reset(){
            return gtk_curve_reset(object)
        }

        public function set_gamma(gamma:real){
            return gtk_curve_set_gamma(object, gamma)
        }

        public function set_range(min_x:real, max_x:real, min_y:real, max_y:real){
            return gtk_curve_set_range(object, min_x, max_x, min_y, max_y)
        }

        public function get_vector(veclen, vector){
            return gtk_curve_get_vector(object, veclen, vector)
        }

        public function set_vector(veclen, vector){
            return gtk_curve_set_vector(object, veclen, vector)
        }

        public function set_curve_type(type){
            return gtk_curve_set_curve_type(object, type)
        }

    }

    /**
     * class Editable
     */

    class Editable(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_editable_get_type(object)
        }

        public function select_region( start, end){
            return gtk_editable_select_region(object,  start, end)
        }

        public function insert_text( new_text, new_text_length, position){
            return gtk_editable_insert_text(object,  new_text, new_text_length, position)
        }

        public function delete_text( start_pos, end_pos){
            return gtk_editable_delete_text(object,  start_pos, end_pos)
        }

        public function get_chars( start_pos, end_pos){
            return gtk_editable_get_chars(object,  start_pos, end_pos)
        }

        public function cut_clipboard(){
            return gtk_editable_cut_clipboard(object)
        }

        public function copy_clipboard(){
            return gtk_editable_copy_clipboard(object)
        }

        public function paste_clipboard(){
            return gtk_editable_paste_clipboard(object)
        }

        public function claim_selection( claim, time){
            return gtk_editable_claim_selection(object,  claim, time)
        }

        public function delete_selection(){
            return gtk_editable_delete_selection(object)
        }

        public function changed(){
            return gtk_editable_changed(object)
        }

        public function set_position( position){
            return gtk_editable_set_position(object,  position)
        }

        public function get_position(){
            return gtk_editable_get_position(object)
        }

        public function set_editable( is_editable){
            return gtk_editable_set_editable(object,  is_editable)
        }

    }

    /**
     * class Entry
     */

    class Entry(max = -1, _toplevel = true) extends Editable(false) {
        if (_toplevel) {
            if (max > 0) {
                object = gtk_entry_new_with_max_length (max)
            } else {
                object = gtk_entry_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_entry_get_type(object)
        }

        public function set_text( text : string){
            return gtk_entry_set_text(object,  text)
        }

        public function append_text( text){
            return gtk_entry_append_text(object,  text)
        }

        public function prepend_text( text){
            return gtk_entry_prepend_text(object,  text)
        }

        public function set_position( position){
            return gtk_entry_set_position(object,  position)
        }

        public function get_text(){
            return gtk_entry_get_text(object)
        }

        public function select_region( start, end){
            return gtk_entry_select_region(object,  start, end)
        }

        public function set_visibility( visible){
            return gtk_entry_set_visibility(object,  visible)
        }

        public function set_editable( editable){
            return gtk_entry_set_editable(object,  editable)
        }

        public function set_max_length( max){
            return gtk_entry_set_max_length(object,  max)
        }

    }

    /**
     * class SpinButton
     */

    class SpinButton(adjustment, climb_rate:real, digits, _toplevel = true) extends Entry(-1, false) {
        if (_toplevel) {
            object = gtk_spin_button_new (adjustment.toNative(), climb_rate, digits)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_spin_button_get_type(object)
        }

        public function configure( adjustment, climb_rate:real, digits){
            return gtk_spin_button_configure(object,  adjustment.toNative(), climb_rate, digits)
        }

        public function set_adjustment( adjustment){
            return gtk_spin_button_set_adjustment(object,  adjustment)
        }

        public function get_adjustment(){
            return gtk_spin_button_get_adjustment(object)
        }

        public function set_digits( digits){
            return gtk_spin_button_set_digits(object,  digits)
        }

        public function get_value_as_float(){
            return gtk_spin_button_get_value_as_float(object)
        }

        public function get_value_as_int(){
            return gtk_spin_button_get_value_as_int(object)
        }

        public function set_value( value:real){
            return gtk_spin_button_set_value(object,  value)
        }

        public function set_update_policy( policy){
            return gtk_spin_button_set_update_policy(object,  policy)
        }

        public function set_numeric( numeric){
            return gtk_spin_button_set_numeric(object,  numeric)
        }

        public function spin( direction, increment:real){
            return gtk_spin_button_spin(object,  direction, increment)
        }

        public function set_wrap( wrap){
            return gtk_spin_button_set_wrap(object,  wrap)
        }

        public function set_shadow_type( shadow_type){
            return gtk_spin_button_set_shadow_type(object,  shadow_type)
        }

        public function set_snap_to_ticks( snap_to_ticks){
            return gtk_spin_button_set_snap_to_ticks(object,  snap_to_ticks)
        }

        public function update(){
            return gtk_spin_button_update(object)
        }

    }

    class Adjustment...

    /**
     * class Text
     */

    class Text(public hadj, public vadj, _toplevel = true) extends Editable(false) {
        if (_toplevel) {
            object = gtk_text_new (hadj, vadj)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_text_get_type(object)
        }

        public function set_editable( editable){
            return gtk_text_set_editable(object,  editable)
        }

        public function set_word_wrap( word_wrap){
            return gtk_text_set_word_wrap(object,  word_wrap)
        }

        public function set_line_wrap( line_wrap){
            return gtk_text_set_line_wrap(object,  line_wrap)
        }

        public function set_adjustments( hadj, vadj){
            return gtk_text_set_adjustments(object,  hadj, vadj)
        }

        public function set_point( index){
            return gtk_text_set_point(object,  index)
        }

        public function get_point(){
            return gtk_text_get_point(object)
        }

        public function get_length(){
            return gtk_text_get_length(object)
        }

        public function freeze(){
            return gtk_text_freeze(object)
        }

        public function thaw(){
            return gtk_text_thaw(object)
        }

        public function insert( font, fore, back, chars, length){
            return gtk_text_insert(object,  font, fore, back, chars, length)
        }

        public function backward_delete( nchars){
            return gtk_text_backward_delete(object,  nchars)
        }

        public function forward_delete( nchars){
            return gtk_text_forward_delete(object,  nchars)
        }

        public function get_adjustments (var hadj, var vadj) {
            var v = 0
            var h = 0
            dtk_text_get_adjustments (object, v, h)
            vadj = dtk_construct_object (v)
            vadj.setNative (v)
            hadj = dtk_construct_object (h)
            hadj.setNative (h)
        }

        public function get_char (index) {
            return dtk_text_get_char (object, index) 
        }
    }

    /**
     * class Ruler
     */

    class Ruler(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_ruler_get_type(object)
        }

        public function set_metric(metric){
            return gtk_ruler_set_metric(object, metric)
        }

        public function set_range(lower:real, upper:real, position:real, max_size:real){
            return gtk_ruler_set_range(object, lower, upper, position, max_size)
        }

        public function draw_ticks(){
            return gtk_ruler_draw_ticks(object)
        }

        public function draw_pos(){
            return gtk_ruler_draw_pos(object)
        }

    }

    /**
     * class HRuler
     */

    class HRuler(_toplevel = true) extends Ruler(false) {
        if (_toplevel) {
            object = gtk_hruler_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hruler_get_type(object)
        }

    }

    /**
     * class VRuler
     */

    class VRuler(_toplevel = true) extends Ruler(false) {
        if (_toplevel) {
            object = gtk_vruler_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vruler_get_type(object)
        }

    }

    /**
     * class Range
     */

    class Range(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_range_get_type(object)
        }

        public function get_adjustment(){
            return gtk_range_get_adjustment(object)
        }

        public function set_update_policy(policy){
            return gtk_range_set_update_policy(object, policy)
        }

        public function set_adjustment(adjustment){
            return gtk_range_set_adjustment(object, adjustment)
        }

        public function draw_background(){
            return gtk_range_draw_background(object)
        }

        public function clear_background(){
            return gtk_range_clear_background(object)
        }

        public function draw_trough(){
            return gtk_range_draw_trough(object)
        }

        public function draw_slider(){
            return gtk_range_draw_slider(object)
        }

        public function draw_step_forw(){
            return gtk_range_draw_step_forw(object)
        }

        public function draw_step_back(){
            return gtk_range_draw_step_back(object)
        }

        public function slider_update(){
            return gtk_range_slider_update(object)
        }

        public function trough_click(x, y, jump_perc){
            return gtk_range_trough_click(object, x, y, jump_perc)
        }

        public function default_hslider_update(){
            return gtk_range_default_hslider_update(object)
        }

        public function default_vslider_update(){
            return gtk_range_default_vslider_update(object)
        }

        public function default_htrough_click(x, y, jump_perc){
            return gtk_range_default_htrough_click(object, x, y, jump_perc)
        }

        public function default_vtrough_click(x, y, jump_perc){
            return gtk_range_default_vtrough_click(object, x, y, jump_perc)
        }

        public function default_hmotion(xdelta, ydelta){
            return gtk_range_default_hmotion(object, xdelta, ydelta)
        }

        public function default_vmotion(xdelta, ydelta){
            return gtk_range_default_vmotion(object, xdelta, ydelta)
        }

    }

    /**
     * class Scale
     */

    class Scale(_toplevel = true) extends Range(false) {
        public function get_type(){
            return gtk_scale_get_type(object)
        }

        public function set_digits(digits){
            return gtk_scale_set_digits(object, digits)
        }

        public function set_draw_value(draw_value){
            return gtk_scale_set_draw_value(object, draw_value)
        }

        public function set_value_pos(pos){
            return gtk_scale_set_value_pos(object, pos)
        }

        public function get_value_width(){
            return gtk_scale_get_value_width(object)
        }

        public function draw_value(){
            return gtk_scale_draw_value(object)
        }

    }

    /**
     * class HScale
     */

    class HScale(adjustment, _toplevel = true) extends Scale(false) {
        if (_toplevel) {
            object = gtk_hscale_new (adjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hscale_get_type(object)
        }

    }

    /**
     * class VScale
     */

    class VScale(adjustment, _toplevel = true) extends Scale(false) {
        if (_toplevel) {
            object = gtk_vscale_new (adjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vscale_get_type(object)
        }

    }

    /**
     * class Scrollbar
     */

    class Scrollbar(_toplevel = true) extends Range(false) {
        if (typeof (_toplevel) != "integer" || _toplevel) {
           throw "Cannot create an object of this type directly"
        }
        public function get_type(){
            return gtk_scrollbar_get_type(object)
        }

    }

    /**
     * class HScrollbar
     */

    class HScrollbar(adjustment, _toplevel = true) extends Scrollbar(false) {
        if (_toplevel) {
            object = gtk_hscrollbar_new (adjustment)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hscrollbar_get_type(object)
        }

    }

    /**
     * class VScrollbar
     */

    class VScrollbar(adjustment, _toplevel = true) extends Scrollbar(false) {
        if (_toplevel) {
            var a = adjustment != null ? adjustment : 0
            object = gtk_vscrollbar_new (a)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vscrollbar_get_type(object)
        }

    }

    /**
     * class Separator
     */

    class Separator(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_separator_get_type(object)
        }

    }

    /**
     * class HSeparator
     */

    class HSeparator(_toplevel = true) extends Separator(false) {
        if (_toplevel) {
            object = gtk_hseparator_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_hseparator_get_type(object)
        }

    }

    /**
     * class VSeparator
     */

    class VSeparator(_toplevel = true) extends Separator(false) {
        if (_toplevel) {
            object = gtk_vseparator_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_vseparator_get_type(object)
        }

    }

    /**
     * class Preview
     */

    class Preview(type, _toplevel = true) extends Widget(false) {
        if (_toplevel) {
            object = gtk_preview_new (type)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_preview_get_type(object)
        }

        public function uninit(){
            return gtk_preview_uninit(object)
        }

        public function size(width, height){
            return gtk_preview_size(object, width, height)
        }

        public function put(window, gc, srcx, srcy, destx, desty, width, height){
            return gtk_preview_put(object, window, gc, srcx, srcy, destx, desty, width, height)
        }

        public function draw_row(data, x, y, w){
            return gtk_preview_draw_row(object, data, x, y, w)
        }

        public function set_expand(expand){
            return gtk_preview_set_expand(object, expand)
        }

        public function set_gamma(gamma){
            return gtk_preview_set_gamma(object, gamma)
        }

        public function set_color_cube(nred_shades, ngreen_shades, nblue_shades, ngray_shades){
            return gtk_preview_set_color_cube(object, nred_shades, ngreen_shades, nblue_shades, ngray_shades)
        }

        public function set_install_cmap(install_cmap){
            return gtk_preview_set_install_cmap(object, install_cmap)
        }

        public function set_reserved(nreserved){
            return gtk_preview_set_reserved(object, nreserved)
        }

        public function set_dither(dither){
            return gtk_preview_set_dither(object, dither)
        }

        public function get_visual(){
            return gtk_preview_get_visual(object)
        }

        public function get_cmap(){
            return gtk_preview_get_cmap(object)
        }

        public function get_info(){
            return gtk_preview_get_info(object)
        }

        public function reset(){
            return gtk_preview_reset(object)
        }

    }

    /**
     * class Progress
     */

    class Progress(_toplevel = true) extends Widget(false) {
        public function get_type(){
            return gtk_progress_get_type(object)
        }

        public function set_show_text(show_text){
            return gtk_progress_set_show_text(object, show_text)
        }

        public function set_text_alignment(x_align:real, y_align:real){
            return gtk_progress_set_text_alignment(object, x_align, y_align)
        }

        public function set_format_string(format){
            return gtk_progress_set_format_string(object, format)
        }

        public function set_adjustment(adjustment){
            return gtk_progress_set_adjustment(object, adjustment)
        }

        public function configure(value:real, min:real, max:real){
            return gtk_progress_configure(object, value, min, max)
        }

        public function set_percentage(percentage:real){
            return gtk_progress_set_percentage(object, percentage)
        }

        public function set_value(value : real){
            return gtk_progress_set_value(object, value)
        }

        public function get_value(){
            return gtk_progress_get_value(object)
        }

        public function set_activity_mode(activity_mode){
            return gtk_progress_set_activity_mode(object, activity_mode)
        }

        public function get_current_text(){
            return gtk_progress_get_current_text(object)
        }

        public function get_text_from_value(value){
            return gtk_progress_get_text_from_value(object, value)
        }

        public function get_current_percentage(){
            return gtk_progress_get_current_percentage(object)
        }

        public function get_percentage_from_value(value){
            return gtk_progress_get_percentage_from_value(object, value)
        }

        public function get_adjustment {
            var addr = dtk_progress_get_adjustment (object)
            var a = dtk_construct_object (addr)
            a.setNative (addr)
            return a
        }

    }

    /**
     * class ProgressBar
     */

    class ProgressBar(adjustment = null, _toplevel = true) extends Progress(false) {
        if (_toplevel) {
            if (adjustment != null) {
                object =  gtk_progress_bar_new_with_adjustment(adjustment)
            } else {
                object = gtk_progress_bar_new ()
            }
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_progress_bar_get_type(object)
        }

        public function set_bar_style(style){
            return gtk_progress_bar_set_bar_style(object, style)
        }

        public function set_discrete_blocks(blocks){
            return gtk_progress_bar_set_discrete_blocks(object, blocks)
        }

        public function set_activity_step(step){
            return gtk_progress_bar_set_activity_step(object, step)
        }

        public function set_activity_blocks(blocks){
            return gtk_progress_bar_set_activity_blocks(object, blocks)
        }

        public function set_orientation(orientation){
            return gtk_progress_bar_set_orientation(object, orientation)
        }

        public function update(percentage){
            return gtk_progress_bar_update(object, percentage)
        }

    }

    /**
     * class Data 
     */

    class Data (_toplevel=true) extends Object (false) {
    }

    /**
     * class Adjustment
     */

    class Adjustment(value : real = 0.0, lower : real = 0.0, upper : real = 0.0, step_increment : real = 0.0, 
                     page_increment : real = 0.0, page_size : real = 0.0, _toplevel = true) extends Data(false) {
        if (_toplevel) {
            object = gtk_adjustment_new (value, lower, upper, step_increment, page_increment, page_size)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_adjustment_get_type(object)
        }

        public function changed{
            return gtk_adjustment_changed(object)
        }

        public function value_changed{
            return gtk_adjustment_value_changed(object)
        }

        public function clamp_page(lower:real, upper:real){
            return gtk_adjustment_clamp_page(object, lower, upper)
        }

        public function set_value(value:real){
            return gtk_adjustment_set_value(object, value)
        }

        public function get_upper {
            return dtk_adjustment_get_upper(object)
        }

        public function get_lower {
            return dtk_adjustment_get_lower(object)
        }

        public function get_step_increment {
            return dtk_adjustment_get_step_increment(object)
        }

        public function get_page_increment {
            return dtk_adjustment_get_page_increment(object)
        }

        public function get_page_size {
            return dtk_adjustment_get_page_size(object)
        }
    }

    /**
     * class Tooltips
     */

    class Tooltips(_toplevel = true) extends Data(false) {
        if (_toplevel) {
            object = gtk_tooltips_new ()
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_tooltips_get_type(object)
        }

        public function enable(){
            return gtk_tooltips_enable(object)
        }

        public function disable(){
            return gtk_tooltips_disable(object)
        }

        public function set_delay(delay){
            return gtk_tooltips_set_delay(object, delay)
        }

        public function set_tip(widget, tip_text, tip_private){
            return gtk_tooltips_set_tip(object, widget, tip_text, tip_private)
        }

        public function set_colors(background, foreground){
            return gtk_tooltips_set_colors(object, background, foreground)
        }

        public function data_get(){
            return gtk_tooltips_data_get(object)
        }

        public function force_window(){
            return gtk_tooltips_force_window(object)
        }

    }

    /**
     * class ItemFactory
     */

    class ItemFactory(container_type, path, accel_group, _toplevel = true) extends Object(false) {
        if (_toplevel) {
            object = gtk_item_factory_new (container_type, path, accel_group)
            //register_object (this, object)
        }

        public function get_type(){
            return gtk_item_factory_get_type(object)
        }

        public function construct(container_type, path, accel_group){
            return gtk_item_factory_construct(object, container_type, path, accel_group)
        }

        public function parse_rc(file_name){
            return gtk_item_factory_parse_rc(object, file_name)
        }

        public function parse_rc_string(rc_string){
            return gtk_item_factory_parse_rc_string(object, rc_string)
        }

        public function parse_rc_scanner(scanner){
            return gtk_item_factory_parse_rc_scanner(object, scanner)
        }

        public function add_foreign(accel_widget, full_path, accel_group, keyval, modifiers){
            return gtk_item_factory_add_foreign(object, accel_widget, full_path, accel_group, keyval, modifiers)
        }

        public function from_widget(widget){
            return gtk_item_factory_from_widget(object, widget)
        }

        public function path_from_widget(widget){
            return gtk_item_factory_path_from_widget(object, widget)
        }

        public function get_item(path){
            return gtk_item_factory_get_item(object, path)
        }

        public function get_widget(path){
            return gtk_item_factory_get_widget(object, path)
        }

        public function get_widget_by_action(action){
            return gtk_item_factory_get_widget_by_action(object, action)
        }

        public function get_item_by_action(action){
            return gtk_item_factory_get_item_by_action(object, action)
        }

        public function dump_items(path_pspec, modified_only, print_func, func_data){
            return gtk_item_factory_dump_items(object, path_pspec, modified_only, print_func, func_data)
        }

        public function dump_rc(file_name, path_pspec, modified_only){
            return gtk_item_factory_dump_rc(object, file_name, path_pspec, modified_only)
        }

        public function print_func(FILE_pointer, string){
            return gtk_item_factory_print_func(object, FILE_pointer, string)
        }

        public function create_item(entry, callback_data, callback_type){
            return gtk_item_factory_create_item(object, entry, callback_data, callback_type)
        }

        public function create_items(n_entries, entries, callback_data){
            return gtk_item_factory_create_items(object, n_entries, entries, callback_data)
        }

        public function delete_item(path){
            return gtk_item_factory_delete_item(object, path)
        }

        public function delete_entry(entry){
            return gtk_item_factory_delete_entry(object, entry)
        }

        public function delete_entries(n_entries, entries){
            return gtk_item_factory_delete_entries(object, n_entries, entries)
        }

        public function popup(x, y, mouse_button, time){
            return gtk_item_factory_popup(object, x, y, mouse_button, time)
        }

        public function popup_with_data(popup_data, destroy, x, y, mouse_button, time){
            return gtk_item_factory_popup_with_data(object, popup_data, destroy, x, y, mouse_button, time)
        }

        public function popup_data(){
            return gtk_item_factory_popup_data(object)
        }

        public function popup_data_from_widget(widget){
            return gtk_item_factory_popup_data_from_widget(object, widget)
        }

        public function set_translate_func(func, data, notify){
            return gtk_item_factory_set_translate_func(object, func, data, notify)
        }

        public function from_path(path){
            return gtk_item_factory_from_path(object, path)
        }

        public function create_menu_entries(n_entries, entries){
            return gtk_item_factory_create_menu_entries(object, n_entries, entries)
        }

        public function create_items_ac(n_entries, entries, callback_data, callback_type){
            return gtk_item_factory_create_items_ac(object, n_entries, entries, callback_data, callback_type)
        }

    }

}

import gtkfields
import gtkevents

