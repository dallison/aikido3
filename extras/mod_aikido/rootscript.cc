

namespace aikido {
namespace apache {

const char *getRootScript() {
    return "import ctype\n"
"\n"
"public class Root {\n"
"}\n"
"\n"
"public var apacheroot = new Root();\n"
"\n"
"public package HTTP {\n"
"\n"
"    // these match the M_* macros in apache\n"
"    public const GET = 0\n"
"    public const PUT = 1\n"
"    public const POST = 2\n"
"    public const DELETE = 3\n"
"\n"
"    // status codes\n"
"    public const CONTINUE                      = 100\n"
"    public const SWITCHING_PROTOCOLS           = 101\n"
"    public const PROCESSING                    = 102\n"
"    public const OK                            = 200\n"
"    public const CREATED                       = 201\n"
"    public const ACCEPTED                      = 202\n"
"    public const NON_AUTHORITATIVE             = 203\n"
"    public const NO_CONTENT                    = 204\n"
"    public const RESET_CONTENT                 = 205\n"
"    public const PARTIAL_CONTENT               = 206\n"
"    public const MULTI_STATUS                  = 207\n"
"    public const MULTIPLE_CHOICES              = 300\n"
"    public const MOVED_PERMANENTLY             = 301\n"
"    public const MOVED_TEMPORARILY             = 302\n"
"    public const SEE_OTHER                     = 303\n"
"    public const NOT_MODIFIED                  = 304\n"
"    public const USE_PROXY                     = 305\n"
"    public const TEMPORARY_REDIRECT            = 307\n"
"    public const BAD_REQUEST                   = 400\n"
"    public const UNAUTHORIZED                  = 401\n"
"    public const PAYMENT_REQUIRED              = 402\n"
"    public const FORBIDDEN                     = 403\n"
"    public const NOT_FOUND                     = 404\n"
"    public const METHOD_NOT_ALLOWED            = 405\n"
"    public const NOT_ACCEPTABLE                = 406\n"
"    public const PROXY_AUTHENTICATION_REQUIRED = 407\n"
"    public const REQUEST_TIME_OUT              = 408\n"
"    public const CONFLICT                      = 409\n"
"    public const GONE                          = 410\n"
"    public const LENGTH_REQUIRED               = 411\n"
"    public const PRECONDITION_FAILED           = 412\n"
"    public const REQUEST_ENTITY_TOO_LARGE      = 413\n"
"    public const REQUEST_URI_TOO_LARGE         = 414\n"
"    public const UNSUPPORTED_MEDIA_TYPE        = 415\n"
"    public const RANGE_NOT_SATISFIABLE         = 416\n"
"    public const EXPECTATION_FAILED            = 417\n"
"    public const UNPROCESSABLE_ENTITY          = 422\n"
"    public const LOCKED                        = 423\n"
"    public const FAILED_DEPENDENCY             = 424\n"
"    public const UPGRADE_REQUIRED              = 426\n"
"    public const INTERNAL_SERVER_ERROR         = 500\n"
"    public const NOT_IMPLEMENTED               = 501\n"
"    public const BAD_GATEWAY                   = 502\n"
"    public const SERVICE_UNAVAILABLE           = 503\n"
"    public const GATEWAY_TIME_OUT              = 504\n"
"    public const VERSION_NOT_SUPPORTED         = 505\n"
"    public const VARIANT_ALSO_VARIES           = 506\n"
"    public const INSUFFICIENT_STORAGE          = 507\n"
"    public const NOT_EXTENDED                  = 510\n"
"\n"
"    public class Cookie (name=\"\",value=\"\") {\n"
"        public var domain = \"\"\n"
"        public var path = \"\"\n"
"        public var expires = null\n"
"        public var secure = false\n"
"        public var httponly = false\n"
"        public var comment = \"\"\n"
"        public var version = \"\"\n"
"\n"
"        public function parse_in (line) {\n"
"            var f = line.split ('=')\n"
"            if (f.size() == 2) {\n"
"               name = trim(f[0])\n"
"               value = trim (f[1])\n"
"            } elif (f.size() == 1) {\n"
"               name = trim(f[0])\n"
"            }\n"
"        }\n"
"\n"
"        public function parse (line) {\n"
"            var bits = line.split (\";\")\n"
"            foreach bit bits {\n"
"                var f = bit.split (\"=\")\n"
"                if (f.size() == 2) {\n"
"                    var v = transform (trim(f[0]), ctype.toupper)\n"
"                    try {\n"
"                        switch (v) {\n"
"                        case \"PATH\":\n"
"                            path = trim(f[1])\n"
"                            break\n"
"                        case \"DOMAIN\":\n"
"                            domain = trim(f[1])\n"
"                            break\n"
"                        case \"EXPIRES\":\n"
"                            expires = new Date (trim(f[1]))\n"
"                            break\n"
"                        case \"MAX-AGE\":\n"
"                            var now = System.date()\n"
"                            now += cast<int>(f[1])\n"
"                            break\n"
"                        case \"COMMENT\":\n"
"                            comment = trim(f[1])\n"
"                            break\n"
"                        case \"VERSION\":\n"
"                            version = trim(f[1])\n"
"                            break\n"
"                        default:\n"
"                            // name and value\n"
"                            name = trim(f[0])\n"
"                            value = trim(f[1])\n"
"                            break\n"
"                        }\n"
"                    } catch (e) {\n"
"                        // ignore\n"
"                    }\n"
"                } elif (f.size() == 1) {\n"
"                    var v = transform (trim(f[0]), ctype.toupper)\n"
"                    switch (v) {\n"
"                    case \"SECURE\":\n"
"                        secure = true;\n"
"                        break\n"
"                    case \"HTTPONLY\":\n"
"                        httponly = true;\n"
"                        break\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"\n"
"        public function toString() {\n"
"             var s = name + \"=\" + value\n"
"             function appendString (name, v) {\n"
"                 if (v != \"\") {\n"
"                     s.append (\" ;\")\n"
"                     s.append (name + \"=\" + v)\n"
"                 }\n"
"             }\n"
"             function appendBoolean (name, v) {\n"
"                 if (v != 0) {\n"
"                     s.append (\" ;\")\n"
"                     s.append (name)\n"
"                 }\n"
"             }\n"
"\n"
"             appendString (\"Path\", path)\n"
"             appendString (\"Comment\", comment)\n"
"             appendString (\"Domain\", domain)\n"
"             appendString (\"Expires\", expires == null ? \"\" : expires.toString())\n"
"             appendBoolean (\"Secure\", secure)\n"
"             appendBoolean (\"HttpOnly\", httponly)\n"
"             return s\n"
"        }\n"
"    }\n"
"\n"
"    private native function internal_encodeURI (uri)\n"
"    private native function internal_decodeURI (s)\n"
"    private native function internal_parseURI (uri, pattern, prefix)\n"
"    private native function internal_matchURI (uri, pattern, prefix)\n"
"\n"
"    public function encodeURI (uri:string): string {\n"
"        return internal_encodeURI (uri)\n"
"    }\n"
"\n"
"    public function decodeURI (s:string): string {\n"
"        return internal_decodeURI (s)\n"
"    }\n"
"\n"
"    public function parseURI (uri:string, pattern:string, prefix:string=\"\") : map {\n"
"        return internal_parseURI (uri, pattern, prefix)\n"
"    }\n"
"\n"
"    public function matchURI (uri:string, pattern:string, prefix:string=\"\") : integer {\n"
"        return internal_matchURI (uri, pattern, prefix)\n"
"    }\n"
"\n"
"    public class Request {\n"
"        var req = 0\n"
"        var args = {}\n"
"        var argsset = false\n"
"\n"
"        private native function internal_getMethod(req);\n"
"        private native function internal_getMethodString(req);\n"
"        private native function internal_getArgsString(req);\n"
"        private native function internal_getArgs(req);\n"
"        private native function internal_getHeadersIn(req);\n"
"        private native function internal_getHeader(req, name, all);\n"
"        private native function internal_getRemoteAddr(req);\n"
"        private native function internal_getURI(req);\n"
"        private native function internal_getFilename(req);\n"
"        private native function internal_getCanonicalFilename(req);\n"
"        private native function internal_getVars(req);\n"
"        private native function internal_getVar(req, name);\n"
"\n"
"\n"
"        public function getVars(): map {\n"
"            return internal_getVars (req)\n"
"        }\n"
"\n"
"        public function getVar(name:string):string {\n"
"            return internal_getVar (req, name)\n"
"        }\n"
"\n"
"        public function getContentType():string {\n"
"            return internal_getHeader (req, \"Content-type\", false)\n"
"        }\n"
"\n"
"        public function getMethod():integer {\n"
"            return internal_getMethod (req)\n"
"        }\n"
"\n"
"        public function getMethodString():string {\n"
"            return internal_getMethodString (req)\n"
"        }\n"
"\n"
"        public function getQueryString(): string {\n"
"            return internal_getArgsString (req)\n"
"        }\n"
"\n"
"        public function getArgs(): map {\n"
"            if (!argsset) {\n"
"                args =  internal_getArgs (req)\n"
"                argsset = true\n"
"            }\n"
"            return args           \n"
"        }\n"
"\n"
"        public function getArg (name:string): string {\n"
"            var a = getArgs()\n"
"            var v = args[name]\n"
"            if (typeof (v) == \"none\") {\n"
"                return \"\"\n"
"            }\n"
"            return v\n"
"        }\n"
"\n"
"        public function getRemoteAddr(): string {\n"
"            return internal_getRemoteAddr (req)\n"
"        }\n"
"\n"
"        public function getURI(): string {\n"
"            return internal_getURI (req)\n"
"        }\n"
"\n"
"        public function getFilename(): string {\n"
"            return internal_getFilename (req)\n"
"        }\n"
"\n"
"        public function getCanonicalFilename(): string {\n"
"            return internal_getCanonicalFilename (req)\n"
"        }\n"
"\n"
"        public function getAllHeaders() {\n"
"            return internal_getHeadersIn (req)\n"
"        }\n"
"\n"
"        public function getHeader(name:string) {\n"
"            return internal_getHeader (req, name, false)\n"
"        }\n"
"\n"
"        public function getHeaders(name:string) {\n"
"            return internal_getHeader (req, name, true)\n"
"        }\n"
"\n"
"        public function getCookies(): vector {\n"
"            var cookies = []\n"
"            var val = getHeader (\"cookie\")\n"
"            if (typeof(val) == \"none\") {\n"
"                return cookies\n"
"            }\n"
"            foreach v val.split (';') {\n"
"                var cookie = new Cookie()\n"
"                cookie.parse_in (trim(v))\n"
"                cookies.append (cookie)\n"
"            }\n"
"            return cookies\n"
"        }\n"
"\n"
"        public function getAccept(): vector {\n"
"            class Type (public type, public q) {\n"
"                public operator< (t) {\n"
"                    return q > t.q\n"
"                }\n"
"            }\n"
"\n"
"            var tmpresult = []             \n"
"\n"
"            var accepts = getHeaders (\"accept\")\n"
"            foreach accept accepts {\n"
"                var types = accept.split (\",\")\n"
"                foreach type types {\n"
"                    var q = 1.0;\n"
"                    var fields = type.split (\";\")\n"
"                    if (fields.size() == 2) { \n"
"                        var field = fields[1]\n"
"                        var values = field.split ('=')\n"
"                        if (values.size() == 2) {\n"
"                            if (values[0] == \"q\") {\n"
"                                q = (real)values[1]\n"
"                            }\n"
"                        }\n"
"                    }\n"
"                    tmpresult.append (new Type (fields[0], q))\n"
"                }\n"
"            }\n"
"            var sorted = sort (tmpresult)\n"
"            var result = []\n"
"            foreach s sorted {\n"
"                result.append (s.type)\n"
"            }\n"
"            return result;\n"
"        }\n"
"    }\n"
"\n"
"    public class Response {\n"
"        var req = 0\n"
"        private native function internal_setContentType (req,type);\n"
"        private native function internal_setHeader (req,name, value);\n"
"        private native function internal_addHeader (req,name, value);\n"
"        private native function internal_setStatus (req,status);\n"
"\n"
"        public function setContentType (type:string) {\n"
"            internal_setContentType (req, type)\n"
"        }\n"
"\n"
"        public function setHeader (name:string, value:string) {\n"
"            internal_setHeader (req, name, value)\n"
"        }\n"
"\n"
"        public function addHeader (name:string, value:string) {\n"
"            internal_addHeader (req, name, value)\n"
"        }\n"
"\n"
"        public function addCookie (cookie:Cookie) {\n"
"            internal_addHeader (req, \"Set-Cookie\", cookie.toString())\n"
"        }\n"
"        \n"
"        public function setStatus (status:integer) {\n"
"            internal_setStatus (req, status)\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// initialize the module\n"
"apache-init\n"
"\n"
;
}

}
}

